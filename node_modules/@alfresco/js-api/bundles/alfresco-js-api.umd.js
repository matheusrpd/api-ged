/*!
 * @license @preserve
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define('@alfresco/js-api', ['exports'], factory) :
    (global = global || self, factory(global['@alfresco/js-api'] = {}));
}(this, (function (exports) { 'use strict';

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChildAssociationBody = (function () {
        function ChildAssociationBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ChildAssociationBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AssociationBody = (function () {
        function AssociationBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AssociationBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoriteBodyCreate = (function () {
        function FavoriteBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FavoriteBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.RequestDefaults = (function () {
        function RequestDefaults(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestDefaults;
    }());
    (function (RequestDefaults) {
        RequestDefaults.DefaultFTSOperatorEnum = {
            AND: 'AND',
            OR: 'OR'
        };
        RequestDefaults.DefaultFTSFieldOperatorEnum = {
            AND: 'AND',
            OR: 'OR'
        };
    })(exports.RequestDefaults || (exports.RequestDefaults = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.RequestFacetField = (function () {
        function RequestFacetField(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestFacetField;
    }());
    (function (RequestFacetField) {
        RequestFacetField.SortEnum = {
            COUNT: 'COUNT',
            INDEX: 'INDEX'
        };
        RequestFacetField.MethodEnum = {
            ENUM: 'ENUM',
            FC: 'FC'
        };
    })(exports.RequestFacetField || (exports.RequestFacetField = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFacetFields = (function () {
        function RequestFacetFields(input) {
            if (input) {
                Object.assign(this, input);
                if (input.facets) {
                    this.facets = input.facets.map(function (item) {
                        return new exports.RequestFacetField(item);
                    });
                }
            }
        }
        return RequestFacetFields;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFacetSet = (function () {
        function RequestFacetSet(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestFacetSet;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFacetIntervalsIntervals = (function () {
        function RequestFacetIntervalsIntervals(input) {
            if (input) {
                Object.assign(this, input);
                if (input.sets) {
                    this.sets = input.sets.map(function (item) {
                        return new RequestFacetSet(item);
                    });
                }
            }
        }
        return RequestFacetIntervalsIntervals;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFacetIntervals = (function () {
        function RequestFacetIntervals(input) {
            if (input) {
                Object.assign(this, input);
                if (input.sets) {
                    this.sets = input.sets.map(function (item) {
                        return new RequestFacetSet(item);
                    });
                }
                if (input.intervals) {
                    this.intervals = input.intervals.map(function (item) {
                        return new RequestFacetIntervalsIntervals(item);
                    });
                }
            }
        }
        return RequestFacetIntervals;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFacetQueries = (function (_super) {
        __extends(RequestFacetQueries, _super);
        function RequestFacetQueries(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return RequestFacetQueries;
    }(Array));
    //# sourceMappingURL=requestFacetQueries.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFields = (function (_super) {
        __extends(RequestFields, _super);
        function RequestFields(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return RequestFields;
    }(Array));
    //# sourceMappingURL=requestFields.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFilterQueries = (function (_super) {
        __extends(RequestFilterQueries, _super);
        function RequestFilterQueries(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return RequestFilterQueries;
    }(Array));
    //# sourceMappingURL=requestFilterQueries.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestHighlightFields = (function () {
        function RequestHighlightFields(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestHighlightFields;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestHighlight = (function () {
        function RequestHighlight(input) {
            if (input) {
                Object.assign(this, input);
                if (input.fields) {
                    this.fields = input.fields.map(function (item) {
                        return new RequestHighlightFields(item);
                    });
                }
            }
        }
        return RequestHighlight;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestInclude = (function (_super) {
        __extends(RequestInclude, _super);
        function RequestInclude(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return RequestInclude;
    }(Array));
    //# sourceMappingURL=requestInclude.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestLimits = (function () {
        function RequestLimits(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestLimits;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestLocalization = (function () {
        function RequestLocalization(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestLocalization;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestPagination = (function () {
        function RequestPagination(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestPagination;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestPivot = (function () {
        function RequestPivot(input) {
            if (input) {
                Object.assign(this, input);
                if (input.pivots) {
                    this.pivots = input.pivots.map(function (item) {
                        return new RequestPivot(item);
                    });
                }
            }
        }
        return RequestPivot;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.RequestQuery = (function () {
        function RequestQuery(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestQuery;
    }());
    (function (RequestQuery) {
        RequestQuery.LanguageEnum = {
            Afts: 'afts',
            Lucene: 'lucene',
            Cmis: 'cmis'
        };
    })(exports.RequestQuery || (exports.RequestQuery = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestRange = (function () {
        function RequestRange(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestRange;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.RequestScope = (function () {
        function RequestScope(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestScope;
    }());
    (function (RequestScope) {
        RequestScope.LocationsEnum = {
            Nodes: 'nodes',
            Versions: 'versions',
            DeletedNodes: 'deleted-nodes'
        };
    })(exports.RequestScope || (exports.RequestScope = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestSortDefinition = (function (_super) {
        __extends(RequestSortDefinition, _super);
        function RequestSortDefinition(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return RequestSortDefinition;
    }(Array));
    //# sourceMappingURL=requestSortDefinition.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestSpellcheck = (function () {
        function RequestSpellcheck(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestSpellcheck;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestStats = (function () {
        function RequestStats(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestStats;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestTemplates = (function (_super) {
        __extends(RequestTemplates, _super);
        function RequestTemplates(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return RequestTemplates;
    }(Array));
    //# sourceMappingURL=requestTemplates.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SearchRequest = (function () {
        function SearchRequest(input) {
            if (input) {
                Object.assign(this, input);
                this.query = input.query ? new exports.RequestQuery(input.query) : undefined;
                this.paging = input.paging ? new RequestPagination(input.paging) : undefined;
                this.include = input.include ? new RequestInclude(input.include) : undefined;
                this.fields = input.fields ? new RequestFields(input.fields) : undefined;
                this.sort = input.sort ? new RequestSortDefinition(input.sort) : undefined;
                this.templates = input.templates ? new RequestTemplates(input.templates) : undefined;
                this.defaults = input.defaults ? new exports.RequestDefaults(input.defaults) : undefined;
                this.localization = input.localization ? new RequestLocalization(input.localization) : undefined;
                this.filterQueries = input.filterQueries ? new RequestFilterQueries(input.filterQueries) : undefined;
                this.facetQueries = input.facetQueries ? new RequestFacetQueries(input.facetQueries) : undefined;
                this.facetFields = input.facetFields ? new RequestFacetFields(input.facetFields) : undefined;
                this.facetIntervals = input.facetIntervals ? new RequestFacetIntervals(input.facetIntervals) : undefined;
                if (input.pivots) {
                    this.pivots = input.pivots.map(function (item) {
                        return new RequestPivot(item);
                    });
                }
                if (input.stats) {
                    this.stats = input.stats.map(function (item) {
                        return new RequestStats(item);
                    });
                }
                this.spellcheck = input.spellcheck ? new RequestSpellcheck(input.spellcheck) : undefined;
                this.scope = input.scope ? new exports.RequestScope(input.scope) : undefined;
                this.limits = input.limits ? new RequestLimits(input.limits) : undefined;
                this.highlight = input.highlight ? new RequestHighlight(input.highlight) : undefined;
                if (input.ranges) {
                    this.ranges = input.ranges.map(function (item) {
                        return new RequestRange(item);
                    });
                }
            }
        }
        return SearchRequest;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PathElement = (function () {
        function PathElement(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return PathElement;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PathInfo = (function () {
        function PathInfo(input) {
            if (input) {
                Object.assign(this, input);
                if (input.elements) {
                    this.elements = input.elements.map(function (item) {
                        return new PathElement(item);
                    });
                }
            }
        }
        return PathInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ContentInfo = (function () {
        function ContentInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ContentInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DateAlfresco = (function (_super) {
        __extends(DateAlfresco, _super);
        function DateAlfresco() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DateAlfresco.parseDate = function (dateToConvert) {
            if (dateToConvert instanceof Date) {
                return dateToConvert;
            }
            else if (typeof dateToConvert === 'number') {
                return new Date(dateToConvert);
            }
            var dateLength = 10;
            var separatorPos = dateToConvert.substring(dateLength).search(/[\+\-]/) + dateLength;
            var dateStr = separatorPos > dateLength ? dateToConvert.substring(0, separatorPos) : dateToConvert;
            var tzStr = separatorPos > dateLength ? dateToConvert.substring(separatorPos) : '';
            var parsedDate = this.parseDateTime(dateStr);
            var tzOffsetMins = this.parseDateTimeZone(tzStr);
            parsedDate.setTime(parsedDate.getTime() + tzOffsetMins * 60000);
            return parsedDate;
        };
        DateAlfresco.parseDateTime = function (dateToConvert) {
            var dateParts = dateToConvert.split(/[^0-9]/).map(function (s) {
                return parseInt(s, 10);
            });
            return new Date(Date.UTC(dateParts[0], dateParts[1] - 1 || 0, dateParts[2] || 1, dateParts[3] || 0, dateParts[4] || 0, dateParts[5] || 0, dateParts[6] || 0));
        };
        DateAlfresco.parseDateTimeZone = function (dateToConvert) {
            var match = /([\+\-])(\d{2}):?(\d{2})?/.exec(dateToConvert);
            if (match !== null) {
                return (parseInt(match[1] + '1', 10) * -1 * (parseInt(match[2], 10) * 60) + parseInt(match[3] || '0', 10));
            }
            else {
                return 0;
            }
        };
        return DateAlfresco;
    }(Date));
    //# sourceMappingURL=dateAlfresco.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.PermissionElement = (function () {
        function PermissionElement(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return PermissionElement;
    }());
    (function (PermissionElement) {
        PermissionElement.AccessStatusEnum = {
            ALLOWED: 'ALLOWED',
            DENIED: 'DENIED'
        };
    })(exports.PermissionElement || (exports.PermissionElement = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PermissionsInfo = (function () {
        function PermissionsInfo(input) {
            if (input) {
                Object.assign(this, input);
                if (input.inherited) {
                    this.inherited = input.inherited.map(function (item) {
                        return new exports.PermissionElement(item);
                    });
                }
                if (input.locallySet) {
                    this.locallySet = input.locallySet.map(function (item) {
                        return new exports.PermissionElement(item);
                    });
                }
            }
        }
        return PermissionsInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserInfo = (function () {
        function UserInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return UserInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Node = (function () {
        function Node(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.permissions = input.permissions ? new PermissionsInfo(input.permissions) : undefined;
            }
        }
        return Node;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeEntry = (function () {
        function NodeEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Node(input.entry) : undefined;
            }
        }
        return NodeEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeletedNode = (function () {
        function DeletedNode(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.permissions = input.permissions ? new PermissionsInfo(input.permissions) : undefined;
                this.archivedByUser = input.archivedByUser ? new UserInfo(input.archivedByUser) : undefined;
                this.archivedAt = input.archivedAt ? DateAlfresco.parseDate(input.archivedAt) : undefined;
            }
        }
        return DeletedNode;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeletedNodeEntry = (function () {
        function DeletedNodeEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new DeletedNode(input.entry) : undefined;
            }
        }
        return DeletedNodeEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.SiteBodyCreate = (function () {
        function SiteBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteBodyCreate;
    }());
    (function (SiteBodyCreate) {
        SiteBodyCreate.VisibilityEnum = {
            PUBLIC: 'PUBLIC',
            PRIVATE: 'PRIVATE',
            MODERATED: 'MODERATED'
        };
    })(exports.SiteBodyCreate || (exports.SiteBodyCreate = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Group = (function () {
        function Group(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Group;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupEntry = (function () {
        function GroupEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Group(input.entry) : undefined;
            }
        }
        return GroupEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Pagination = (function () {
        function Pagination(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Pagination;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupPagingList = (function () {
        function GroupPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new GroupEntry(item);
                    });
                }
            }
        }
        return GroupPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupPaging = (function () {
        function GroupPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new GroupPagingList(input.list) : undefined;
            }
        }
        return GroupPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.ProcessInstanceQueryRepresentation = (function () {
        function ProcessInstanceQueryRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ProcessInstanceQueryRepresentation;
    }());
    (function (ProcessInstanceQueryRepresentation) {
        ProcessInstanceQueryRepresentation.SortEnum = {
            CreatedDesc: 'created-desc',
            CreatedAsc: 'created-asc',
            EndedDesc: 'ended-desc',
            EndedAsc: 'ended-asc'
        };
        ProcessInstanceQueryRepresentation.StateEnum = {
            Running: 'running',
            Completed: 'completed',
            All: 'all'
        };
    })(exports.ProcessInstanceQueryRepresentation || (exports.ProcessInstanceQueryRepresentation = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.TaskQueryRequestRepresentation = (function () {
        function TaskQueryRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.dueAfter = input.dueAfter ? DateAlfresco.parseDate(input.dueAfter) : undefined;
                this.dueBefore = input.dueBefore ? DateAlfresco.parseDate(input.dueBefore) : undefined;
            }
        }
        return TaskQueryRepresentation;
    }());
    (function (TaskQueryRepresentation) {
        TaskQueryRepresentation.SortEnum = {
            CreatedDesc: 'created-desc',
            CreatedAsc: 'created-asc',
            DueDesc: 'due-desc',
            DueAsc: 'due-asc'
        };
        TaskQueryRepresentation.StateEnum = {
            Active: 'active',
            Completed: 'completed',
            All: 'all'
        };
    })(exports.TaskQueryRequestRepresentation || (exports.TaskQueryRequestRepresentation = {}));

    var d        = require('d')
      , callable = require('es5-ext/object/valid-callable')

      , apply = Function.prototype.apply, call = Function.prototype.call
      , create = Object.create, defineProperty = Object.defineProperty
      , defineProperties = Object.defineProperties
      , hasOwnProperty = Object.prototype.hasOwnProperty
      , descriptor = { configurable: true, enumerable: false, writable: true }

      , on, once, off, emit, methods, descriptors, base;

    on = function (type, listener) {
    	var data;

    	callable(listener);

    	if (!hasOwnProperty.call(this, '__ee__')) {
    		data = descriptor.value = create(null);
    		defineProperty(this, '__ee__', descriptor);
    		descriptor.value = null;
    	} else {
    		data = this.__ee__;
    	}
    	if (!data[type]) data[type] = listener;
    	else if (typeof data[type] === 'object') data[type].push(listener);
    	else data[type] = [data[type], listener];

    	return this;
    };

    once = function (type, listener) {
    	var once, self;

    	callable(listener);
    	self = this;
    	on.call(this, type, once = function () {
    		off.call(self, type, once);
    		apply.call(listener, this, arguments);
    	});

    	once.__eeOnceListener__ = listener;
    	return this;
    };

    off = function (type, listener) {
    	var data, listeners, candidate, i;

    	callable(listener);

    	if (!hasOwnProperty.call(this, '__ee__')) return this;
    	data = this.__ee__;
    	if (!data[type]) return this;
    	listeners = data[type];

    	if (typeof listeners === 'object') {
    		for (i = 0; (candidate = listeners[i]); ++i) {
    			if ((candidate === listener) ||
    					(candidate.__eeOnceListener__ === listener)) {
    				if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];
    				else listeners.splice(i, 1);
    			}
    		}
    	} else {
    		if ((listeners === listener) ||
    				(listeners.__eeOnceListener__ === listener)) {
    			delete data[type];
    		}
    	}

    	return this;
    };

    emit = function (type) {
    	var i, l, listener, listeners, args;

    	if (!hasOwnProperty.call(this, '__ee__')) return;
    	listeners = this.__ee__[type];
    	if (!listeners) return;

    	if (typeof listeners === 'object') {
    		l = arguments.length;
    		args = new Array(l - 1);
    		for (i = 1; i < l; ++i) args[i - 1] = arguments[i];

    		listeners = listeners.slice();
    		for (i = 0; (listener = listeners[i]); ++i) {
    			apply.call(listener, this, args);
    		}
    	} else {
    		switch (arguments.length) {
    		case 1:
    			call.call(listeners, this);
    			break;
    		case 2:
    			call.call(listeners, this, arguments[1]);
    			break;
    		case 3:
    			call.call(listeners, this, arguments[1], arguments[2]);
    			break;
    		default:
    			l = arguments.length;
    			args = new Array(l - 1);
    			for (i = 1; i < l; ++i) {
    				args[i - 1] = arguments[i];
    			}
    			apply.call(listeners, this, args);
    		}
    	}
    };

    methods = {
    	on: on,
    	once: once,
    	off: off,
    	emit: emit
    };

    descriptors = {
    	on: d(on),
    	once: d(once),
    	off: d(off),
    	emit: d(emit)
    };

    base = defineProperties({}, descriptors);

    module.exports = exports = function (o) {
    	return (o == null) ? create(base) : defineProperties(Object(o), descriptors);
    };
    exports.methods = methods;

    var EventEmitter = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    /**
     * Module dependencies.
     */
    // eslint-disable-next-line node/no-deprecated-api
    var _require = require('url'),
        parse = _require.parse,
        format = _require.format,
        resolve = _require.resolve;

    var Stream = require('stream');

    var https = require('https');

    var http = require('http');

    var fs = require('fs');

    var zlib = require('zlib');

    var util = require('util');

    var qs = require('qs');

    var mime = require('mime');

    var methods$1 = require('methods');

    var FormData = require('form-data');

    var formidable = require('formidable');

    var debug = require('debug')('superagent');

    var CookieJar = require('cookiejar');

    var semver = require('semver');

    var safeStringify = require('fast-safe-stringify');

    var utils = require('../utils');

    var RequestBase = require('../request-base');

    var _require2 = require('./unzip'),
        unzip = _require2.unzip;

    var Response = require('./response');

    var http2;
    if (semver.gte(process.version, 'v10.10.0')) http2 = require('./http2wrapper');

    function request(method, url) {
      // callback
      if (typeof url === 'function') {
        return new exports.Request('GET', method).end(url);
      } // url first


      if (arguments.length === 1) {
        return new exports.Request('GET', method);
      }

      return new exports.Request(method, url);
    }

    module.exports = request;
    exports = module.exports;
    /**
     * Expose `Request`.
     */

    exports.Request = Request;
    /**
     * Expose the agent function
     */

    exports.agent = require('./agent');
    /**
     * Noop.
     */

    function noop() {}
    /**
     * Expose `Response`.
     */


    exports.Response = Response;
    /**
     * Define "form" mime type.
     */

    mime.define({
      'application/x-www-form-urlencoded': ['form', 'urlencoded', 'form-data']
    }, true);
    /**
     * Protocol map.
     */

    exports.protocols = {
      'http:': http,
      'https:': https,
      'http2:': http2
    };
    /**
     * Default serialization map.
     *
     *     superagent.serialize['application/xml'] = function(obj){
     *       return 'generated xml here';
     *     };
     *
     */

    exports.serialize = {
      'application/x-www-form-urlencoded': qs.stringify,
      'application/json': safeStringify
    };
    /**
     * Default parsers.
     *
     *     superagent.parse['application/xml'] = function(res, fn){
     *       fn(null, res);
     *     };
     *
     */

    exports.parse = require('./parsers');
    /**
     * Default buffering map. Can be used to set certain
     * response types to buffer/not buffer.
     *
     *     superagent.buffer['application/xml'] = true;
     */

    exports.buffer = {};
    /**
     * Initialize internal header tracking properties on a request instance.
     *
     * @param {Object} req the instance
     * @api private
     */

    function _initHeaders(req) {
      req._header = {// coerces header names to lowercase
      };
      req.header = {// preserves header name case
      };
    }
    /**
     * Initialize a new `Request` with the given `method` and `url`.
     *
     * @param {String} method
     * @param {String|Object} url
     * @api public
     */


    function Request(method, url) {
      Stream.call(this);
      if (typeof url !== 'string') url = format(url);
      this._enableHttp2 = Boolean(process.env.HTTP2_TEST); // internal only

      this._agent = false;
      this._formData = null;
      this.method = method;
      this.url = url;

      _initHeaders(this);

      this.writable = true;
      this._redirects = 0;
      this.redirects(method === 'HEAD' ? 0 : 5);
      this.cookies = '';
      this.qs = {};
      this._query = [];
      this.qsRaw = this._query; // Unused, for backwards compatibility only

      this._redirectList = [];
      this._streamRequest = false;
      this.once('end', this.clearTimeout.bind(this));
    }
    /**
     * Inherit from `Stream` (which inherits from `EventEmitter`).
     * Mixin `RequestBase`.
     */


    util.inherits(Request, Stream); // eslint-disable-next-line new-cap

    RequestBase(Request.prototype);
    /**
     * Enable or Disable http2.
     *
     * Enable http2.
     *
     * ``` js
     * request.get('http://localhost/')
     *   .http2()
     *   .end(callback);
     *
     * request.get('http://localhost/')
     *   .http2(true)
     *   .end(callback);
     * ```
     *
     * Disable http2.
     *
     * ``` js
     * request = request.http2();
     * request.get('http://localhost/')
     *   .http2(false)
     *   .end(callback);
     * ```
     *
     * @param {Boolean} enable
     * @return {Request} for chaining
     * @api public
     */

    Request.prototype.http2 = function (bool) {
      if (exports.protocols['http2:'] === undefined) {
        throw new Error('superagent: this version of Node.js does not support http2');
      }

      this._enableHttp2 = bool === undefined ? true : bool;
      return this;
    };
    /**
     * Queue the given `file` as an attachment to the specified `field`,
     * with optional `options` (or filename).
     *
     * ``` js
     * request.post('http://localhost/upload')
     *   .attach('field', Buffer.from('<b>Hello world</b>'), 'hello.html')
     *   .end(callback);
     * ```
     *
     * A filename may also be used:
     *
     * ``` js
     * request.post('http://localhost/upload')
     *   .attach('files', 'image.jpg')
     *   .end(callback);
     * ```
     *
     * @param {String} field
     * @param {String|fs.ReadStream|Buffer} file
     * @param {String|Object} options
     * @return {Request} for chaining
     * @api public
     */


    Request.prototype.attach = function (field, file, options) {
      if (file) {
        if (this._data) {
          throw new Error("superagent can't mix .send() and .attach()");
        }

        var o = options || {};

        if (typeof options === 'string') {
          o = {
            filename: options
          };
        }

        if (typeof file === 'string') {
          if (!o.filename) o.filename = file;
          debug('creating `fs.ReadStream` instance for file: %s', file);
          file = fs.createReadStream(file);
        } else if (!o.filename && file.path) {
          o.filename = file.path;
        }

        this._getFormData().append(field, file, o);
      }

      return this;
    };

    Request.prototype._getFormData = function () {
      var _this = this;

      if (!this._formData) {
        this._formData = new FormData();

        this._formData.on('error', function (err) {
          debug('FormData error', err);

          if (_this.called) {
            // The request has already finished and the callback was called.
            // Silently ignore the error.
            return;
          }

          _this.callback(err);

          _this.abort();
        });
      }

      return this._formData;
    };
    /**
     * Gets/sets the `Agent` to use for this HTTP request. The default (if this
     * function is not called) is to opt out of connection pooling (`agent: false`).
     *
     * @param {http.Agent} agent
     * @return {http.Agent}
     * @api public
     */


    Request.prototype.agent = function (agent) {
      if (arguments.length === 0) return this._agent;
      this._agent = agent;
      return this;
    };
    /**
     * Set _Content-Type_ response header passed through `mime.getType()`.
     *
     * Examples:
     *
     *      request.post('/')
     *        .type('xml')
     *        .send(xmlstring)
     *        .end(callback);
     *
     *      request.post('/')
     *        .type('json')
     *        .send(jsonstring)
     *        .end(callback);
     *
     *      request.post('/')
     *        .type('application/json')
     *        .send(jsonstring)
     *        .end(callback);
     *
     * @param {String} type
     * @return {Request} for chaining
     * @api public
     */


    Request.prototype.type = function (type) {
      return this.set('Content-Type', type.includes('/') ? type : mime.getType(type));
    };
    /**
     * Set _Accept_ response header passed through `mime.getType()`.
     *
     * Examples:
     *
     *      superagent.types.json = 'application/json';
     *
     *      request.get('/agent')
     *        .accept('json')
     *        .end(callback);
     *
     *      request.get('/agent')
     *        .accept('application/json')
     *        .end(callback);
     *
     * @param {String} accept
     * @return {Request} for chaining
     * @api public
     */


    Request.prototype.accept = function (type) {
      return this.set('Accept', type.includes('/') ? type : mime.getType(type));
    };
    /**
     * Add query-string `val`.
     *
     * Examples:
     *
     *   request.get('/shoes')
     *     .query('size=10')
     *     .query({ color: 'blue' })
     *
     * @param {Object|String} val
     * @return {Request} for chaining
     * @api public
     */


    Request.prototype.query = function (val) {
      if (typeof val === 'string') {
        this._query.push(val);
      } else {
        Object.assign(this.qs, val);
      }

      return this;
    };
    /**
     * Write raw `data` / `encoding` to the socket.
     *
     * @param {Buffer|String} data
     * @param {String} encoding
     * @return {Boolean}
     * @api public
     */


    Request.prototype.write = function (data, encoding) {
      var req = this.request();

      if (!this._streamRequest) {
        this._streamRequest = true;
      }

      return req.write(data, encoding);
    };
    /**
     * Pipe the request body to `stream`.
     *
     * @param {Stream} stream
     * @param {Object} options
     * @return {Stream}
     * @api public
     */


    Request.prototype.pipe = function (stream, options) {
      this.piped = true; // HACK...

      this.buffer(false);
      this.end();
      return this._pipeContinue(stream, options);
    };

    Request.prototype._pipeContinue = function (stream, options) {
      var _this2 = this;

      this.req.once('response', function (res) {
        // redirect
        if (isRedirect(res.statusCode) && _this2._redirects++ !== _this2._maxRedirects) {
          return _this2._redirect(res) === _this2 ? _this2._pipeContinue(stream, options) : undefined;
        }

        _this2.res = res;

        _this2._emitResponse();

        if (_this2._aborted) return;

        if (_this2._shouldUnzip(res)) {
          var unzipObj = zlib.createUnzip();
          unzipObj.on('error', function (err) {
            if (err && err.code === 'Z_BUF_ERROR') {
              // unexpected end of file is ignored by browsers and curl
              stream.emit('end');
              return;
            }

            stream.emit('error', err);
          });
          res.pipe(unzipObj).pipe(stream, options);
        } else {
          res.pipe(stream, options);
        }

        res.once('end', function () {
          _this2.emit('end');
        });
      });
      return stream;
    };
    /**
     * Enable / disable buffering.
     *
     * @return {Boolean} [val]
     * @return {Request} for chaining
     * @api public
     */


    Request.prototype.buffer = function (val) {
      this._buffer = val !== false;
      return this;
    };
    /**
     * Redirect to `url
     *
     * @param {IncomingMessage} res
     * @return {Request} for chaining
     * @api private
     */


    Request.prototype._redirect = function (res) {
      var url = res.headers.location;

      if (!url) {
        return this.callback(new Error('No location header for redirect'), res);
      }

      debug('redirect %s -> %s', this.url, url); // location

      url = resolve(this.url, url); // ensure the response is being consumed
      // this is required for Node v0.10+

      res.resume();
      var headers = this.req.getHeaders ? this.req.getHeaders() : this.req._headers;
      var changesOrigin = parse(url).host !== parse(this.url).host; // implementation of 302 following defacto standard

      if (res.statusCode === 301 || res.statusCode === 302) {
        // strip Content-* related fields
        // in case of POST etc
        headers = utils.cleanHeader(headers, changesOrigin); // force GET

        this.method = this.method === 'HEAD' ? 'HEAD' : 'GET'; // clear data

        this._data = null;
      } // 303 is always GET


      if (res.statusCode === 303) {
        // strip Content-* related fields
        // in case of POST etc
        headers = utils.cleanHeader(headers, changesOrigin); // force method

        this.method = 'GET'; // clear data

        this._data = null;
      } // 307 preserves method
      // 308 preserves method


      delete headers.host;
      delete this.req;
      delete this._formData; // remove all add header except User-Agent

      _initHeaders(this); // redirect


      this._endCalled = false;
      this.url = url;
      this.qs = {};
      this._query.length = 0;
      this.set(headers);
      this.emit('redirect', res);

      this._redirectList.push(this.url);

      this.end(this._callback);
      return this;
    };
    /**
     * Set Authorization field value with `user` and `pass`.
     *
     * Examples:
     *
     *   .auth('tobi', 'learnboost')
     *   .auth('tobi:learnboost')
     *   .auth('tobi')
     *   .auth(accessToken, { type: 'bearer' })
     *
     * @param {String} user
     * @param {String} [pass]
     * @param {Object} [options] options with authorization type 'basic' or 'bearer' ('basic' is default)
     * @return {Request} for chaining
     * @api public
     */


    Request.prototype.auth = function (user, pass, options) {
      if (arguments.length === 1) pass = '';

      if (_typeof(pass) === 'object' && pass !== null) {
        // pass is optional and can be replaced with options
        options = pass;
        pass = '';
      }

      if (!options) {
        options = {
          type: 'basic'
        };
      }

      var encoder = function encoder(string) {
        return Buffer.from(string).toString('base64');
      };

      return this._auth(user, pass, options, encoder);
    };
    /**
     * Set the certificate authority option for https request.
     *
     * @param {Buffer | Array} cert
     * @return {Request} for chaining
     * @api public
     */


    Request.prototype.ca = function (cert) {
      this._ca = cert;
      return this;
    };
    /**
     * Set the client certificate key option for https request.
     *
     * @param {Buffer | String} cert
     * @return {Request} for chaining
     * @api public
     */


    Request.prototype.key = function (cert) {
      this._key = cert;
      return this;
    };
    /**
     * Set the key, certificate, and CA certs of the client in PFX or PKCS12 format.
     *
     * @param {Buffer | String} cert
     * @return {Request} for chaining
     * @api public
     */


    Request.prototype.pfx = function (cert) {
      if (_typeof(cert) === 'object' && !Buffer.isBuffer(cert)) {
        this._pfx = cert.pfx;
        this._passphrase = cert.passphrase;
      } else {
        this._pfx = cert;
      }

      return this;
    };
    /**
     * Set the client certificate option for https request.
     *
     * @param {Buffer | String} cert
     * @return {Request} for chaining
     * @api public
     */


    Request.prototype.cert = function (cert) {
      this._cert = cert;
      return this;
    };
    /**
     * Do not reject expired or invalid TLS certs.
     * sets `rejectUnauthorized=true`. Be warned that this allows MITM attacks.
     *
     * @return {Request} for chaining
     * @api public
     */


    Request.prototype.disableTLSCerts = function () {
      this._disableTLSCerts = true;
      return this;
    };
    /**
     * Return an http[s] request.
     *
     * @return {OutgoingMessage}
     * @api private
     */
    // eslint-disable-next-line complexity


    Request.prototype.request = function () {
      var _this3 = this;

      if (this.req) return this.req;
      var options = {};

      try {
        var query = qs.stringify(this.qs, {
          indices: false,
          strictNullHandling: true
        });

        if (query) {
          this.qs = {};

          this._query.push(query);
        }

        this._finalizeQueryString();
      } catch (err) {
        return this.emit('error', err);
      }

      var url = this.url;
      var retries = this._retries; // Capture backticks as-is from the final query string built above.
      // Note: this'll only find backticks entered in req.query(String)
      // calls, because qs.stringify unconditionally encodes backticks.

      var queryStringBackticks;

      if (url.includes('`')) {
        var queryStartIndex = url.indexOf('?');

        if (queryStartIndex !== -1) {
          var queryString = url.slice(queryStartIndex + 1);
          queryStringBackticks = queryString.match(/`|%60/g);
        }
      } // default to http://


      if (url.indexOf('http') !== 0) url = "http://".concat(url);
      url = parse(url); // See https://github.com/visionmedia/superagent/issues/1367

      if (queryStringBackticks) {
        var i = 0;
        url.query = url.query.replace(/%60/g, function () {
          return queryStringBackticks[i++];
        });
        url.search = "?".concat(url.query);
        url.path = url.pathname + url.search;
      } // support unix sockets


      if (/^https?\+unix:/.test(url.protocol) === true) {
        // get the protocol
        url.protocol = "".concat(url.protocol.split('+')[0], ":"); // get the socket, path

        var unixParts = url.path.match(/^([^/]+)(.+)$/);
        options.socketPath = unixParts[1].replace(/%2F/g, '/');
        url.path = unixParts[2];
      } // Override IP address of a hostname


      if (this._connectOverride) {
        var _url = url,
            hostname = _url.hostname;
        var match = hostname in this._connectOverride ? this._connectOverride[hostname] : this._connectOverride['*'];

        if (match) {
          // backup the real host
          if (!this._header.host) {
            this.set('host', url.host);
          } // wrap [ipv6]


          url.host = /:/.test(match) ? "[".concat(match, "]") : match;

          if (url.port) {
            url.host += ":".concat(url.port);
          }

          url.hostname = match;
        }
      } // options


      options.method = this.method;
      options.port = url.port;
      options.path = url.path;
      options.host = url.hostname;
      options.ca = this._ca;
      options.key = this._key;
      options.pfx = this._pfx;
      options.cert = this._cert;
      options.passphrase = this._passphrase;
      options.agent = this._agent;
      options.rejectUnauthorized = typeof this._disableTLSCerts === 'boolean' ? !this._disableTLSCerts : process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0'; // Allows request.get('https://1.2.3.4/').set('Host', 'example.com')

      if (this._header.host) {
        options.servername = this._header.host.replace(/:\d+$/, '');
      }

      if (this._trustLocalhost && /^(?:localhost|127\.0\.0\.\d+|(0*:)+:0*1)$/.test(url.hostname)) {
        options.rejectUnauthorized = false;
      } // initiate request


      var mod = this._enableHttp2 ? exports.protocols['http2:'].setProtocol(url.protocol) : exports.protocols[url.protocol]; // request

      this.req = mod.request(options);
      var req = this.req; // set tcp no delay

      req.setNoDelay(true);

      if (options.method !== 'HEAD') {
        req.setHeader('Accept-Encoding', 'gzip, deflate');
      }

      this.protocol = url.protocol;
      this.host = url.host; // expose events

      req.once('drain', function () {
        _this3.emit('drain');
      });
      req.on('error', function (err) {
        // flag abortion here for out timeouts
        // because node will emit a faux-error "socket hang up"
        // when request is aborted before a connection is made
        if (_this3._aborted) return; // if not the same, we are in the **old** (cancelled) request,
        // so need to continue (same as for above)

        if (_this3._retries !== retries) return; // if we've received a response then we don't want to let
        // an error in the request blow up the response

        if (_this3.response) return;

        _this3.callback(err);
      }); // auth

      if (url.auth) {
        var auth = url.auth.split(':');
        this.auth(auth[0], auth[1]);
      }

      if (this.username && this.password) {
        this.auth(this.username, this.password);
      }

      for (var key in this.header) {
        if (Object.prototype.hasOwnProperty.call(this.header, key)) req.setHeader(key, this.header[key]);
      } // add cookies


      if (this.cookies) {
        if (Object.prototype.hasOwnProperty.call(this._header, 'cookie')) {
          // merge
          var tmpJar = new CookieJar.CookieJar();
          tmpJar.setCookies(this._header.cookie.split(';'));
          tmpJar.setCookies(this.cookies.split(';'));
          req.setHeader('Cookie', tmpJar.getCookies(CookieJar.CookieAccessInfo.All).toValueString());
        } else {
          req.setHeader('Cookie', this.cookies);
        }
      }

      return req;
    };
    /**
     * Invoke the callback with `err` and `res`
     * and handle arity check.
     *
     * @param {Error} err
     * @param {Response} res
     * @api private
     */


    Request.prototype.callback = function (err, res) {
      if (this._shouldRetry(err, res)) {
        return this._retry();
      } // Avoid the error which is emitted from 'socket hang up' to cause the fn undefined error on JS runtime.


      var fn = this._callback || noop;
      this.clearTimeout();
      if (this.called) return console.warn('superagent: double callback bug');
      this.called = true;

      if (!err) {
        try {
          if (!this._isResponseOK(res)) {
            var msg = 'Unsuccessful HTTP response';

            if (res) {
              msg = http.STATUS_CODES[res.status] || msg;
            }

            err = new Error(msg);
            err.status = res ? res.status : undefined;
          }
        } catch (err_) {
          err = err_;
        }
      } // It's important that the callback is called outside try/catch
      // to avoid double callback


      if (!err) {
        return fn(null, res);
      }

      err.response = res;
      if (this._maxRetries) err.retries = this._retries - 1; // only emit error event if there is a listener
      // otherwise we assume the callback to `.end()` will get the error

      if (err && this.listeners('error').length > 0) {
        this.emit('error', err);
      }

      fn(err, res);
    };
    /**
     * Check if `obj` is a host object,
     *
     * @param {Object} obj host object
     * @return {Boolean} is a host object
     * @api private
     */


    Request.prototype._isHost = function (obj) {
      return Buffer.isBuffer(obj) || obj instanceof Stream || obj instanceof FormData;
    };
    /**
     * Initiate request, invoking callback `fn(err, res)`
     * with an instanceof `Response`.
     *
     * @param {Function} fn
     * @return {Request} for chaining
     * @api public
     */


    Request.prototype._emitResponse = function (body, files) {
      var response = new Response(this);
      this.response = response;
      response.redirects = this._redirectList;

      if (undefined !== body) {
        response.body = body;
      }

      response.files = files;

      if (this._endCalled) {
        response.pipe = function () {
          throw new Error("end() has already been called, so it's too late to start piping");
        };
      }

      this.emit('response', response);
      return response;
    };

    Request.prototype.end = function (fn) {
      this.request();
      debug('%s %s', this.method, this.url);

      if (this._endCalled) {
        throw new Error('.end() was called twice. This is not supported in superagent');
      }

      this._endCalled = true; // store callback

      this._callback = fn || noop;

      this._end();
    };

    Request.prototype._end = function () {
      var _this4 = this;

      if (this._aborted) return this.callback(new Error('The request has been aborted even before .end() was called'));
      var data = this._data;
      var req = this.req;
      var method = this.method;

      this._setTimeouts(); // body


      if (method !== 'HEAD' && !req._headerSent) {
        // serialize stuff
        if (typeof data !== 'string') {
          var contentType = req.getHeader('Content-Type'); // Parse out just the content type from the header (ignore the charset)

          if (contentType) contentType = contentType.split(';')[0];
          var serialize = this._serializer || exports.serialize[contentType];

          if (!serialize && isJSON(contentType)) {
            serialize = exports.serialize['application/json'];
          }

          if (serialize) data = serialize(data);
        } // content-length


        if (data && !req.getHeader('Content-Length')) {
          req.setHeader('Content-Length', Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data));
        }
      } // response
      // eslint-disable-next-line complexity


      req.once('response', function (res) {
        debug('%s %s -> %s', _this4.method, _this4.url, res.statusCode);

        if (_this4._responseTimeoutTimer) {
          clearTimeout(_this4._responseTimeoutTimer);
        }

        if (_this4.piped) {
          return;
        }

        var max = _this4._maxRedirects;
        var mime = utils.type(res.headers['content-type'] || '') || 'text/plain';
        var type = mime.split('/')[0];
        var multipart = type === 'multipart';
        var redirect = isRedirect(res.statusCode);
        var responseType = _this4._responseType;
        _this4.res = res; // redirect

        if (redirect && _this4._redirects++ !== max) {
          return _this4._redirect(res);
        }

        if (_this4.method === 'HEAD') {
          _this4.emit('end');

          _this4.callback(null, _this4._emitResponse());

          return;
        } // zlib support


        if (_this4._shouldUnzip(res)) {
          unzip(req, res);
        }

        var buffer = _this4._buffer;

        if (buffer === undefined && mime in exports.buffer) {
          buffer = Boolean(exports.buffer[mime]);
        }

        var parser = _this4._parser;

        if (undefined === buffer) {
          if (parser) {
            console.warn("A custom superagent parser has been set, but buffering strategy for the parser hasn't been configured. Call `req.buffer(true or false)` or set `superagent.buffer[mime] = true or false`");
            buffer = true;
          }
        }

        if (!parser) {
          if (responseType) {
            parser = exports.parse.image; // It's actually a generic Buffer

            buffer = true;
          } else if (multipart) {
            var form = new formidable.IncomingForm();
            parser = form.parse.bind(form);
            buffer = true;
          } else if (isImageOrVideo(mime)) {
            parser = exports.parse.image;
            buffer = true; // For backwards-compatibility buffering default is ad-hoc MIME-dependent
          } else if (exports.parse[mime]) {
            parser = exports.parse[mime];
          } else if (type === 'text') {
            parser = exports.parse.text;
            buffer = buffer !== false; // everyone wants their own white-labeled json
          } else if (isJSON(mime)) {
            parser = exports.parse['application/json'];
            buffer = buffer !== false;
          } else if (buffer) {
            parser = exports.parse.text;
          } else if (undefined === buffer) {
            parser = exports.parse.image; // It's actually a generic Buffer

            buffer = true;
          }
        } // by default only buffer text/*, json and messed up thing from hell


        if (undefined === buffer && isText(mime) || isJSON(mime)) {
          buffer = true;
        }

        _this4._resBuffered = buffer;
        var parserHandlesEnd = false;

        if (buffer) {
          // Protectiona against zip bombs and other nuisance
          var responseBytesLeft = _this4._maxResponseSize || 200000000;
          res.on('data', function (buf) {
            responseBytesLeft -= buf.byteLength || buf.length;

            if (responseBytesLeft < 0) {
              // This will propagate through error event
              var err = new Error('Maximum response size reached');
              err.code = 'ETOOLARGE'; // Parsers aren't required to observe error event,
              // so would incorrectly report success

              parserHandlesEnd = false; // Will emit error event

              res.destroy(err);
            }
          });
        }

        if (parser) {
          try {
            // Unbuffered parsers are supposed to emit response early,
            // which is weird BTW, because response.body won't be there.
            parserHandlesEnd = buffer;
            parser(res, function (err, obj, files) {
              if (_this4.timedout) {
                // Timeout has already handled all callbacks
                return;
              } // Intentional (non-timeout) abort is supposed to preserve partial response,
              // even if it doesn't parse.


              if (err && !_this4._aborted) {
                return _this4.callback(err);
              }

              if (parserHandlesEnd) {
                _this4.emit('end');

                _this4.callback(null, _this4._emitResponse(obj, files));
              }
            });
          } catch (err) {
            _this4.callback(err);

            return;
          }
        }

        _this4.res = res; // unbuffered

        if (!buffer) {
          debug('unbuffered %s %s', _this4.method, _this4.url);

          _this4.callback(null, _this4._emitResponse());

          if (multipart) return; // allow multipart to handle end event

          res.once('end', function () {
            debug('end %s %s', _this4.method, _this4.url);

            _this4.emit('end');
          });
          return;
        } // terminating events


        res.once('error', function (err) {
          parserHandlesEnd = false;

          _this4.callback(err, null);
        });
        if (!parserHandlesEnd) res.once('end', function () {
          debug('end %s %s', _this4.method, _this4.url); // TODO: unless buffering emit earlier to stream

          _this4.emit('end');

          _this4.callback(null, _this4._emitResponse());
        });
      });
      this.emit('request', this);

      var getProgressMonitor = function getProgressMonitor() {
        var lengthComputable = true;
        var total = req.getHeader('Content-Length');
        var loaded = 0;
        var progress = new Stream.Transform();

        progress._transform = function (chunk, encoding, cb) {
          loaded += chunk.length;

          _this4.emit('progress', {
            direction: 'upload',
            lengthComputable: lengthComputable,
            loaded: loaded,
            total: total
          });

          cb(null, chunk);
        };

        return progress;
      };

      var bufferToChunks = function bufferToChunks(buffer) {
        var chunkSize = 16 * 1024; // default highWaterMark value

        var chunking = new Stream.Readable();
        var totalLength = buffer.length;
        var remainder = totalLength % chunkSize;
        var cutoff = totalLength - remainder;

        for (var i = 0; i < cutoff; i += chunkSize) {
          var chunk = buffer.slice(i, i + chunkSize);
          chunking.push(chunk);
        }

        if (remainder > 0) {
          var remainderBuffer = buffer.slice(-remainder);
          chunking.push(remainderBuffer);
        }

        chunking.push(null); // no more data

        return chunking;
      }; // if a FormData instance got created, then we send that as the request body


      var formData = this._formData;

      if (formData) {
        // set headers
        var headers = formData.getHeaders();

        for (var i in headers) {
          if (Object.prototype.hasOwnProperty.call(headers, i)) {
            debug('setting FormData header: "%s: %s"', i, headers[i]);
            req.setHeader(i, headers[i]);
          }
        } // attempt to get "Content-Length" header
        // eslint-disable-next-line handle-callback-err


        formData.getLength(function (err, length) {
          // TODO: Add chunked encoding when no length (if err)
          debug('got FormData Content-Length: %s', length);

          if (typeof length === 'number') {
            req.setHeader('Content-Length', length);
          }

          formData.pipe(getProgressMonitor()).pipe(req);
        });
      } else if (Buffer.isBuffer(data)) {
        bufferToChunks(data).pipe(getProgressMonitor()).pipe(req);
      } else {
        req.end(data);
      }
    }; // Check whether response has a non-0-sized gzip-encoded body


    Request.prototype._shouldUnzip = function (res) {
      if (res.statusCode === 204 || res.statusCode === 304) {
        // These aren't supposed to have any body
        return false;
      } // header content is a string, and distinction between 0 and no information is crucial


      if (res.headers['content-length'] === '0') {
        // We know that the body is empty (unfortunately, this check does not cover chunked encoding)
        return false;
      } // console.log(res);


      return /^\s*(?:deflate|gzip)\s*$/.test(res.headers['content-encoding']);
    };
    /**
     * Overrides DNS for selected hostnames. Takes object mapping hostnames to IP addresses.
     *
     * When making a request to a URL with a hostname exactly matching a key in the object,
     * use the given IP address to connect, instead of using DNS to resolve the hostname.
     *
     * A special host `*` matches every hostname (keep redirects in mind!)
     *
     *      request.connect({
     *        'test.example.com': '127.0.0.1',
     *        'ipv6.example.com': '::1',
     *      })
     */


    Request.prototype.connect = function (connectOverride) {
      if (typeof connectOverride === 'string') {
        this._connectOverride = {
          '*': connectOverride
        };
      } else if (_typeof(connectOverride) === 'object') {
        this._connectOverride = connectOverride;
      } else {
        this._connectOverride = undefined;
      }

      return this;
    };

    Request.prototype.trustLocalhost = function (toggle) {
      this._trustLocalhost = toggle === undefined ? true : toggle;
      return this;
    }; // generate HTTP verb methods


    if (!methods$1.includes('del')) {
      // create a copy so we don't cause conflicts with
      // other packages using the methods package and
      // npm 3.x
      methods$1 = methods$1.slice(0);
      methods$1.push('del');
    }

    methods$1.forEach(function (method) {
      var name = method;
      method = method === 'del' ? 'delete' : method;
      method = method.toUpperCase();

      request[name] = function (url, data, fn) {
        var req = request(method, url);

        if (typeof data === 'function') {
          fn = data;
          data = null;
        }

        if (data) {
          if (method === 'GET' || method === 'HEAD') {
            req.query(data);
          } else {
            req.send(data);
          }
        }

        if (fn) req.end(fn);
        return req;
      };
    });
    /**
     * Check if `mime` is text and should be buffered.
     *
     * @param {String} mime
     * @return {Boolean}
     * @api public
     */

    function isText(mime) {
      var parts = mime.split('/');
      var type = parts[0];
      var subtype = parts[1];
      return type === 'text' || subtype === 'x-www-form-urlencoded';
    }

    function isImageOrVideo(mime) {
      var type = mime.split('/')[0];
      return type === 'image' || type === 'video';
    }
    /**
     * Check if `mime` is json or has +json structured syntax suffix.
     *
     * @param {String} mime
     * @return {Boolean}
     * @api private
     */


    function isJSON(mime) {
      // should match /json or +json
      // but not /json-seq
      return /[/+]json($|[^-\w])/.test(mime);
    }
    /**
     * Check if we should follow the redirect `code`.
     *
     * @param {Number} code
     * @return {Boolean}
     * @api private
     */


    function isRedirect(code) {
      return [301, 302, 303, 305, 307, 308].includes(code);
    }

    var superagent_ = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EventEmitter$1 = EventEmitter;
    var superagent = superagent_;
    var process$1 = {};
    function paramToString(param) {
        if (param === undefined || param === null) {
            return '';
        }
        if (param instanceof Date) {
            return param.toJSON();
        }
        return param.toString();
    }
    function buildCollectionParam(param, collectionFormat) {
        if (!param) {
            return null;
        }
        switch (collectionFormat) {
            case 'csv':
                return param.map(paramToString).join(',');
            case 'ssv':
                return param.map(paramToString).join(' ');
            case 'tsv':
                return param.map(paramToString).join('\t');
            case 'pipes':
                return param.map(paramToString).join('|');
            case 'multi':
                return param.map(paramToString);
            default:
                throw new Error('Unknown collection format: ' + collectionFormat);
        }
    }
    var AlfrescoApiClient = (function () {
        function AlfrescoApiClient(host) {
            this.basePath = '';
            this.authentications = {
                basicAuth: {
                    ticket: ''
                },
                type: 'basic'
            };
            this.defaultHeaders = {};
            this.timeout = undefined;
            this.contentTypes = {
                JSON: ['application/json']
            };
            this.host = host;
            EventEmitter$1(this);
        }
        AlfrescoApiClient.prototype.buildUrl = function (path, pathParams) {
            if (!path.match(/^\//)) {
                path = '/' + path;
            }
            var url = this.basePath + path;
            url = url.replace(/\{([\w-]+)\}/g, function (fullMatch, key) {
                var value;
                if (pathParams.hasOwnProperty(key)) {
                    value = paramToString(pathParams[key]);
                }
                else {
                    value = fullMatch;
                }
                return encodeURIComponent(value);
            });
            return url;
        };
        AlfrescoApiClient.prototype.isJsonMime = function (contentType) {
            return Boolean(contentType !== null && contentType.match(/^application\/json(;.*)?$/i));
        };
        AlfrescoApiClient.prototype.jsonPreferredMime = function (contentTypes) {
            for (var i = 0; i < contentTypes.length; i++) {
                if (this.isJsonMime(contentTypes[i])) {
                    return contentTypes[i];
                }
            }
            return contentTypes[0];
        };
        AlfrescoApiClient.prototype.isFileParam = function (param) {
            if (typeof Buffer === 'function' && (param instanceof Buffer || param.path)) {
                return true;
            }
            if (typeof Blob === 'function' && param instanceof Blob) {
                return true;
            }
            if (typeof File === 'function' && param instanceof File) {
                return true;
            }
            if (typeof File === 'object' && param instanceof File) {
                return true;
            }
            return false;
        };
        AlfrescoApiClient.prototype.normalizeParams = function (params) {
            var newParams = {};
            for (var key in params) {
                if (params.hasOwnProperty(key) && params[key] !== undefined && params[key] !== null) {
                    var value = params[key];
                    if (this.isFileParam(value) || Array.isArray(value)) {
                        newParams[key] = value;
                    }
                    else {
                        newParams[key] = paramToString(value);
                    }
                }
            }
            return newParams;
        };
        AlfrescoApiClient.prototype.isWithCredentials = function () {
            if (this.config) {
                return this.config.withCredentials;
            }
            else {
                return false;
            }
        };
        AlfrescoApiClient.prototype.applyAuthToRequest = function (request) {
            if (this.authentications) {
                switch (this.authentications.type) {
                    case 'basic':
                        var basicAuth = this.authentications.basicAuth;
                        if (basicAuth.username || basicAuth.password) {
                            request.auth(basicAuth.username ? encodeURI(basicAuth.username) : '', basicAuth.password ? encodeURI(basicAuth.password) : '');
                        }
                        break;
                    case 'activiti':
                        if (this.authentications.basicAuth.ticket) {
                            request.set({ 'Authorization': this.authentications.basicAuth.ticket });
                        }
                        break;
                    case 'oauth2':
                        var oauth2 = this.authentications.oauth2;
                        if (oauth2.accessToken) {
                            request.set({ 'Authorization': 'Bearer ' + oauth2.accessToken });
                        }
                        break;
                    default:
                        throw new Error('Unknown authentication type: ' + this.authentications.type);
                }
            }
        };
        AlfrescoApiClient.prototype.deserialize = function (response, returnType) {
            if (response === null) {
                return null;
            }
            var data = response.body;
            if (data === null) {
                data = response.text;
            }
            if (returnType) {
                if (returnType === 'blob') {
                    data = new Blob([data], { type: response.header['content-type'] });
                }
                else if (Array.isArray(data)) {
                    data = data.map(function (element) {
                        return new returnType(element);
                    });
                }
                else {
                    data = new returnType(data);
                }
            }
            return data;
        };
        AlfrescoApiClient.prototype.basicAuth = function (username, password) {
            var str = username + ':' + password;
            var base64;
            if (typeof Buffer === 'function') {
                base64 = Buffer.from(str.toString(), 'binary').toString('base64');
            }
            else {
                base64 = btoa(str);
            }
            return 'Basic ' + base64;
        };
        AlfrescoApiClient.prototype.callApi = function (path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, returnType, contextRoot, responseType) {
            var url;
            if (contextRoot) {
                var basePath = this.host + "/" + contextRoot;
                url = this.buildUrlCustomBasePath(basePath, path, pathParams);
            }
            else {
                url = this.buildUrl(path, pathParams);
            }
            return this.callHostApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, returnType, contextRoot, responseType, url);
        };
        AlfrescoApiClient.prototype.request = function (options) {
            return this.callApi(options.path, options.httpMethod, options.pathParams, options.queryParams, options.headerParams, options.formParams, options.bodyParam, options.contentTypes, options.accepts, options.returnType, options.contextRoot, options.responseType);
        };
        AlfrescoApiClient.prototype.post = function (options) {
            return this.request(__assign(__assign({}, options), { httpMethod: 'POST', contentTypes: options.contentTypes || this.contentTypes.JSON, accepts: options.accepts || this.contentTypes.JSON }));
        };
        AlfrescoApiClient.prototype.put = function (options) {
            return this.request(__assign(__assign({}, options), { httpMethod: 'PUT', contentTypes: options.contentTypes || this.contentTypes.JSON, accepts: options.accepts || this.contentTypes.JSON }));
        };
        AlfrescoApiClient.prototype.get = function (options) {
            return this.request(__assign(__assign({}, options), { httpMethod: 'GET', contentTypes: options.contentTypes || this.contentTypes.JSON, accepts: options.accepts || this.contentTypes.JSON }));
        };
        AlfrescoApiClient.prototype.delete = function (options) {
            return this.request(__assign(__assign({}, options), { httpMethod: 'DELETE', contentTypes: options.contentTypes || this.contentTypes.JSON, accepts: options.accepts || this.contentTypes.JSON }));
        };
        AlfrescoApiClient.prototype.callCustomApi = function (path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, returnType, contextRoot, responseType) {
            var url = this.buildUrlCustomBasePath(path, '', pathParams);
            return this.callHostApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, returnType, contextRoot, responseType, url);
        };
        AlfrescoApiClient.prototype.callHostApi = function (path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, returnType, contextRoot, responseType, url) {
            var _this = this;
            var eventEmitter = EventEmitter$1({});
            var request = this.buildRequest(httpMethod, url, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, responseType, eventEmitter, returnType);
            if (returnType === 'Binary') {
                request = request.buffer(true).parse(superagent.parse['application/octet-stream']);
            }
            var promise = new Promise(function (resolve, reject) {
                request.on('abort', function () {
                    eventEmitter.emit('abort');
                });
                request.end(function (error, response) {
                    if (error) {
                        _this.emit('error', error);
                        eventEmitter.emit('error', error);
                        if (error.status === 401) {
                            _this.emit('unauthorized');
                            eventEmitter.emit('unauthorized');
                        }
                        if (response && response.text) {
                            error = error || {};
                            reject(Object.assign(error, { message: response.text }));
                        }
                        else {
                            reject({ error: error });
                        }
                    }
                    else {
                        if (_this.isBpmRequest()) {
                            if (response.header && response.header.hasOwnProperty('set-cookie')) {
                                _this.authentications.cookie = response.header['set-cookie'][0];
                            }
                        }
                        var data = {};
                        if (response.type === 'text/html') {
                            data = _this.deserialize(response);
                        }
                        else {
                            data = _this.deserialize(response, returnType);
                        }
                        eventEmitter.emit('success', data);
                        resolve(data);
                    }
                });
            });
            promise.on = function () {
                eventEmitter.on.apply(eventEmitter, arguments);
                return this;
            };
            promise.once = function () {
                eventEmitter.once.apply(eventEmitter, arguments);
                return this;
            };
            promise.emit = function () {
                eventEmitter.emit.apply(eventEmitter, arguments);
                return this;
            };
            promise.off = function () {
                eventEmitter.off.apply(eventEmitter, arguments);
                return this;
            };
            promise.abort = function () {
                request.abort();
                return this;
            };
            return promise;
        };
        AlfrescoApiClient.prototype.isBpmRequest = function () {
            return this.className === 'ProcessAuth' || this.className === 'ProcessClient';
        };
        AlfrescoApiClient.prototype.isCsrfEnabled = function () {
            if (this.config) {
                return !this.config.disableCsrf;
            }
            else {
                return true;
            }
        };
        AlfrescoApiClient.prototype.setCsrfToken = function (request) {
            var token = this.createCSRFToken();
            request.set('X-CSRF-TOKEN', token);
            if (!this.isBrowser()) {
                request.set('Cookie', 'CSRF-TOKEN=' + token + ';path=/');
            }
            try {
                document.cookie = 'CSRF-TOKEN=' + token + ';path=/';
            }
            catch (err) {
            }
        };
        AlfrescoApiClient.prototype.isNodeEnv = function () {
            return (typeof process$1 !== 'undefined') && (process$1.release );
        };
        AlfrescoApiClient.prototype.isBrowser = function () {
            return (typeof window !== 'undefined' && typeof window.document !== 'undefined');
        };
        AlfrescoApiClient.prototype.createCSRFToken = function (a) {
            return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e16] + (1e16).toString()).replace(/[01]/g, this.createCSRFToken);
        };
        AlfrescoApiClient.prototype.progress = function (event, eventEmitter) {
            if (event.lengthComputable) {
                var percent = Math.round(event.loaded / event.total * 100);
                eventEmitter.emit('progress', {
                    total: event.total,
                    loaded: event.loaded,
                    percent: percent
                });
            }
        };
        AlfrescoApiClient.prototype.buildUrlCustomBasePath = function (basePath, path, pathParams) {
            if (path && path !== '' && !path.match(/^\//)) {
                path = '/' + path;
            }
            var url = basePath + path;
            url = url.replace(/\{([\w-]+)\}/g, function (fullMatch, key) {
                var value;
                if (pathParams.hasOwnProperty(key)) {
                    value = paramToString(pathParams[key]);
                }
                else {
                    value = fullMatch;
                }
                return encodeURIComponent(value);
            });
            return url;
        };
        AlfrescoApiClient.prototype.buildRequest = function (httpMethod, url, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, responseType, eventEmitter, returnType) {
            var _this = this;
            var request = superagent(httpMethod, url);
            this.applyAuthToRequest(request);
            request.query(this.normalizeParams(queryParams));
            request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));
            if (this.isBpmRequest() && this.isCsrfEnabled()) {
                this.setCsrfToken(request);
            }
            if (this.isWithCredentials()) {
                request.withCredentials();
            }
            if (this.isBpmRequest()) {
                request.withCredentials();
                if (this.authentications.cookie) {
                    if (!this.isBrowser()) {
                        request.set('Cookie', this.authentications.cookie);
                    }
                }
            }
            request.timeout(this.timeout);
            var contentType = this.jsonPreferredMime(contentTypes);
            if (contentType && contentType !== 'multipart/form-data') {
                request.type(contentType);
            }
            else if (!request.header['Content-Type'] && contentType !== 'multipart/form-data') {
                request.type('application/json');
            }
            if (contentType === 'application/x-www-form-urlencoded') {
                request.send(this.normalizeParams(formParams)).on('progress', function (event) {
                    _this.progress(event, eventEmitter);
                });
            }
            else if (contentType === 'multipart/form-data') {
                var _formParams = this.normalizeParams(formParams);
                for (var key in _formParams) {
                    if (_formParams.hasOwnProperty(key)) {
                        if (this.isFileParam(_formParams[key])) {
                            request.attach(key, _formParams[key]).on('progress', function (event) {
                                _this.progress(event, eventEmitter);
                            });
                        }
                        else {
                            request.field(key, _formParams[key]).on('progress', function (event) {
                                _this.progress(event, eventEmitter);
                            });
                        }
                    }
                }
            }
            else if (bodyParam) {
                request.send(bodyParam).on('progress', function (event) {
                    _this.progress(event, eventEmitter);
                });
            }
            var accept = this.jsonPreferredMime(accepts);
            if (accept) {
                request.accept(accept);
            }
            if (returnType === 'blob' || returnType === 'Blob' || responseType === 'blob' || responseType === 'Blob') {
                request.responseType('blob');
            }
            else if (returnType === 'String') {
                request.responseType('string');
            }
            return request;
        };
        AlfrescoApiClient.prototype.getAlfTicket = function (ticket) {
            var alfTicketFragment = '';
            if (ticket) {
                alfTicketFragment = '&alf_ticket=' + ticket;
            }
            else if (this.config.ticketEcm) {
                alfTicketFragment = '&alf_ticket=' + this.config.ticketEcm;
            }
            return alfTicketFragment;
        };
        return AlfrescoApiClient;
    }());
    //# sourceMappingURL=alfrescoApiClient.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ContentClient = (function (_super) {
        __extends(ContentClient, _super);
        function ContentClient(config, servicePath) {
            var _this = _super.call(this) || this;
            _this.className = 'ContentClient';
            _this.setConfig(config, servicePath);
            return _this;
        }
        ContentClient.prototype.setConfig = function (config, servicePath) {
            this.config = config;
            this.servicePath = servicePath;
            this.changeHost();
        };
        ContentClient.prototype.changeHost = function () {
            this.host = this.config.hostEcm;
            this.basePath = this.config.hostEcm + "/" + this.config.contextRoot + this.servicePath;
        };
        ContentClient.prototype.setAuthentications = function (authentications) {
            this.authentications = authentications;
        };
        return ContentClient;
    }(AlfrescoApiClient));
    //# sourceMappingURL=contentClient.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessClient = (function (_super) {
        __extends(ProcessClient, _super);
        function ProcessClient(config) {
            var _this = _super.call(this) || this;
            _this.className = 'ProcessClient';
            _this.setConfig(config);
            return _this;
        }
        ProcessClient.prototype.setConfig = function (config) {
            this.config = config;
            this.changeHost();
        };
        ProcessClient.prototype.changeHost = function () {
            this.host = this.config.hostBpm;
            this.basePath = this.config.hostBpm + "/" + this.config.contextRootBpm;
        };
        ProcessClient.prototype.setAuthentications = function (authentications) {
            this.authentications = authentications;
        };
        return ProcessClient;
    }(AlfrescoApiClient));
    //# sourceMappingURL=processClient.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.SiteMembershipBodyCreate = (function () {
        function SiteMembershipBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteMembershipBodyCreate;
    }());
    (function (SiteMembershipBodyCreate) {
        SiteMembershipBodyCreate.RoleEnum = {
            SiteConsumer: 'SiteConsumer',
            SiteCollaborator: 'SiteCollaborator',
            SiteContributor: 'SiteContributor',
            SiteManager: 'SiteManager'
        };
    })(exports.SiteMembershipBodyCreate || (exports.SiteMembershipBodyCreate = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.SiteMembershipBodyUpdate = (function () {
        function SiteMembershipBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteMembershipBodyUpdate;
    }());
    (function (SiteMembershipBodyUpdate) {
        SiteMembershipBodyUpdate.RoleEnum = {
            SiteConsumer: 'SiteConsumer',
            SiteCollaborator: 'SiteCollaborator',
            SiteContributor: 'SiteContributor',
            SiteManager: 'SiteManager'
        };
    })(exports.SiteMembershipBodyUpdate || (exports.SiteMembershipBodyUpdate = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SharedLinkBodyCreate = (function () {
        function SharedLinkBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
                this.expiresAt = input.expiresAt ? DateAlfresco.parseDate(input.expiresAt) : undefined;
            }
        }
        return SharedLinkBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SharedLinkBodyEmail = (function () {
        function SharedLinkBodyEmail(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SharedLinkBodyEmail;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RenditionBodyCreate = (function () {
        function RenditionBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RenditionBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestBodyCreate = (function () {
        function SiteMembershipRequestBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteMembershipRequestBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoriteSiteBodyCreate = (function () {
        function FavoriteSiteBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FavoriteSiteBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestBodyUpdate = (function () {
        function SiteMembershipRequestBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteMembershipRequestBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeBodyCreateAssociation = (function () {
        function NodeBodyCreateAssociation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return NodeBodyCreateAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeBodyCreate = (function () {
        function NodeBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
                this.association = input.association ? new NodeBodyCreateAssociation(input.association) : undefined;
                if (input.secondaryChildren) {
                    this.secondaryChildren = input.secondaryChildren.map(function (item) {
                        return new ChildAssociationBody(item);
                    });
                }
                if (input.targets) {
                    this.targets = input.targets.map(function (item) {
                        return new AssociationBody(item);
                    });
                }
            }
        }
        return NodeBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeBodyCopy = (function () {
        function NodeBodyCopy(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return NodeBodyCopy;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeBodyMove = (function () {
        function NodeBodyMove(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return NodeBodyMove;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupBodyCreate = (function () {
        function GroupBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GroupBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Association = (function () {
        function Association(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Association;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AssociationEntry = (function () {
        function AssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Association(input.entry) : undefined;
            }
        }
        return AssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChildAssociation = (function () {
        function ChildAssociation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ChildAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChildAssociationEntry = (function () {
        function ChildAssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ChildAssociation(input.entry) : undefined;
            }
        }
        return ChildAssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AssociationInfo = (function () {
        function AssociationInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AssociationInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeAssociation = (function () {
        function NodeAssociation(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.permissions = input.permissions ? new PermissionsInfo(input.permissions) : undefined;
                this.association = input.association ? new AssociationInfo(input.association) : undefined;
            }
        }
        return NodeAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeAssociationEntry = (function () {
        function NodeAssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new NodeAssociation(input.entry) : undefined;
            }
        }
        return NodeAssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeAssociationPagingList = (function () {
        function NodeAssociationPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new NodeAssociationEntry(item);
                    });
                }
                this.source = input.source ? new Node(input.source) : undefined;
            }
        }
        return NodeAssociationPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeAssociationPaging = (function () {
        function NodeAssociationPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new NodeAssociationPagingList(input.list) : undefined;
            }
        }
        return NodeAssociationPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChildAssociationInfo = (function () {
        function ChildAssociationInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ChildAssociationInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeChildAssociation = (function () {
        function NodeChildAssociation(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.permissions = input.permissions ? new PermissionsInfo(input.permissions) : undefined;
                this.association = input.association ? new ChildAssociationInfo(input.association) : undefined;
            }
        }
        return NodeChildAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeChildAssociationEntry = (function () {
        function NodeChildAssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new NodeChildAssociation(input.entry) : undefined;
            }
        }
        return NodeChildAssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeChildAssociationPagingList = (function () {
        function NodeChildAssociationPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new NodeChildAssociationEntry(item);
                    });
                }
                this.source = input.source ? new Node(input.source) : undefined;
            }
        }
        return NodeChildAssociationPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeChildAssociationPaging = (function () {
        function NodeChildAssociationPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new NodeChildAssociationPagingList(input.list) : undefined;
            }
        }
        return NodeChildAssociationPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BaseApi = (function () {
        function BaseApi(alfrescoApi) {
            if (alfrescoApi) {
                this.apiClient = alfrescoApi.contentClient;
            }
        }
        BaseApi.prototype.post = function (options) {
            return this.apiClient.post(options);
        };
        BaseApi.prototype.put = function (options) {
            return this.apiClient.put(options);
        };
        BaseApi.prototype.get = function (options) {
            return this.apiClient.get(options);
        };
        BaseApi.prototype.delete = function (options) {
            return this.apiClient.delete(options);
        };
        BaseApi.prototype.errorMessage = function (param, methodName) {
            return "Missing param " + param + " in " + methodName;
        };
        return BaseApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    function throwIfNotDefined(param, name) {
        if (param === null || param === undefined) {
            throw new Error("Missing param '" + name + "'");
        }
    }

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodesApi = (function (_super) {
        __extends(NodesApi, _super);
        function NodesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NodesApi.prototype.copyNode = function (nodeId, nodeBodyCopy, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(nodeBodyCopy, 'nodeBodyCopy');
            opts = opts || {};
            var postBody = nodeBodyCopy;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/copy', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
        };
        NodesApi.prototype.createAssociation = function (nodeId, associationBodyCreate, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(associationBodyCreate, 'associationBodyCreate');
            opts = opts || {};
            var postBody = associationBodyCreate;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/targets', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AssociationEntry);
        };
        NodesApi.prototype.createNode = function (nodeId, nodeBodyCreate, opts, formParams) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(nodeBodyCreate, 'nodeBodyCreate');
            opts = opts || {};
            var postBody = nodeBodyCreate;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'autoRename': opts['autoRename'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            formParams = formParams || {};
            var contentTypes, returnType = null;
            if (formParams.filedata) {
                contentTypes = ['multipart/form-data'];
            }
            else {
                contentTypes = ['application/json'];
                returnType = NodeEntry;
            }
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, returnType);
        };
        NodesApi.prototype.createSecondaryChildAssociation = function (nodeId, secondaryChildAssociationBodyCreate, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(secondaryChildAssociationBodyCreate, 'secondaryChildAssociationBodyCreate');
            opts = opts || {};
            var postBody = secondaryChildAssociationBodyCreate;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/secondary-children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ChildAssociationEntry);
        };
        NodesApi.prototype.deleteAssociation = function (nodeId, targetId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(targetId, 'targetId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId, 'targetId': targetId
            };
            var queryParams = {
                'assocType': opts['assocType']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/targets/{targetId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        NodesApi.prototype.deleteNode = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'permanent': opts['permanent']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        NodesApi.prototype.deleteSecondaryChildAssociation = function (nodeId, childId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(childId, 'childId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId, 'childId': childId
            };
            var queryParams = {
                'assocType': opts['assocType']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/secondary-children/{childId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        NodesApi.prototype.getNode = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'relativePath': opts['relativePath'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
        };
        NodesApi.prototype.getNodeContent = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'attachment': opts['attachment']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        NodesApi.prototype.listNodeChildren = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
                'where': opts['where'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'relativePath': opts['relativePath'],
                'includeSource': opts['includeSource'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeChildAssociationPaging);
        };
        NodesApi.prototype.listParents = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'where': opts['where'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'includeSource': opts['includeSource'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/parents', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeAssociationPaging);
        };
        NodesApi.prototype.listSecondaryChildren = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'where': opts['where'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'includeSource': opts['includeSource'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/secondary-children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeChildAssociationPaging);
        };
        NodesApi.prototype.listSourceAssociations = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'where': opts['where'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/sources', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeAssociationPaging);
        };
        NodesApi.prototype.listTargetAssociations = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'where': opts['where'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/targets', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeAssociationPaging);
        };
        NodesApi.prototype.lockNode = function (nodeId, nodeBodyLock, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(nodeBodyLock, 'nodeBodyLock');
            opts = opts || {};
            var postBody = nodeBodyLock;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/lock', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
        };
        NodesApi.prototype.moveNode = function (nodeId, nodeBodyMove, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(nodeBodyMove, 'nodeBodyMove');
            opts = opts || {};
            var postBody = nodeBodyMove;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/move', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
        };
        NodesApi.prototype.unlockNode = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/unlock', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
        };
        NodesApi.prototype.updateNode = function (nodeId, nodeBodyUpdate, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(nodeBodyUpdate, 'nodeBodyUpdate');
            opts = opts || {};
            var postBody = nodeBodyUpdate;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
        };
        NodesApi.prototype.updateNodeContent = function (nodeId, contentBodyUpdate, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(contentBodyUpdate, 'contentBodyUpdate');
            opts = opts || {};
            var postBody = contentBodyUpdate;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'majorVersion': opts['majorVersion'],
                'comment': opts['comment'],
                'name': opts['name'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/octet-stream'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/content', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
        };
        return NodesApi;
    }(BaseApi));
    //# sourceMappingURL=nodes.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.Rendition = (function () {
        function Rendition(input) {
            if (input) {
                Object.assign(this, input);
                this.content = input.content ? new ContentInfo(input.content) : undefined;
            }
        }
        return Rendition;
    }());
    (function (Rendition) {
        Rendition.StatusEnum = {
            CREATED: 'CREATED',
            NOTCREATED: 'NOT_CREATED'
        };
    })(exports.Rendition || (exports.Rendition = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RenditionEntry = (function () {
        function RenditionEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new exports.Rendition(input.entry) : undefined;
            }
        }
        return RenditionEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RenditionPagingList = (function () {
        function RenditionPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new RenditionEntry(item);
                    });
                }
            }
        }
        return RenditionPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RenditionPaging = (function () {
        function RenditionPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new RenditionPagingList(input.list) : undefined;
            }
        }
        return RenditionPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SharedLink = (function () {
        function SharedLink(input) {
            if (input) {
                Object.assign(this, input);
                this.expiresAt = input.expiresAt ? DateAlfresco.parseDate(input.expiresAt) : undefined;
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.sharedByUser = input.sharedByUser ? new UserInfo(input.sharedByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
            }
        }
        return SharedLink;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SharedLinkEntry = (function () {
        function SharedLinkEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new SharedLink(input.entry) : undefined;
            }
        }
        return SharedLinkEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SharedLinkPagingList = (function () {
        function SharedLinkPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new SharedLinkEntry(item);
                    });
                }
            }
        }
        return SharedLinkPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SharedLinkPaging = (function () {
        function SharedLinkPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new SharedLinkPagingList(input.list) : undefined;
            }
        }
        return SharedLinkPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SharedlinksApi = (function (_super) {
        __extends(SharedlinksApi, _super);
        function SharedlinksApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SharedlinksApi.prototype.createSharedLink = function (sharedLinkBodyCreate, opts) {
            throwIfNotDefined(sharedLinkBodyCreate, 'sharedLinkBodyCreate');
            opts = opts || {};
            var postBody = sharedLinkBodyCreate;
            var pathParams = {};
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SharedLinkEntry);
        };
        SharedlinksApi.prototype.deleteSharedLink = function (sharedId) {
            throwIfNotDefined(sharedId, 'sharedId');
            var postBody = null;
            var pathParams = {
                'sharedId': sharedId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links/{sharedId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SharedlinksApi.prototype.emailSharedLink = function (sharedId, sharedLinkBodyEmail) {
            throwIfNotDefined(sharedId, 'sharedId');
            throwIfNotDefined(sharedLinkBodyEmail, 'sharedLinkBodyEmail');
            var postBody = sharedLinkBodyEmail;
            var pathParams = {
                'sharedId': sharedId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links/{sharedId}/email', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SharedlinksApi.prototype.getSharedLink = function (sharedId, opts) {
            throwIfNotDefined(sharedId, 'sharedId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'sharedId': sharedId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links/{sharedId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SharedLinkEntry);
        };
        SharedlinksApi.prototype.getSharedLinkContent = function (sharedId, opts) {
            throwIfNotDefined(sharedId, 'sharedId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'sharedId': sharedId
            };
            var queryParams = {
                'attachment': opts['attachment']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links/{sharedId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SharedlinksApi.prototype.getSharedLinkRendition = function (sharedId, renditionId) {
            throwIfNotDefined(sharedId, 'sharedId');
            throwIfNotDefined(renditionId, 'renditionId');
            var postBody = null;
            var pathParams = {
                'sharedId': sharedId, 'renditionId': renditionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links/{sharedId}/renditions/{renditionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionEntry);
        };
        SharedlinksApi.prototype.getSharedLinkRenditionContent = function (sharedId, renditionId, opts) {
            throwIfNotDefined(sharedId, 'sharedId');
            throwIfNotDefined(renditionId, 'renditionId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'sharedId': sharedId, 'renditionId': renditionId
            };
            var queryParams = {
                'attachment': opts['attachment']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links/{sharedId}/renditions/{renditionId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SharedlinksApi.prototype.listSharedLinkRenditions = function (sharedId) {
            throwIfNotDefined(sharedId, 'sharedId');
            var postBody = null;
            var pathParams = {
                'sharedId': sharedId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links/{sharedId}/renditions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionPaging);
        };
        SharedlinksApi.prototype.listSharedLinks = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SharedLinkPaging);
        };
        return SharedlinksApi;
    }(BaseApi));
    //# sourceMappingURL=sharedlinks.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RenditionsApi = (function (_super) {
        __extends(RenditionsApi, _super);
        function RenditionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RenditionsApi.prototype.createRendition = function (nodeId, renditionBodyCreate) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(renditionBodyCreate, 'renditionBodyCreate');
            var postBody = renditionBodyCreate;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/renditions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RenditionsApi.prototype.getRendition = function (nodeId, renditionId) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(renditionId, 'renditionId');
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId, 'renditionId': renditionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/renditions/{renditionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionEntry);
        };
        RenditionsApi.prototype.getRenditionContent = function (nodeId, renditionId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(renditionId, 'renditionId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId, 'renditionId': renditionId
            };
            var queryParams = {
                'attachment': opts['attachment'],
                'placeholder': opts['placeholder']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/renditions/{renditionId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RenditionsApi.prototype.listRenditions = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'where': opts['where']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/renditions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionPaging);
        };
        return RenditionsApi;
    }(BaseApi));
    //# sourceMappingURL=renditions.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteContainer = (function () {
        function SiteContainer(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteContainer;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteContainerEntry = (function () {
        function SiteContainerEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new SiteContainer(input.entry) : undefined;
            }
        }
        return SiteContainerEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteContainerPagingList = (function () {
        function SiteContainerPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new SiteContainerEntry(item);
                    });
                }
            }
        }
        return SiteContainerPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteContainerPaging = (function () {
        function SiteContainerPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new SiteContainerPagingList(input.list) : undefined;
            }
        }
        return SiteContainerPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.Site = (function () {
        function Site(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Site;
    }());
    (function (Site) {
        Site.VisibilityEnum = {
            PRIVATE: 'PRIVATE',
            MODERATED: 'MODERATED',
            PUBLIC: 'PUBLIC'
        };
        Site.RoleEnum = {
            SiteConsumer: 'SiteConsumer',
            SiteCollaborator: 'SiteCollaborator',
            SiteContributor: 'SiteContributor',
            SiteManager: 'SiteManager'
        };
    })(exports.Site || (exports.Site = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteEntry = (function () {
        function SiteEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new exports.Site(input.entry) : undefined;
            }
        }
        return SiteEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Capabilities = (function () {
        function Capabilities(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Capabilities;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Company = (function () {
        function Company(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Company;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Person = (function () {
        function Person(input) {
            if (input) {
                Object.assign(this, input);
                this.company = input.company ? new Company(input.company) : undefined;
                this.statusUpdatedAt = input.statusUpdatedAt ? DateAlfresco.parseDate(input.statusUpdatedAt) : undefined;
                this.capabilities = input.capabilities ? new Capabilities(input.capabilities) : undefined;
            }
        }
        return Person;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.SiteMember = (function () {
        function SiteMember(input) {
            if (input) {
                Object.assign(this, input);
                this.person = input.person ? new Person(input.person) : undefined;
            }
        }
        return SiteMember;
    }());
    (function (SiteMember) {
        SiteMember.RoleEnum = {
            SiteConsumer: 'SiteConsumer',
            SiteCollaborator: 'SiteCollaborator',
            SiteContributor: 'SiteContributor',
            SiteManager: 'SiteManager'
        };
    })(exports.SiteMember || (exports.SiteMember = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMemberEntry = (function () {
        function SiteMemberEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new exports.SiteMember(input.entry) : undefined;
            }
        }
        return SiteMemberEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMemberPagingList = (function () {
        function SiteMemberPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new SiteMemberEntry(item);
                    });
                }
            }
        }
        return SiteMemberPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMemberPaging = (function () {
        function SiteMemberPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new SiteMemberPagingList(input.list) : undefined;
            }
        }
        return SiteMemberPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequest = (function () {
        function SiteMembershipRequest(input) {
            if (input) {
                Object.assign(this, input);
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.site = input.site ? new exports.Site(input.site) : undefined;
            }
        }
        return SiteMembershipRequest;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestEntry = (function () {
        function SiteMembershipRequestEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new SiteMembershipRequest(input.entry) : undefined;
            }
        }
        return SiteMembershipRequestEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestPagingList = (function () {
        function SiteMembershipRequestPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new SiteMembershipRequestEntry(item);
                    });
                }
            }
        }
        return SiteMembershipRequestPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestPaging = (function () {
        function SiteMembershipRequestPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new SiteMembershipRequestPagingList(input.list) : undefined;
            }
        }
        return SiteMembershipRequestPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestWithPerson = (function () {
        function SiteMembershipRequestWithPerson(input) {
            if (input) {
                Object.assign(this, input);
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.site = input.site ? new exports.Site(input.site) : undefined;
                this.person = input.person ? new Person(input.person) : undefined;
            }
        }
        return SiteMembershipRequestWithPerson;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestWithPersonEntry = (function () {
        function SiteMembershipRequestWithPersonEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new SiteMembershipRequestWithPerson(input.entry) : undefined;
            }
        }
        return SiteMembershipRequestWithPersonEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestWithPersonPagingList = (function () {
        function SiteMembershipRequestWithPersonPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new SiteMembershipRequestWithPersonEntry(item);
                    });
                }
            }
        }
        return SiteMembershipRequestWithPersonPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestWithPersonPaging = (function () {
        function SiteMembershipRequestWithPersonPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new SiteMembershipRequestWithPersonPagingList(input.list) : undefined;
            }
        }
        return SiteMembershipRequestWithPersonPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SitePagingList = (function () {
        function SitePagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new SiteEntry(item);
                    });
                }
            }
        }
        return SitePagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SitePaging = (function () {
        function SitePaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new SitePagingList(input.list) : undefined;
            }
        }
        return SitePaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.SiteRole = (function () {
        function SiteRole(input) {
            if (input) {
                Object.assign(this, input);
                this.site = input.site ? new exports.Site(input.site) : undefined;
            }
        }
        return SiteRole;
    }());
    (function (SiteRole) {
        SiteRole.RoleEnum = {
            SiteConsumer: 'SiteConsumer',
            SiteCollaborator: 'SiteCollaborator',
            SiteContributor: 'SiteContributor',
            SiteManager: 'SiteManager'
        };
    })(exports.SiteRole || (exports.SiteRole = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteRoleEntry = (function () {
        function SiteRoleEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new exports.SiteRole(input.entry) : undefined;
            }
        }
        return SiteRoleEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteRolePagingList = (function () {
        function SiteRolePagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new SiteRoleEntry(item);
                    });
                }
            }
        }
        return SiteRolePagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteRolePaging = (function () {
        function SiteRolePaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new SiteRolePagingList(input.list) : undefined;
            }
        }
        return SiteRolePaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SitesApi = (function (_super) {
        __extends(SitesApi, _super);
        function SitesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SitesApi.prototype.approveSiteMembershipRequest = function (siteId, inviteeId, opts) {
            throwIfNotDefined(siteId, 'siteId');
            throwIfNotDefined(inviteeId, 'inviteeId');
            opts = opts || {};
            var postBody = opts['siteMembershipApprovalBody'];
            var pathParams = {
                'siteId': siteId, 'inviteeId': inviteeId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/site-membership-requests/{inviteeId}/approve', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SitesApi.prototype.createSite = function (siteBodyCreate, opts) {
            throwIfNotDefined(siteBodyCreate, 'siteBodyCreate');
            opts = opts || {};
            var postBody = siteBodyCreate;
            var pathParams = {};
            var queryParams = {
                'skipConfiguration': opts['skipConfiguration'],
                'skipAddToFavorites': opts['skipAddToFavorites'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteEntry);
        };
        SitesApi.prototype.createSiteMembership = function (siteId, siteMembershipBodyCreate, opts) {
            throwIfNotDefined(siteId, 'siteId');
            throwIfNotDefined(siteMembershipBodyCreate, 'siteMembershipBodyCreate');
            opts = opts || {};
            var postBody = siteMembershipBodyCreate;
            var pathParams = {
                'siteId': siteId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/members', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMemberEntry);
        };
        SitesApi.prototype.createSiteMembershipRequestForPerson = function (personId, siteMembershipRequestBodyCreate, opts) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(siteMembershipRequestBodyCreate, 'siteMembershipRequestBodyCreate');
            opts = opts || {};
            var postBody = siteMembershipRequestBodyCreate;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/site-membership-requests', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestEntry);
        };
        SitesApi.prototype.deleteSite = function (siteId, opts) {
            throwIfNotDefined(siteId, 'siteId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'siteId': siteId
            };
            var queryParams = {
                'permanent': opts['permanent']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SitesApi.prototype.deleteSiteMembership = function (siteId, personId) {
            throwIfNotDefined(siteId, 'siteId');
            throwIfNotDefined(personId, 'personId');
            var postBody = null;
            var pathParams = {
                'siteId': siteId, 'personId': personId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/members/{personId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SitesApi.prototype.deleteSiteMembershipForPerson = function (personId, siteId) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(siteId, 'siteId');
            var postBody = null;
            var pathParams = {
                'personId': personId, 'siteId': siteId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/sites/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SitesApi.prototype.deleteSiteMembershipRequestForPerson = function (personId, siteId) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(siteId, 'siteId');
            var postBody = null;
            var pathParams = {
                'personId': personId, 'siteId': siteId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/site-membership-requests/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SitesApi.prototype.getSite = function (siteId, opts) {
            throwIfNotDefined(siteId, 'siteId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'siteId': siteId
            };
            var queryParams = {
                'relations': buildCollectionParam(opts['relations'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteEntry);
        };
        SitesApi.prototype.getSiteContainer = function (siteId, containerId, opts) {
            throwIfNotDefined(siteId, 'siteId');
            throwIfNotDefined(containerId, 'containerId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'siteId': siteId, 'containerId': containerId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/containers/{containerId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteContainerEntry);
        };
        SitesApi.prototype.getSiteMembership = function (siteId, personId, opts) {
            throwIfNotDefined(siteId, 'siteId');
            throwIfNotDefined(personId, 'personId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'siteId': siteId, 'personId': personId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/members/{personId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMemberEntry);
        };
        SitesApi.prototype.getSiteMembershipForPerson = function (personId, siteId) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(siteId, 'siteId');
            var postBody = null;
            var pathParams = {
                'personId': personId, 'siteId': siteId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/sites/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteRoleEntry);
        };
        SitesApi.prototype.getSiteMembershipRequestForPerson = function (personId, siteId, opts) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(siteId, 'siteId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'personId': personId, 'siteId': siteId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/site-membership-requests/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestEntry);
        };
        SitesApi.prototype.getSiteMembershipRequests = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/site-membership-requests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestWithPersonPaging);
        };
        SitesApi.prototype.listSiteContainers = function (siteId, opts) {
            throwIfNotDefined(siteId, 'siteId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'siteId': siteId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/containers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteContainerPaging);
        };
        SitesApi.prototype.listSiteMembershipRequestsForPerson = function (personId, opts) {
            throwIfNotDefined(personId, 'personId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/site-membership-requests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestPaging);
        };
        SitesApi.prototype.listSiteMemberships = function (siteId, opts) {
            throwIfNotDefined(siteId, 'siteId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'siteId': siteId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/members', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMemberPaging);
        };
        SitesApi.prototype.listSiteMembershipsForPerson = function (personId, opts) {
            throwIfNotDefined(personId, 'personId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
                'relations': buildCollectionParam(opts['relations'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv'),
                'where': opts['where']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteRolePaging);
        };
        SitesApi.prototype.listSites = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
                'relations': buildCollectionParam(opts['relations'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv'),
                'where': opts['where']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SitePaging);
        };
        SitesApi.prototype.rejectSiteMembershipRequest = function (siteId, inviteeId, opts) {
            throwIfNotDefined(siteId, 'siteId');
            throwIfNotDefined(inviteeId, 'inviteeId');
            opts = opts || {};
            var postBody = opts['siteMembershipRejectionBody'];
            var pathParams = {
                'siteId': siteId, 'inviteeId': inviteeId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/site-membership-requests/{inviteeId}/reject', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SitesApi.prototype.updateSite = function (siteId, siteBodyUpdate, opts) {
            throwIfNotDefined(siteId, 'siteId');
            throwIfNotDefined(siteBodyUpdate, 'siteBodyUpdate');
            opts = opts || {};
            var postBody = siteBodyUpdate;
            var pathParams = {
                'siteId': siteId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteEntry);
        };
        SitesApi.prototype.updateSiteMembership = function (siteId, personId, siteMembershipBodyUpdate, opts) {
            throwIfNotDefined(siteId, 'siteId');
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(siteMembershipBodyUpdate, 'siteMembershipBodyUpdate');
            opts = opts || {};
            var postBody = siteMembershipBodyUpdate;
            var pathParams = {
                'siteId': siteId, 'personId': personId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/members/{personId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMemberEntry);
        };
        SitesApi.prototype.updateSiteMembershipRequestForPerson = function (personId, siteId, siteMembershipRequestBodyUpdate, opts) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(siteId, 'siteId');
            throwIfNotDefined(siteMembershipRequestBodyUpdate, 'siteMembershipRequestBodyUpdate');
            opts = opts || {};
            var postBody = siteMembershipRequestBodyUpdate;
            var pathParams = {
                'personId': personId, 'siteId': siteId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/site-membership-requests/{siteId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestEntry);
        };
        return SitesApi;
    }(BaseApi));
    //# sourceMappingURL=sites.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeletedNodesPagingList = (function () {
        function DeletedNodesPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new DeletedNodeEntry(item);
                    });
                }
            }
        }
        return DeletedNodesPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeletedNodesPaging = (function () {
        function DeletedNodesPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new DeletedNodesPagingList(input.list) : undefined;
            }
        }
        return DeletedNodesPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TrashcanApi = (function (_super) {
        __extends(TrashcanApi, _super);
        function TrashcanApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TrashcanApi.prototype.deleteDeletedNode = function (nodeId) {
            throwIfNotDefined(nodeId, 'nodeId');
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/deleted-nodes/{nodeId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TrashcanApi.prototype.getArchivedNodeRendition = function (nodeId, renditionId) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(renditionId, 'renditionId');
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId, 'renditionId': renditionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/deleted-nodes/{nodeId}/renditions/{renditionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionEntry);
        };
        TrashcanApi.prototype.getArchivedNodeRenditionContent = function (nodeId, renditionId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(renditionId, 'renditionId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId, 'renditionId': renditionId
            };
            var queryParams = {
                'attachment': opts['attachment'],
                'placeholder': opts['placeholder']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/deleted-nodes/{nodeId}/renditions/{renditionId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TrashcanApi.prototype.getDeletedNode = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/deleted-nodes/{nodeId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeletedNodeEntry);
        };
        TrashcanApi.prototype.getDeletedNodeContent = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'attachment': opts['attachment']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/deleted-nodes/{nodeId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TrashcanApi.prototype.listDeletedNodeRenditions = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'where': opts['where']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/deleted-nodes/{nodeId}/renditions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionPaging);
        };
        TrashcanApi.prototype.listDeletedNodes = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'include': buildCollectionParam(opts['include'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/deleted-nodes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeletedNodesPaging);
        };
        TrashcanApi.prototype.restoreDeletedNode = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = opts['deletedNodeBodyRestore'];
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/deleted-nodes/{nodeId}/restore', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
        };
        return TrashcanApi;
    }(BaseApi));
    //# sourceMappingURL=trashcan.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChangesApi = (function () {
        function ChangesApi() {
        }
        ChangesApi.prototype.init = function (alfrescoApi) {
            this.nodesApi = new NodesApi(alfrescoApi);
            this.sharedlinksApi = new SharedlinksApi(alfrescoApi);
            this.renditionsApi = new RenditionsApi(alfrescoApi);
            this.sitesApi = new SitesApi(alfrescoApi);
            this.trashcanApi = new TrashcanApi(alfrescoApi);
        };
        ChangesApi.prototype.addAssoc = function (sourceId, assocTargetBody) {
            return this.nodesApi.createAssociation(sourceId, assocTargetBody);
        };
        ChangesApi.prototype.addNode = function (nodeId, nodeBody, opts) {
            return this.nodesApi.createNode(nodeId, nodeBody, opts);
        };
        ChangesApi.prototype.addSecondaryChildAssoc = function (parentId, assocChildBody, opts) {
            return this.nodesApi.createSecondaryChildAssociation(parentId, assocChildBody, opts);
        };
        ChangesApi.prototype.addSharedLink = function (sharedLinkBody, opts) {
            return this.sharedlinksApi.createSharedLink(sharedLinkBody, opts);
        };
        ChangesApi.prototype.copyNode = function (nodeId, copyBody, opts) {
            return this.nodesApi.copyNode(nodeId, copyBody, opts);
        };
        ChangesApi.prototype.createRendition = function (nodeId, renditionBody) {
            return this.renditionsApi.createRendition(nodeId, renditionBody);
        };
        ChangesApi.prototype.createSite = function (siteBody, opts) {
            return this.sitesApi.createSite(siteBody, opts);
        };
        ChangesApi.prototype.updateSite = function (siteId, siteBody, opts) {
            return this.sitesApi.updateSite(siteId, siteBody, opts);
        };
        ChangesApi.prototype.deleteNode = function (nodeId, opts) {
            return this.nodesApi.deleteNode(nodeId, opts);
        };
        ChangesApi.prototype.deleteSharedLink = function (sharedId) {
            return this.sharedlinksApi.deleteSharedLink(sharedId);
        };
        ChangesApi.prototype.deleteSite = function (siteId, opts) {
            return this.sitesApi.deleteSite(siteId, opts);
        };
        ChangesApi.prototype.emailSharedLink = function (sharedId, emailSharedLinkBody) {
            return this.sharedlinksApi.emailSharedLink(sharedId, emailSharedLinkBody);
        };
        ChangesApi.prototype.findSharedLinks = function (opts) {
            return this.sharedlinksApi.listSharedLinks(opts);
        };
        ChangesApi.prototype.getDeletedNode = function (nodeId, opts) {
            return this.trashcanApi.getDeletedNode(nodeId, opts);
        };
        ChangesApi.prototype.getDeletedNodes = function (opts) {
            return this.trashcanApi.listDeletedNodes(opts);
        };
        ChangesApi.prototype.getFileContent = function (nodeId, opts) {
            return this.nodesApi.getNodeContent(nodeId, opts);
        };
        ChangesApi.prototype.getNode = function (nodeId, opts) {
            return this.nodesApi.getNode(nodeId, opts);
        };
        ChangesApi.prototype.getNodeChildren = function (nodeId, opts) {
            return this.nodesApi.listNodeChildren(nodeId, opts);
        };
        ChangesApi.prototype.getRendition = function (nodeId, renditionId) {
            return this.renditionsApi.getRendition(nodeId, renditionId);
        };
        ChangesApi.prototype.getRenditionContent = function (nodeId, renditionId, opts) {
            return this.renditionsApi.getRenditionContent(nodeId, renditionId, opts);
        };
        ChangesApi.prototype.getRenditions = function (nodeId) {
            return this.renditionsApi.listRenditions(nodeId);
        };
        ChangesApi.prototype.getSharedLink = function (sharedId, opts) {
            return this.sharedlinksApi.getSharedLink(sharedId, opts);
        };
        ChangesApi.prototype.getSharedLinkContent = function (sharedId, opts) {
            return this.sharedlinksApi.getSharedLinkContent(sharedId, opts);
        };
        ChangesApi.prototype.getSharedLinkRenditionContent = function (sharedId, renditionId, opts) {
            return this.sharedlinksApi.getSharedLinkRenditionContent(sharedId, renditionId, opts);
        };
        ChangesApi.prototype.getSharedLinkRenditions = function (sharedId) {
            return this.sharedlinksApi.listSharedLinkRenditions(sharedId);
        };
        ChangesApi.prototype.listParents = function (childId, opts) {
            return this.nodesApi.listParents(childId, opts);
        };
        ChangesApi.prototype.listSecondaryChildAssociations = function (parentId, opts) {
            return this.nodesApi.listSecondaryChildren(parentId, opts);
        };
        ChangesApi.prototype.listSourceNodeAssociations = function (targetId, opts) {
            return this.nodesApi.listSourceAssociations(targetId, opts);
        };
        ChangesApi.prototype.listTargetAssociations = function (sourceId, opts) {
            return this.nodesApi.listTargetAssociations(sourceId, opts);
        };
        ChangesApi.prototype.moveNode = function (nodeId, moveBody, opts) {
            return this.nodesApi.moveNode(nodeId, moveBody, opts);
        };
        ChangesApi.prototype.purgeDeletedNode = function (nodeId) {
            return this.trashcanApi.deleteDeletedNode(nodeId);
        };
        ChangesApi.prototype.removeAssoc = function (sourceId, targetId, opts) {
            return this.nodesApi.deleteAssociation(sourceId, targetId, opts);
        };
        ChangesApi.prototype.removeSecondaryChildAssoc = function (parentId, childId, opts) {
            return this.nodesApi.deleteSecondaryChildAssociation(parentId, childId, opts);
        };
        ChangesApi.prototype.restoreNode = function (nodeId) {
            return this.trashcanApi.restoreDeletedNode(nodeId);
        };
        ChangesApi.prototype.updateFileContent = function (nodeId, contentBody, opts) {
            return this.nodesApi.updateNodeContent(nodeId, contentBody, opts);
        };
        ChangesApi.prototype.updateNode = function (nodeId, nodeBody, opts) {
            return this.nodesApi.updateNode(nodeId, nodeBody, opts);
        };
        return ChangesApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChildAssociationsApi = (function () {
        function ChildAssociationsApi() {
        }
        ChildAssociationsApi.prototype.init = function (alfrescoApi) {
            this.nodesApi = new NodesApi(alfrescoApi);
        };
        ChildAssociationsApi.prototype.addNode = function (nodeId, nodeBody, opts) {
            return this.nodesApi.createNode(nodeId, nodeBody, opts);
        };
        ChildAssociationsApi.prototype.addSecondaryChildAssoc = function (parentId, assocChildBody) {
            return this.nodesApi.createSecondaryChildAssociation(parentId, assocChildBody);
        };
        ChildAssociationsApi.prototype.deleteNode = function (nodeId, opts) {
            return this.nodesApi.deleteNode(nodeId, opts);
        };
        ChildAssociationsApi.prototype.getNodeChildren = function (nodeId, opts) {
            return this.nodesApi.listNodeChildren(nodeId, opts);
        };
        ChildAssociationsApi.prototype.listParents = function (childId, opts) {
            return this.nodesApi.listParents(childId, opts);
        };
        ChildAssociationsApi.prototype.listSecondaryChildAssociations = function (parentId, opts) {
            return this.nodesApi.listSecondaryChildren(parentId, opts);
        };
        ChildAssociationsApi.prototype.moveNode = function (nodeId, moveBody, opts) {
            return this.nodesApi.moveNode(nodeId, moveBody, opts);
        };
        ChildAssociationsApi.prototype.removeSecondaryChildAssoc = function (parentId, childId, opts) {
            return this.nodesApi.deleteSecondaryChildAssociation(parentId, childId, opts);
        };
        return ChildAssociationsApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Comment = (function () {
        function Comment(input) {
            if (input) {
                Object.assign(this, input);
                this.createdBy = input.createdBy ? new Person(input.createdBy) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.modifiedBy = input.modifiedBy ? new Person(input.modifiedBy) : undefined;
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
            }
        }
        return Comment;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentEntry = (function () {
        function CommentEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Comment(input.entry) : undefined;
            }
        }
        return CommentEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentPagingList = (function () {
        function CommentPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new CommentEntry(item);
                    });
                }
            }
        }
        return CommentPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentPaging = (function () {
        function CommentPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new CommentPagingList(input.list) : undefined;
            }
        }
        return CommentPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentsApi = (function (_super) {
        __extends(CommentsApi, _super);
        function CommentsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CommentsApi.prototype.createComment = function (nodeId, commentBodyCreate, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(commentBodyCreate, 'commentBodyCreate');
            opts = opts || {};
            var postBody = commentBodyCreate;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/comments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CommentEntry);
        };
        CommentsApi.prototype.deleteComment = function (nodeId, commentId) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(commentId, 'commentId');
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId, 'commentId': commentId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/comments/{commentId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CommentsApi.prototype.listComments = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/comments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CommentPaging);
        };
        CommentsApi.prototype.updateComment = function (nodeId, commentId, commentBodyUpdate, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(commentId, 'commentId');
            throwIfNotDefined(commentBodyUpdate, 'commentBodyUpdate');
            opts = opts || {};
            var postBody = commentBodyUpdate;
            var pathParams = {
                'nodeId': nodeId, 'commentId': commentId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/comments/{commentId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CommentEntry);
        };
        return CommentsApi;
    }(BaseApi));
    //# sourceMappingURL=comments.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentsApi$1 = (function () {
        function CommentsApi$1() {
        }
        CommentsApi$1.prototype.init = function (alfrescoApi) {
            this.commentsApi = new CommentsApi(alfrescoApi);
        };
        CommentsApi$1.prototype.addComment = function (nodeId, commentBody, opts) {
            return this.commentsApi.createComment(nodeId, commentBody, opts);
        };
        CommentsApi$1.prototype.getComments = function (nodeId, opts) {
            return this.commentsApi.listComments(nodeId, opts);
        };
        CommentsApi$1.prototype.removeComment = function (nodeId, commentId) {
            return this.commentsApi.deleteComment(nodeId, commentId);
        };
        CommentsApi$1.prototype.updateComment = function (nodeId, commentId, commentBody, opts) {
            return this.commentsApi.updateComment(nodeId, commentId, commentBody, opts);
        };
        return CommentsApi$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Favorite = (function () {
        function Favorite(input) {
            if (input) {
                Object.assign(this, input);
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
            }
        }
        return Favorite;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoriteEntry = (function () {
        function FavoriteEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Favorite(input.entry) : undefined;
            }
        }
        return FavoriteEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoritePagingList = (function () {
        function FavoritePagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new FavoriteEntry(item);
                    });
                }
            }
        }
        return FavoritePagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoritePaging = (function () {
        function FavoritePaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new FavoritePagingList(input.list) : undefined;
            }
        }
        return FavoritePaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoriteSite = (function () {
        function FavoriteSite(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FavoriteSite;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoriteSiteEntry = (function () {
        function FavoriteSiteEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new FavoriteSite(input.entry) : undefined;
            }
        }
        return FavoriteSiteEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoritesApi = (function (_super) {
        __extends(FavoritesApi, _super);
        function FavoritesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FavoritesApi.prototype.createFavorite = function (personId, favoriteBodyCreate, opts) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(favoriteBodyCreate, 'favoriteBodyCreate');
            opts = opts || {};
            var postBody = favoriteBodyCreate;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/favorites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FavoriteEntry);
        };
        FavoritesApi.prototype.createSiteFavorite = function (personId, favoriteSiteBodyCreate, opts) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(favoriteSiteBodyCreate, 'favoriteSiteBodyCreate');
            opts = opts || {};
            var postBody = favoriteSiteBodyCreate;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/favorite-sites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FavoriteSiteEntry);
        };
        FavoritesApi.prototype.deleteFavorite = function (personId, favoriteId) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(favoriteId, 'favoriteId');
            var postBody = null;
            var pathParams = {
                'personId': personId, 'favoriteId': favoriteId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/favorites/{favoriteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        FavoritesApi.prototype.deleteSiteFavorite = function (personId, siteId) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(siteId, 'siteId');
            var postBody = null;
            var pathParams = {
                'personId': personId, 'siteId': siteId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/favorite-sites/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        FavoritesApi.prototype.getFavorite = function (personId, favoriteId, opts) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(favoriteId, 'favoriteId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'personId': personId, 'favoriteId': favoriteId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/favorites/{favoriteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FavoriteEntry);
        };
        FavoritesApi.prototype.getFavoriteSite = function (personId, siteId, opts) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(siteId, 'siteId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'personId': personId, 'siteId': siteId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/favorite-sites/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteEntry);
        };
        FavoritesApi.prototype.listFavoriteSitesForPerson = function (personId, opts) {
            throwIfNotDefined(personId, 'personId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/favorite-sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SitePaging);
        };
        FavoritesApi.prototype.listFavorites = function (personId, opts) {
            throwIfNotDefined(personId, 'personId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/favorites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FavoritePaging);
        };
        return FavoritesApi;
    }(BaseApi));
    //# sourceMappingURL=favorites.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoritesApi$1 = (function () {
        function FavoritesApi$1() {
        }
        FavoritesApi$1.prototype.init = function (alfrescoApi) {
            this.favoritesApi = new FavoritesApi(alfrescoApi);
        };
        FavoritesApi$1.prototype.addFavorite = function (personId, favoriteBody) {
            return this.favoritesApi.createFavorite(personId, favoriteBody);
        };
        FavoritesApi$1.prototype.getFavorite = function (personId, favoriteId, opts) {
            return this.favoritesApi.getFavorite(personId, favoriteId, opts);
        };
        FavoritesApi$1.prototype.getFavorites = function (personId, opts) {
            return this.favoritesApi.listFavorites(personId, opts);
        };
        FavoritesApi$1.prototype.removeFavoriteSite = function (personId, favoriteId) {
            return this.favoritesApi.deleteFavorite(personId, favoriteId);
        };
        return FavoritesApi$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CustomModelApi = (function (_super) {
        __extends(CustomModelApi, _super);
        function CustomModelApi(alfrescoApi) {
            var _this = _super.call(this, alfrescoApi) || this;
            _this.private = true;
            if (alfrescoApi) {
                _this.apiClient = alfrescoApi.contentPrivateClient;
            }
            return _this;
        }
        CustomModelApi.prototype.createCustomModel = function (status, description, name, namespaceUri, namespacePrefix, author) {
            throwIfNotDefined(namespaceUri, 'namespaceUri');
            throwIfNotDefined(namespacePrefix, 'namespacePrefix');
            var bodyParam = {
                status: status,
                description: description,
                name: name,
                namespaceUri: namespaceUri,
                namespacePrefix: namespacePrefix,
                author: author
            };
            return this.post({
                path: 'cmm',
                bodyParam: bodyParam
            });
        };
        CustomModelApi.prototype.createCustomType = function (modelName, name, parentName, title, description) {
            throwIfNotDefined(modelName, 'modelName');
            throwIfNotDefined(name, 'name');
            var bodyParam = {
                name: name,
                parentName: parentName,
                title: title,
                description: description
            };
            var pathParams = {
                modelName: modelName
            };
            return this.post({
                path: 'cmm/{modelName}/types',
                bodyParam: bodyParam,
                pathParams: pathParams
            });
        };
        CustomModelApi.prototype.createCustomAspect = function (modelName, name, parentName, title, description) {
            throwIfNotDefined(modelName, 'modelName');
            throwIfNotDefined(name, 'name');
            var bodyParam = {
                name: name,
                parentName: parentName,
                title: title,
                description: description
            };
            var pathParams = {
                modelName: modelName
            };
            return this.post({
                path: 'cmm/{modelName}/aspects',
                bodyParam: bodyParam,
                pathParams: pathParams
            });
        };
        CustomModelApi.prototype.createCustomConstraint = function (modelName, name, type, parameters) {
            throwIfNotDefined(modelName, 'modelName');
            throwIfNotDefined(type, 'type');
            throwIfNotDefined(name, 'name');
            var bodyParam = {
                name: name,
                type: type,
                parameters: parameters
            };
            var pathParams = {
                modelName: modelName
            };
            return this.post({
                path: 'cmm/{modelName}/constraints',
                bodyParam: bodyParam,
                pathParams: pathParams
            });
        };
        CustomModelApi.prototype.activateCustomModel = function (modelName) {
            throwIfNotDefined(modelName, 'modelName');
            var bodyParam = {
                'status': 'ACTIVE'
            };
            var pathParams = {
                modelName: modelName
            };
            return this.put({
                path: 'cmm/{modelName}?select=status',
                bodyParam: bodyParam,
                pathParams: pathParams
            });
        };
        CustomModelApi.prototype.deactivateCustomModel = function (modelName) {
            throwIfNotDefined(modelName, 'modelName');
            var bodyParam = {
                'status': 'DRAFT'
            };
            var pathParams = {
                modelName: modelName
            };
            return this.put({
                path: 'cmm/{modelName}?select=status',
                bodyParam: bodyParam,
                pathParams: pathParams
            });
        };
        CustomModelApi.prototype.addPropertyToAspect = function (modelName, aspectName, properties) {
            throwIfNotDefined(modelName, 'modelName');
            throwIfNotDefined(aspectName, 'aspectName');
            var bodyParam = {
                'name': aspectName,
                properties: properties
            };
            var pathParams = {
                modelName: modelName,
                aspectName: aspectName
            };
            return this.put({
                path: 'cmm/{modelName}/aspects/{aspectName}?select=props',
                bodyParam: bodyParam,
                pathParams: pathParams
            });
        };
        CustomModelApi.prototype.addPropertyToType = function (modelName, typeName, properties) {
            throwIfNotDefined(modelName, 'modelName');
            throwIfNotDefined(typeName, 'typeName');
            var bodyParam = {
                'name': typeName,
                properties: properties
            };
            var pathParams = {
                modelName: modelName,
                typeName: typeName
            };
            return this.put({
                path: 'cmm/{modelName}/types/{typeName}?select=props',
                bodyParam: bodyParam,
                pathParams: pathParams
            });
        };
        CustomModelApi.prototype.updateCustomModel = function (modelName, description, namespaceUri, namespacePrefix, author) {
            throwIfNotDefined(modelName, 'modelName');
            var bodyParam = {
                'name': modelName,
                description: description,
                namespaceUri: namespaceUri,
                namespacePrefix: namespacePrefix,
                author: author
            };
            var pathParams = {
                modelName: modelName
            };
            return this.put({
                path: 'cmm/{modelName}',
                bodyParam: bodyParam,
                pathParams: pathParams
            });
        };
        CustomModelApi.prototype.updateCustomType = function (modelName, typeName, description, parentName, title) {
            throwIfNotDefined(modelName, 'modelName');
            throwIfNotDefined(typeName, 'typeName');
            var bodyParam = {
                'name': typeName,
                parentName: parentName,
                title: title,
                description: description
            };
            var pathParams = {
                modelName: modelName,
                typeName: typeName
            };
            return this.put({
                path: 'cmm/{modelName}/types/{typeName}',
                bodyParam: bodyParam,
                pathParams: pathParams
            });
        };
        CustomModelApi.prototype.updateCustomAspect = function (modelName, aspectName, description, parentName, title) {
            throwIfNotDefined(modelName, 'modelName');
            throwIfNotDefined(aspectName, 'aspectName');
            var bodyParam = {
                'name': aspectName,
                parentName: parentName,
                title: title,
                description: description
            };
            var pathParams = {
                modelName: modelName,
                aspectName: aspectName
            };
            return this.put({
                path: 'cmm/{modelName}/aspects/{aspectName}',
                bodyParam: bodyParam,
                pathParams: pathParams
            });
        };
        CustomModelApi.prototype.getAllCustomModel = function () {
            return this.get({
                path: 'cmm'
            });
        };
        CustomModelApi.prototype.getCustomModel = function (modelName, queryParams) {
            throwIfNotDefined(modelName, 'modelName');
            var pathParams = {
                modelName: modelName
            };
            return this.get({
                path: 'cmm/{modelName}',
                pathParams: pathParams,
                queryParams: queryParams
            });
        };
        CustomModelApi.prototype.getAllCustomType = function (modelName) {
            throwIfNotDefined(modelName, 'modelName');
            var pathParams = {
                modelName: modelName
            };
            return this.get({
                path: 'cmm/{modelName}/types',
                pathParams: pathParams
            });
        };
        CustomModelApi.prototype.getCustomType = function (modelName, typeName, queryParams) {
            throwIfNotDefined(modelName, 'modelName');
            throwIfNotDefined(typeName, 'typeName');
            var pathParams = {
                modelName: modelName,
                typeName: typeName
            };
            return this.get({
                path: 'cmm/{modelName}/types/{typeName}',
                pathParams: pathParams,
                queryParams: queryParams
            });
        };
        CustomModelApi.prototype.getAllCustomAspect = function (modelName, queryParams) {
            throwIfNotDefined(modelName, 'modelName');
            var pathParams = {
                modelName: modelName
            };
            return this.get({
                path: 'cmm/{modelName}/aspects',
                pathParams: pathParams,
                queryParams: queryParams
            });
        };
        CustomModelApi.prototype.getCustomAspect = function (modelName, aspectName, queryParams) {
            throwIfNotDefined(modelName, 'modelName');
            throwIfNotDefined(aspectName, 'aspectName');
            var pathParams = {
                modelName: modelName,
                aspectName: aspectName
            };
            return this.get({
                path: 'cmm/{modelName}/aspects/{aspectName}',
                pathParams: pathParams,
                queryParams: queryParams
            });
        };
        CustomModelApi.prototype.getAllCustomConstraints = function (modelName, queryParams) {
            throwIfNotDefined(modelName, 'modelName');
            var pathParams = {
                modelName: modelName
            };
            return this.get({
                path: 'cmm/{modelName}/constraints',
                pathParams: pathParams,
                queryParams: queryParams
            });
        };
        CustomModelApi.prototype.getCustomConstraints = function (modelName, constraintName, queryParams) {
            throwIfNotDefined(modelName, 'modelName');
            throwIfNotDefined(constraintName, 'constraintName');
            var pathParams = {
                modelName: modelName,
                constraintName: constraintName
            };
            return this.get({
                path: 'cmm/{modelName}/constraints{constraintName}',
                pathParams: pathParams,
                queryParams: queryParams
            });
        };
        CustomModelApi.prototype.deleteCustomModel = function (modelName) {
            throwIfNotDefined(modelName, 'modelName');
            var pathParams = {
                modelName: modelName
            };
            return this.delete({
                path: 'cmm/{modelName}',
                pathParams: pathParams
            });
        };
        CustomModelApi.prototype.deleteCustomType = function (modelName, typeName) {
            throwIfNotDefined(modelName, 'modelName');
            throwIfNotDefined(typeName, 'typeName');
            var pathParams = {
                modelName: modelName,
                typeName: typeName
            };
            return this.delete({
                path: 'cmm/{modelName}/types/{typeName}',
                pathParams: pathParams
            });
        };
        CustomModelApi.prototype.deleteCustomAspect = function (modelName, aspectName) {
            throwIfNotDefined(modelName, 'modelName');
            throwIfNotDefined(aspectName, 'aspectName');
            var pathParams = {
                modelName: modelName,
                aspectName: aspectName
            };
            return this.delete({
                path: 'cmm/{modelName}/aspects/{aspectName}',
                pathParams: pathParams
            });
        };
        CustomModelApi.prototype.deleteCustomAspectProperty = function (modelName, aspectName, propertyName) {
            throwIfNotDefined(modelName, 'modelName');
            throwIfNotDefined(aspectName, 'aspectName');
            throwIfNotDefined(propertyName, 'propertyName');
            var bodyParam = {
                'name': aspectName
            };
            var pathParams = {
                modelName: modelName,
                aspectName: aspectName
            };
            var queryParams = {
                select: 'props',
                delete: propertyName,
                update: true
            };
            return this.put({
                path: 'cmm/{modelName}/aspects/{aspectName}',
                bodyParam: bodyParam,
                pathParams: pathParams,
                queryParams: queryParams
            });
        };
        CustomModelApi.prototype.deleteCustomTypeProperty = function (modelName, typeName, propertyName) {
            throwIfNotDefined(modelName, 'modelName');
            throwIfNotDefined(typeName, 'typeName');
            throwIfNotDefined(propertyName, 'propertyName');
            var bodyParam = {
                'name': typeName
            };
            var pathParams = {
                modelName: modelName,
                typeName: typeName
            };
            var queryParams = {
                select: 'props',
                delete: propertyName,
                update: true
            };
            return this.put({
                path: 'cmm/{modelName}/types/{typeName}',
                bodyParam: bodyParam,
                pathParams: pathParams,
                queryParams: queryParams
            });
        };
        return CustomModelApi;
    }(BaseApi));
    //# sourceMappingURL=customModel.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionParameterDefinition = (function () {
        function ActionParameterDefinition(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ActionParameterDefinition;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionDefinition = (function () {
        function ActionDefinition(input) {
            if (input) {
                Object.assign(this, input);
                if (input.parameterDefinitions) {
                    this.parameterDefinitions = input.parameterDefinitions.map(function (item) {
                        return new ActionParameterDefinition(item);
                    });
                }
            }
        }
        return ActionDefinition;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionDefinitionEntry = (function () {
        function ActionDefinitionEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ActionDefinition(input.entry) : undefined;
            }
        }
        return ActionDefinitionEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionDefinitionListList = (function () {
        function ActionDefinitionListList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new ActionDefinition(item);
                    });
                }
            }
        }
        return ActionDefinitionListList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionDefinitionList = (function () {
        function ActionDefinitionList(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new ActionDefinitionListList(input.list) : undefined;
            }
        }
        return ActionDefinitionList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionExecResult = (function () {
        function ActionExecResult(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ActionExecResult;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionExecResultEntry = (function () {
        function ActionExecResultEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ActionExecResult(input.entry) : undefined;
            }
        }
        return ActionExecResultEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionsApi = (function (_super) {
        __extends(ActionsApi, _super);
        function ActionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ActionsApi.prototype.actionDetails = function (actionDefinitionId) {
            throwIfNotDefined(actionDefinitionId, 'actionDefinitionId');
            var postBody = null;
            var pathParams = {
                'actionDefinitionId': actionDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/action-definitions/{actionDefinitionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ActionDefinitionEntry);
        };
        ActionsApi.prototype.actionExec = function (actionBodyExec) {
            throwIfNotDefined(actionBodyExec, 'actionBodyExec');
            var postBody = actionBodyExec;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/action-executions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ActionExecResultEntry);
        };
        ActionsApi.prototype.listActions = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/action-definitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ActionDefinitionList);
        };
        ActionsApi.prototype.nodeActions = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/action-definitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ActionDefinitionList);
        };
        return ActionsApi;
    }(BaseApi));
    //# sourceMappingURL=actions.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Activity = (function () {
        function Activity(input) {
            if (input) {
                Object.assign(this, input);
                this.postedAt = input.postedAt ? DateAlfresco.parseDate(input.postedAt) : undefined;
            }
        }
        return Activity;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActivityEntry = (function () {
        function ActivityEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Activity(input.entry) : undefined;
            }
        }
        return ActivityEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActivityPagingList = (function () {
        function ActivityPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new ActivityEntry(item);
                    });
                }
            }
        }
        return ActivityPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActivityPaging = (function () {
        function ActivityPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new ActivityPagingList(input.list) : undefined;
            }
        }
        return ActivityPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActivitiesApi = (function (_super) {
        __extends(ActivitiesApi, _super);
        function ActivitiesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ActivitiesApi.prototype.listActivitiesForPerson = function (personId, opts) {
            throwIfNotDefined(personId, 'personId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'who': opts['who'],
                'siteId': opts['siteId'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/activities', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ActivityPaging);
        };
        return ActivitiesApi;
    }(BaseApi));
    //# sourceMappingURL=activities.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditApp = (function () {
        function AuditApp(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AuditApp;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditAppEntry = (function () {
        function AuditAppEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new AuditApp(input.entry) : undefined;
            }
        }
        return AuditAppEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditAppPagingList = (function () {
        function AuditAppPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new AuditAppEntry(item);
                    });
                }
            }
        }
        return AuditAppPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditAppPaging = (function () {
        function AuditAppPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new AuditAppPagingList(input.list) : undefined;
            }
        }
        return AuditAppPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditEntry = (function () {
        function AuditEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
            }
        }
        return AuditEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditEntryEntry = (function () {
        function AuditEntryEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new AuditEntry(input.entry) : undefined;
            }
        }
        return AuditEntryEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditEntryPagingList = (function () {
        function AuditEntryPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new AuditEntryEntry(item);
                    });
                }
            }
        }
        return AuditEntryPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditEntryPaging = (function () {
        function AuditEntryPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new AuditEntryPagingList(input.list) : undefined;
            }
        }
        return AuditEntryPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditApi = (function (_super) {
        __extends(AuditApi, _super);
        function AuditApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AuditApi.prototype.deleteAuditEntriesForAuditApp = function (auditApplicationId, where) {
            throwIfNotDefined(auditApplicationId, 'auditApplicationId');
            throwIfNotDefined(where, 'where');
            var postBody = null;
            var pathParams = {
                'auditApplicationId': auditApplicationId
            };
            var queryParams = {
                'where': where
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AuditApi.prototype.deleteAuditEntry = function (auditApplicationId, auditEntryId) {
            throwIfNotDefined(auditApplicationId, 'auditApplicationId');
            throwIfNotDefined(auditEntryId, 'auditEntryId');
            var postBody = null;
            var pathParams = {
                'auditApplicationId': auditApplicationId, 'auditEntryId': auditEntryId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AuditApi.prototype.getAuditApp = function (auditApplicationId, opts) {
            throwIfNotDefined(auditApplicationId, 'auditApplicationId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'auditApplicationId': auditApplicationId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/audit-applications/{auditApplicationId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditApp);
        };
        AuditApi.prototype.getAuditEntry = function (auditApplicationId, auditEntryId, opts) {
            throwIfNotDefined(auditApplicationId, 'auditApplicationId');
            throwIfNotDefined(auditEntryId, 'auditEntryId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'auditApplicationId': auditApplicationId, 'auditEntryId': auditEntryId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditEntryEntry);
        };
        AuditApi.prototype.listAuditApps = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/audit-applications', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditAppPaging);
        };
        AuditApi.prototype.listAuditEntriesForAuditApp = function (auditApplicationId, opts) {
            throwIfNotDefined(auditApplicationId, 'auditApplicationId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'auditApplicationId': auditApplicationId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditEntryPaging);
        };
        AuditApi.prototype.listAuditEntriesForNode = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/audit-entries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditEntryPaging);
        };
        AuditApi.prototype.updateAuditApp = function (auditApplicationId, auditAppBodyUpdate, opts) {
            throwIfNotDefined(auditApplicationId, 'auditApplicationId');
            throwIfNotDefined(auditAppBodyUpdate, 'auditAppBodyUpdate');
            opts = opts || {};
            var postBody = auditAppBodyUpdate;
            var pathParams = {
                'auditApplicationId': auditApplicationId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/audit-applications/{auditApplicationId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditApp);
        };
        return AuditApi;
    }(BaseApi));
    //# sourceMappingURL=audit.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.Download = (function () {
        function Download(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Download;
    }());
    (function (Download) {
        Download.StatusEnum = {
            PENDING: 'PENDING',
            CANCELLED: 'CANCELLED',
            INPROGRESS: 'IN_PROGRESS',
            DONE: 'DONE',
            MAXCONTENTSIZEEXCEEDED: 'MAX_CONTENT_SIZE_EXCEEDED'
        };
    })(exports.Download || (exports.Download = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DownloadEntry = (function () {
        function DownloadEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new exports.Download(input.entry) : undefined;
            }
        }
        return DownloadEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DownloadsApi = (function (_super) {
        __extends(DownloadsApi, _super);
        function DownloadsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DownloadsApi.prototype.cancelDownload = function (downloadId) {
            throwIfNotDefined(downloadId, 'downloadId');
            var postBody = null;
            var pathParams = {
                'downloadId': downloadId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/downloads/{downloadId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        DownloadsApi.prototype.createDownload = function (downloadBodyCreate, opts) {
            throwIfNotDefined(downloadBodyCreate, 'downloadBodyCreate');
            opts = opts || {};
            var postBody = downloadBodyCreate;
            var pathParams = {};
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/downloads', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DownloadEntry);
        };
        DownloadsApi.prototype.getDownload = function (downloadId, opts) {
            throwIfNotDefined(downloadId, 'downloadId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'downloadId': downloadId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/downloads/{downloadId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DownloadEntry);
        };
        return DownloadsApi;
    }(BaseApi));
    //# sourceMappingURL=downloads.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.GroupMember = (function () {
        function GroupMember(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GroupMember;
    }());
    (function (GroupMember) {
        GroupMember.MemberTypeEnum = {
            GROUP: 'GROUP',
            PERSON: 'PERSON'
        };
    })(exports.GroupMember || (exports.GroupMember = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupMemberEntry = (function () {
        function GroupMemberEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new exports.GroupMember(input.entry) : undefined;
            }
        }
        return GroupMemberEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupMemberPagingList = (function () {
        function GroupMemberPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new GroupMemberEntry(item);
                    });
                }
            }
        }
        return GroupMemberPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupMemberPaging = (function () {
        function GroupMemberPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new GroupMemberPagingList(input.list) : undefined;
            }
        }
        return GroupMemberPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupsApi = (function (_super) {
        __extends(GroupsApi, _super);
        function GroupsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GroupsApi.prototype.createGroup = function (groupBodyCreate, opts) {
            throwIfNotDefined(groupBodyCreate, 'groupBodyCreate');
            opts = opts || {};
            var postBody = groupBodyCreate;
            var pathParams = {};
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/groups', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupEntry);
        };
        GroupsApi.prototype.createGroupMembership = function (groupId, groupMembershipBodyCreate, opts) {
            throwIfNotDefined(groupId, 'groupId');
            throwIfNotDefined(groupMembershipBodyCreate, 'groupMembershipBodyCreate');
            opts = opts || {};
            var postBody = groupMembershipBodyCreate;
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/groups/{groupId}/members', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupMemberEntry);
        };
        GroupsApi.prototype.deleteGroup = function (groupId, opts) {
            throwIfNotDefined(groupId, 'groupId');
            opts = opts || {};
            var postBody = null;
            var cascadeDelete = opts['cascade'] ? opts['cascade'] : false;
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {
                'cascade': cascadeDelete
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/groups/{groupId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        GroupsApi.prototype.deleteGroupMembership = function (groupId, groupMemberId) {
            throwIfNotDefined(groupId, 'groupId');
            throwIfNotDefined(groupMemberId, 'groupMemberId');
            var postBody = null;
            var pathParams = {
                'groupId': groupId, 'groupMemberId': groupMemberId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/groups/{groupId}/members/{groupMemberId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        GroupsApi.prototype.getGroup = function (groupId, opts) {
            throwIfNotDefined(groupId, 'groupId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/groups/{groupId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupEntry);
        };
        GroupsApi.prototype.listGroupMemberships = function (groupId, opts) {
            throwIfNotDefined(groupId, 'groupId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
                'where': opts['where'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/groups/{groupId}/members', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupMemberPaging);
        };
        GroupsApi.prototype.listGroupMembershipsForPerson = function (personId, opts) {
            throwIfNotDefined(personId, 'personId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
                'include': buildCollectionParam(opts['include'], 'csv'),
                'where': opts['where'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupPaging);
        };
        GroupsApi.prototype.listGroups = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
                'include': buildCollectionParam(opts['include'], 'csv'),
                'where': opts['where'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupPaging);
        };
        GroupsApi.prototype.updateGroup = function (groupId, groupBodyUpdate, opts) {
            throwIfNotDefined(groupId, 'groupId');
            throwIfNotDefined(groupBodyUpdate, 'groupBodyUpdate');
            opts = opts || {};
            var postBody = groupBodyUpdate;
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/groups/{groupId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupEntry);
        };
        return GroupsApi;
    }(BaseApi));
    //# sourceMappingURL=groups.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NetworkQuota = (function () {
        function NetworkQuota(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return NetworkQuota;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.PersonNetwork = (function () {
        function PersonNetwork(input) {
            if (input) {
                Object.assign(this, input);
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                if (input.quotas) {
                    this.quotas = input.quotas.map(function (item) {
                        return new NetworkQuota(item);
                    });
                }
            }
        }
        return PersonNetwork;
    }());
    (function (PersonNetwork) {
        PersonNetwork.SubscriptionLevelEnum = {
            Free: 'Free',
            Standard: 'Standard',
            Enterprise: 'Enterprise'
        };
    })(exports.PersonNetwork || (exports.PersonNetwork = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PersonNetworkEntry = (function () {
        function PersonNetworkEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new exports.PersonNetwork(input.entry) : undefined;
            }
        }
        return PersonNetworkEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PersonNetworkPagingList = (function () {
        function PersonNetworkPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new PersonNetworkEntry(item);
                    });
                }
            }
        }
        return PersonNetworkPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PersonNetworkPaging = (function () {
        function PersonNetworkPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new PersonNetworkPagingList(input.list) : undefined;
            }
        }
        return PersonNetworkPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NetworksApi = (function (_super) {
        __extends(NetworksApi, _super);
        function NetworksApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NetworksApi.prototype.getNetwork = function (networkId, opts) {
            throwIfNotDefined(networkId, 'networkId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'networkId': networkId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/networks/{networkId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonNetworkEntry);
        };
        NetworksApi.prototype.getNetworkForPerson = function (personId, networkId, opts) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(networkId, 'networkId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'personId': personId, 'networkId': networkId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/networks/{networkId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonNetworkEntry);
        };
        NetworksApi.prototype.listNetworksForPerson = function (personId, opts) {
            throwIfNotDefined(personId, 'personId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/networks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonNetworkPaging);
        };
        return NetworksApi;
    }(BaseApi));
    //# sourceMappingURL=networks.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PersonEntry = (function () {
        function PersonEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Person(input.entry) : undefined;
            }
        }
        return PersonEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PersonPagingList = (function () {
        function PersonPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new PersonEntry(item);
                    });
                }
            }
        }
        return PersonPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PersonPaging = (function () {
        function PersonPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new PersonPagingList(input.list) : undefined;
            }
        }
        return PersonPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PeopleApi = (function (_super) {
        __extends(PeopleApi, _super);
        function PeopleApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PeopleApi.prototype.createPerson = function (personBodyCreate, opts) {
            throwIfNotDefined(personBodyCreate, 'personBodyCreate');
            opts = opts || {};
            var postBody = personBodyCreate;
            var pathParams = {};
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonEntry);
        };
        PeopleApi.prototype.deleteAvatarImage = function (personId) {
            throwIfNotDefined(personId, 'personId');
            var postBody = null;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/avatar', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        PeopleApi.prototype.getAvatarImage = function (personId, opts) {
            throwIfNotDefined(personId, 'personId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'attachment': opts['attachment'],
                'placeholder': opts['placeholder']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/avatar', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        PeopleApi.prototype.getPerson = function (personId, opts) {
            throwIfNotDefined(personId, 'personId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonEntry);
        };
        PeopleApi.prototype.listPeople = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonPaging);
        };
        PeopleApi.prototype.requestPasswordReset = function (personId, clientBody) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(clientBody, 'clientBody');
            var postBody = clientBody;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/request-password-reset', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        PeopleApi.prototype.resetPassword = function (personId, passwordResetBody) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(passwordResetBody, 'passwordResetBody');
            var postBody = passwordResetBody;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/reset-password', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        PeopleApi.prototype.updateAvatarImage = function (personId, contentBodyUpdate) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(contentBodyUpdate, 'contentBodyUpdate');
            var postBody = contentBodyUpdate;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/octet-stream'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/avatar', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        PeopleApi.prototype.updatePerson = function (personId, personBodyUpdate, opts) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(personBodyUpdate, 'personBodyUpdate');
            opts = opts || {};
            var postBody = personBodyUpdate;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonEntry);
        };
        return PeopleApi;
    }(BaseApi));
    //# sourceMappingURL=people.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Preference = (function () {
        function Preference(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Preference;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PreferenceEntry = (function () {
        function PreferenceEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Preference(input.entry) : undefined;
            }
        }
        return PreferenceEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PreferencePagingList = (function () {
        function PreferencePagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new PreferenceEntry(item);
                    });
                }
            }
        }
        return PreferencePagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PreferencePaging = (function () {
        function PreferencePaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new PreferencePagingList(input.list) : undefined;
            }
        }
        return PreferencePaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PreferencesApi = (function (_super) {
        __extends(PreferencesApi, _super);
        function PreferencesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PreferencesApi.prototype.getPreference = function (personId, preferenceName, opts) {
            throwIfNotDefined(personId, 'personId');
            throwIfNotDefined(preferenceName, 'preferenceName');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'personId': personId, 'preferenceName': preferenceName
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/preferences/{preferenceName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PreferenceEntry);
        };
        PreferencesApi.prototype.listPreferences = function (personId, opts) {
            throwIfNotDefined(personId, 'personId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/preferences', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PreferencePaging);
        };
        return PreferencesApi;
    }(BaseApi));
    //# sourceMappingURL=preferences.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProbeEntryEntry = (function () {
        function ProbeEntryEntry(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ProbeEntryEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProbeEntry = (function () {
        function ProbeEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ProbeEntryEntry(input.entry) : undefined;
            }
        }
        return ProbeEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProbesApi = (function (_super) {
        __extends(ProbesApi, _super);
        function ProbesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProbesApi.prototype.getProbe = function (probeId) {
            throwIfNotDefined(probeId, 'probeId');
            var postBody = null;
            var pathParams = {
                'probeId': probeId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/probes/{probeId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProbeEntry);
        };
        return ProbesApi;
    }(BaseApi));
    //# sourceMappingURL=probes.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodePagingList = (function () {
        function NodePagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new NodeEntry(item);
                    });
                }
                this.source = input.source ? new Node(input.source) : undefined;
            }
        }
        return NodePagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodePaging = (function () {
        function NodePaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new NodePagingList(input.list) : undefined;
            }
        }
        return NodePaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var QueriesApi = (function (_super) {
        __extends(QueriesApi, _super);
        function QueriesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        QueriesApi.prototype.findNodes = function (term, opts) {
            throwIfNotDefined(term, 'term');
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'term': term,
                'rootNodeId': opts['rootNodeId'],
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'nodeType': opts['nodeType'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/queries/nodes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodePaging);
        };
        QueriesApi.prototype.findPeople = function (term, opts) {
            throwIfNotDefined(term, 'term');
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'term': term,
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': buildCollectionParam(opts['fields'], 'csv'),
                'orderBy': buildCollectionParam(opts['orderBy'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/queries/people', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonPaging);
        };
        QueriesApi.prototype.findSites = function (term, opts) {
            throwIfNotDefined(term, 'term');
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'term': term,
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/queries/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SitePaging);
        };
        return QueriesApi;
    }(BaseApi));
    //# sourceMappingURL=queries.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RatingAggregate = (function () {
        function RatingAggregate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RatingAggregate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Rating = (function () {
        function Rating(input) {
            if (input) {
                Object.assign(this, input);
                this.aggregate = input.aggregate ? new RatingAggregate(input.aggregate) : undefined;
                this.ratedAt = input.ratedAt ? DateAlfresco.parseDate(input.ratedAt) : undefined;
            }
        }
        return Rating;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RatingEntry = (function () {
        function RatingEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Rating(input.entry) : undefined;
            }
        }
        return RatingEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RatingPagingList = (function () {
        function RatingPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new RatingEntry(item);
                    });
                }
            }
        }
        return RatingPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RatingPaging = (function () {
        function RatingPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new RatingPagingList(input.list) : undefined;
            }
        }
        return RatingPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RatingsApi = (function (_super) {
        __extends(RatingsApi, _super);
        function RatingsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RatingsApi.prototype.createRating = function (nodeId, ratingBodyCreate, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(ratingBodyCreate, 'ratingBodyCreate');
            opts = opts || {};
            var postBody = ratingBodyCreate;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/ratings', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RatingEntry);
        };
        RatingsApi.prototype.deleteRating = function (nodeId, ratingId) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(ratingId, 'ratingId');
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId, 'ratingId': ratingId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/ratings/{ratingId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RatingsApi.prototype.getRating = function (nodeId, ratingId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(ratingId, 'ratingId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId, 'ratingId': ratingId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/ratings/{ratingId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RatingEntry);
        };
        RatingsApi.prototype.listRatings = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/ratings', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RatingPaging);
        };
        return RatingsApi;
    }(BaseApi));
    //# sourceMappingURL=ratings.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Tag = (function () {
        function Tag(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Tag;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TagEntry = (function () {
        function TagEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Tag(input.entry) : undefined;
            }
        }
        return TagEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TagPagingList = (function () {
        function TagPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new TagEntry(item);
                    });
                }
            }
        }
        return TagPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TagPaging = (function () {
        function TagPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new TagPagingList(input.list) : undefined;
            }
        }
        return TagPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TagsApi = (function (_super) {
        __extends(TagsApi, _super);
        function TagsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TagsApi.prototype.createTagForNode = function (nodeId, tagBodyCreate, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(tagBodyCreate, 'tagBodyCreate');
            opts = opts || {};
            var postBody = tagBodyCreate;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/tags', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagEntry);
        };
        TagsApi.prototype.deleteTagFromNode = function (nodeId, tagId) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(tagId, 'tagId');
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId, 'tagId': tagId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/tags/{tagId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TagsApi.prototype.getTag = function (tagId, opts) {
            throwIfNotDefined(tagId, 'tagId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'tagId': tagId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/tags/{tagId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagEntry);
        };
        TagsApi.prototype.listTags = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': buildCollectionParam(opts['fields'], 'csv'),
                'include': buildCollectionParam(opts['include'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagPaging);
        };
        TagsApi.prototype.listTagsForNode = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagPaging);
        };
        TagsApi.prototype.updateTag = function (tagId, tagBodyUpdate, opts) {
            throwIfNotDefined(tagId, 'tagId');
            throwIfNotDefined(tagBodyUpdate, 'tagBodyUpdate');
            opts = opts || {};
            var postBody = tagBodyUpdate;
            var pathParams = {
                'tagId': tagId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/tags/{tagId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagEntry);
        };
        return TagsApi;
    }(BaseApi));
    //# sourceMappingURL=tags.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Version = (function () {
        function Version(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
            }
        }
        return Version;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var VersionEntry = (function () {
        function VersionEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Version(input.entry) : undefined;
            }
        }
        return VersionEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var VersionPagingList = (function () {
        function VersionPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new VersionEntry(item);
                    });
                }
            }
        }
        return VersionPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var VersionPaging = (function () {
        function VersionPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new VersionPagingList(input.list) : undefined;
            }
        }
        return VersionPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var VersionsApi = (function (_super) {
        __extends(VersionsApi, _super);
        function VersionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        VersionsApi.prototype.deleteVersion = function (nodeId, versionId) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(versionId, 'versionId');
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId, 'versionId': versionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/versions/{versionId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        VersionsApi.prototype.getVersion = function (nodeId, versionId) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(versionId, 'versionId');
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId, 'versionId': versionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/versions/{versionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, VersionEntry);
        };
        VersionsApi.prototype.getVersionContent = function (nodeId, versionId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(versionId, 'versionId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId, 'versionId': versionId
            };
            var queryParams = {
                'attachment': opts['attachment']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/versions/{versionId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        VersionsApi.prototype.listVersionHistory = function (nodeId, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv'),
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/versions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, VersionPaging);
        };
        VersionsApi.prototype.revertVersion = function (nodeId, versionId, revertBody, opts) {
            throwIfNotDefined(nodeId, 'nodeId');
            throwIfNotDefined(versionId, 'versionId');
            throwIfNotDefined(revertBody, 'revertBody');
            opts = opts || {};
            var postBody = revertBody;
            var pathParams = {
                'nodeId': nodeId, 'versionId': versionId
            };
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/versions/{versionId}/revert', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, VersionEntry);
        };
        return VersionsApi;
    }(BaseApi));
    //# sourceMappingURL=versions.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var WebscriptApi = (function (_super) {
        __extends(WebscriptApi, _super);
        function WebscriptApi() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.allowedMethod = ['GET', 'POST', 'PUT', 'DELETE'];
            return _this;
        }
        WebscriptApi.prototype.executeWebScript = function (httpMethod, scriptPath, scriptArgs, contextRoot, servicePath, postBody) {
            contextRoot = contextRoot || 'alfresco';
            servicePath = servicePath || 'service';
            postBody = postBody || null;
            if (!httpMethod || this.allowedMethod.indexOf(httpMethod) === -1) {
                throw 'method allowed value  GET, POST, PUT and DELETE';
            }
            if (!scriptPath) {
                throw 'Missing param scriptPath in executeWebScript';
            }
            var pathParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json', 'text/html'];
            return this.apiClient.callApi('/' + servicePath + '/' + scriptPath, httpMethod, pathParams, scriptArgs, headerParams, formParams, postBody, contentTypes, accepts, null, contextRoot);
        };
        return WebscriptApi;
    }(BaseApi));
    //# sourceMappingURL=webscript.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassDescription = (function () {
        function ClassDescription(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassDescription;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassesApi = (function (_super) {
        __extends(ClassesApi, _super);
        function ClassesApi() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.path = '/api/classes';
            return _this;
        }
        Object.defineProperty(ClassesApi.prototype, "contextRoot", {
            get: function () {
                return this.apiClient.config.contextRoot + '/s';
            },
            enumerable: true,
            configurable: true
        });
        ClassesApi.prototype.getClass = function (className, opts) {
            if (className === undefined || className === null) {
                throw "Missing param 'className' in getClass";
            }
            var postBody = null;
            var pathParams = {
                'className': className
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi(this.path + '/{className}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassDescription, this.contextRoot);
        };
        ClassesApi.prototype.getSubclasses = function (className, opts) {
            if (className === undefined || className === null) {
                throw "Missing param 'className'";
            }
            var postBody = null;
            var pathParams = {
                'className': className
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi(this.path + "/{className}/subclasses", 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassDescription, this.contextRoot);
        };
        return ClassesApi;
    }(BaseApi));
    //# sourceMappingURL=classes.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UploadApi = (function (_super) {
        __extends(UploadApi, _super);
        function UploadApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UploadApi.prototype.uploadFile = function (fileDefinition, relativePath, rootFolderId, nodeBody, opts) {
            rootFolderId = rootFolderId || '-root-';
            opts = opts || {};
            var nodeBodyRequired = {
                'name': fileDefinition.name,
                'nodeType': 'cm:content',
                'relativePath': relativePath
            };
            nodeBody = Object.assign(nodeBodyRequired, nodeBody);
            var formParam = Object.assign({}, nodeBody.properties || {});
            formParam.filedata = fileDefinition;
            formParam.relativePath = relativePath;
            if (opts.name) {
                formParam.name = opts.name;
            }
            formParam = Object.assign(formParam, opts);
            return this.createNode(rootFolderId, nodeBody, opts, formParam);
        };
        return UploadApi;
    }(NodesApi));
    //# sourceMappingURL=upload.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ContentApi = (function (_super) {
        __extends(ContentApi, _super);
        function ContentApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ContentApi.prototype.getDocumentThumbnailUrl = function (nodeId, attachment, ticket) {
            return this.apiClient.basePath + '/nodes/' + nodeId +
                '/renditions/doclib/content' +
                '?attachment=' + (attachment ? 'true' : 'false') +
                this.apiClient.getAlfTicket(ticket);
        };
        ContentApi.prototype.getDocumentPreviewUrl = function (nodeId, attachment, ticket) {
            return this.apiClient.basePath + '/nodes/' + nodeId +
                '/renditions/imgpreview/content' +
                '?attachment=' + (attachment ? 'true' : 'false') +
                this.apiClient.getAlfTicket(ticket);
        };
        ContentApi.prototype.getContentUrl = function (nodeId, attachment, ticket) {
            return this.apiClient.basePath + '/nodes/' + nodeId +
                '/content' +
                '?attachment=' + (attachment ? 'true' : 'false') +
                this.apiClient.getAlfTicket(ticket);
        };
        ContentApi.prototype.getRenditionUrl = function (nodeId, encoding, attachment, ticket) {
            return this.apiClient.basePath + '/nodes/' + nodeId +
                '/renditions/' + encoding + '/content' +
                '?attachment=' + (attachment ? 'true' : 'false') +
                this.apiClient.getAlfTicket(ticket);
        };
        ContentApi.prototype.getSharedLinkContentUrl = function (linkId, attachment) {
            return this.apiClient.basePath + '/shared-links/' + linkId +
                '/content' +
                '?attachment=' + (attachment ? 'true' : 'false');
        };
        ContentApi.prototype.getSharedLinkRenditionUrl = function (sharedId, renditionId, attachment) {
            return this.apiClient.basePath + '/shared-links/' + sharedId +
                '/renditions/' + renditionId + '/content' +
                '?attachment=' + (attachment ? 'true' : 'false');
        };
        return ContentApi;
    }(BaseApi));
    //# sourceMappingURL=content.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CONTENT_APIS = [ActionsApi, ActivitiesApi, AuditApi, CommentsApi, DownloadsApi, FavoritesApi, GroupsApi, NetworksApi, NodesApi, PeopleApi, PreferencesApi, ProbesApi, QueriesApi, RatingsApi, RenditionsApi, SharedlinksApi, SitesApi, TagsApi, TrashcanApi, VersionsApi, WebscriptApi, ClassesApi, CustomModelApi, UploadApi, ContentApi];

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionBodyExec = (function () {
        function ActionBodyExec(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ActionBodyExec;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditBodyUpdate = (function () {
        function AuditBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AuditBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClientBody = (function () {
        function ClientBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClientBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentBody = (function () {
        function CommentBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return CommentBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeletedNodeBodyRestore = (function () {
        function DeletedNodeBodyRestore(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return DeletedNodeBodyRestore;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DownloadBodyCreate = (function () {
        function DownloadBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return DownloadBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ErrorError = (function () {
        function ErrorError(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ErrorError;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupBodyUpdate = (function () {
        function GroupBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GroupBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.GroupMembershipBodyCreate = (function () {
        function GroupMembershipBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GroupMembershipBodyCreate;
    }());
    (function (GroupMembershipBodyCreate) {
        GroupMembershipBodyCreate.MemberTypeEnum = {
            GROUP: 'GROUP',
            PERSON: 'PERSON'
        };
    })(exports.GroupMembershipBodyCreate || (exports.GroupMembershipBodyCreate = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelError = (function () {
        function ModelError(input) {
            if (input) {
                Object.assign(this, input);
                this.error = input.error ? new ErrorError(input.error) : undefined;
            }
        }
        return ModelError;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.NodeBodyLock = (function () {
        function NodeBodyLock(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return NodeBodyLock;
    }());
    (function (NodeBodyLock) {
        NodeBodyLock.TypeEnum = {
            ALLOWOWNERCHANGES: 'ALLOW_OWNER_CHANGES',
            FULL: 'FULL'
        };
        NodeBodyLock.LifetimeEnum = {
            PERSISTENT: 'PERSISTENT',
            EPHEMERAL: 'EPHEMERAL'
        };
    })(exports.NodeBodyLock || (exports.NodeBodyLock = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PermissionsBodyUpdate = (function () {
        function PermissionsBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
                if (input.locallySet) {
                    this.locallySet = input.locallySet.map(function (item) {
                        return new exports.PermissionElement(item);
                    });
                }
            }
        }
        return PermissionsBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeBodyUpdate = (function () {
        function NodeBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
                this.permissions = input.permissions ? new PermissionsBodyUpdate(input.permissions) : undefined;
            }
        }
        return NodeBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PasswordResetBody = (function () {
        function PasswordResetBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return PasswordResetBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PersonBodyCreate = (function () {
        function PersonBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
                this.company = input.company ? new Company(input.company) : undefined;
            }
        }
        return PersonBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PersonBodyUpdate = (function () {
        function PersonBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
                this.company = input.company ? new Company(input.company) : undefined;
            }
        }
        return PersonBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.RatingBody = (function () {
        function RatingBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RatingBody;
    }());
    (function (RatingBody) {
        RatingBody.IdEnum = {
            Likes: 'likes',
            FiveStar: 'fiveStar'
        };
    })(exports.RatingBody || (exports.RatingBody = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RevertBody = (function () {
        function RevertBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RevertBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.SiteBodyUpdate = (function () {
        function SiteBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteBodyUpdate;
    }());
    (function (SiteBodyUpdate) {
        SiteBodyUpdate.VisibilityEnum = {
            PRIVATE: 'PRIVATE',
            MODERATED: 'MODERATED',
            PUBLIC: 'PUBLIC'
        };
    })(exports.SiteBodyUpdate || (exports.SiteBodyUpdate = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipApprovalBody = (function () {
        function SiteMembershipApprovalBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteMembershipApprovalBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRejectionBody = (function () {
        function SiteMembershipRejectionBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteMembershipRejectionBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TagBody = (function () {
        function TagBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return TagBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassPropertyDescription = (function () {
        function ClassPropertyDescription(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassPropertyDescription;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodesApi$1 = (function () {
        function NodesApi$1() {
        }
        NodesApi$1.prototype.init = function (alfrescoApi) {
            this.nodesApi = new NodesApi(alfrescoApi);
            this.trashcanApi = new TrashcanApi(alfrescoApi);
        };
        NodesApi$1.prototype.addNode = function (nodeId, nodeBody, opts) {
            return this.nodesApi.createNode(nodeId, nodeBody, opts);
        };
        NodesApi$1.prototype.copyNode = function (nodeId, copyBody, opts) {
            return this.nodesApi.copyNode(nodeId, copyBody, opts);
        };
        NodesApi$1.prototype.deleteNode = function (nodeId, opts) {
            return this.nodesApi.deleteNode(nodeId, opts);
        };
        NodesApi$1.prototype.getDeletedNode = function (nodeId, opts) {
            return this.trashcanApi.getDeletedNode(nodeId, opts);
        };
        NodesApi$1.prototype.getDeletedNodes = function (opts) {
            return this.trashcanApi.listDeletedNodes(opts);
        };
        NodesApi$1.prototype.getFileContent = function (nodeId, opts) {
            return this.nodesApi.getNodeContent(nodeId, opts);
        };
        NodesApi$1.prototype.getNode = function (nodeId, opts) {
            return this.nodesApi.getNode(nodeId, opts);
        };
        NodesApi$1.prototype.getNodeContent = function (nodeId, opts) {
            return this.nodesApi.getNodeContent(nodeId, opts);
        };
        NodesApi$1.prototype.getNodeChildren = function (nodeId, opts) {
            return this.nodesApi.listNodeChildren(nodeId, opts);
        };
        NodesApi$1.prototype.getParents = function (nodeId, opts) {
            return this.nodesApi.listParents(nodeId, opts);
        };
        NodesApi$1.prototype.getSecondaryChildren = function (nodeId, opts) {
            return this.nodesApi.listSecondaryChildren(nodeId, opts);
        };
        NodesApi$1.prototype.getSourceAssociations = function (nodeId, opts) {
            return this.nodesApi.listSourceAssociations(nodeId, opts);
        };
        NodesApi$1.prototype.getTargetAssociations = function (nodeId, opts) {
            return this.nodesApi.listTargetAssociations(nodeId, opts);
        };
        NodesApi$1.prototype.lockNode = function (nodeId, nodeBodyLock, opts) {
            return this.nodesApi.lockNode(nodeId, nodeBodyLock, opts);
        };
        NodesApi$1.prototype.unlockNode = function (nodeId, opts) {
            return this.nodesApi.unlockNode(nodeId, opts);
        };
        NodesApi$1.prototype.moveNode = function (nodeId, moveBody, opts) {
            return this.nodesApi.moveNode(nodeId, moveBody, opts);
        };
        NodesApi$1.prototype.purgeDeletedNode = function (nodeId) {
            return this.trashcanApi.deleteDeletedNode(nodeId);
        };
        NodesApi$1.prototype.restoreNode = function (nodeId) {
            return this.trashcanApi.restoreDeletedNode(nodeId);
        };
        NodesApi$1.prototype.updateFileContent = function (nodeId, contentBody, opts) {
            return this.nodesApi.updateNodeContent(nodeId, contentBody, opts);
        };
        NodesApi$1.prototype.updateNodeContent = function (nodeId, contentBody, opts) {
            return this.nodesApi.updateNodeContent(nodeId, contentBody, opts);
        };
        NodesApi$1.prototype.updateNode = function (nodeId, nodeBody, opts) {
            return this.nodesApi.updateNode(nodeId, nodeBody, opts);
        };
        NodesApi$1.prototype.getNodeInfo = function (nodeId, opts) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.getNode(nodeId, opts).then(function (nodeEntry) {
                    resolve(nodeEntry.entry);
                }, function (error) {
                    reject(error);
                });
            });
        };
        NodesApi$1.prototype.deleteNodePermanent = function (nodeId) {
            return this.deleteNode(nodeId, { permanent: true });
        };
        NodesApi$1.prototype.createFolder = function (name, relativePath, nodeId, opts) {
            nodeId = nodeId || '-root-';
            var nodeBody = {
                'name': name,
                'nodeType': 'cm:folder',
                'relativePath': relativePath
            };
            return this.addNode(nodeId, nodeBody, opts);
        };
        NodesApi$1.prototype.createFolderAutoRename = function (name, relativePath, nodeId, opts) {
            var optAutoRename = { autoRename: true };
            opts = opts || {};
            opts = Object.assign(opts, optAutoRename);
            return this.createFolder(name, relativePath, nodeId, opts);
        };
        return NodesApi$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NetworksApi$1 = (function () {
        function NetworksApi$1() {
        }
        NetworksApi$1.prototype.init = function (alfrescoApi) {
            this.networksApi = new NetworksApi(alfrescoApi);
        };
        NetworksApi$1.prototype.getNetwork = function (networkId, opts) {
            return this.networksApi.getNetwork(networkId, opts);
        };
        NetworksApi$1.prototype.getNetworkForPerson = function (personId, networkId, opts) {
            return this.networksApi.getNetworkForPerson(personId, networkId, opts);
        };
        NetworksApi$1.prototype.listNetworksForPerson = function (personId, opts) {
            return this.networksApi.listNetworksForPerson(personId, opts);
        };
        return NetworksApi$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RatingsApi$1 = (function () {
        function RatingsApi$1() {
        }
        RatingsApi$1.prototype.init = function (alfrescoApi) {
            this.ratingsApi = new RatingsApi(alfrescoApi);
        };
        RatingsApi$1.prototype.getRating = function (nodeId, ratingId, opts) {
            return this.ratingsApi.getRating(nodeId, ratingId, opts);
        };
        RatingsApi$1.prototype.getRatings = function (nodeId, opts) {
            return this.ratingsApi.listRatings(nodeId, opts);
        };
        RatingsApi$1.prototype.rate = function (nodeId, ratingBody) {
            return this.ratingsApi.createRating(nodeId, ratingBody);
        };
        RatingsApi$1.prototype.removeRating = function (nodeId, ratingId) {
            return this.ratingsApi.deleteRating(nodeId, ratingId);
        };
        return RatingsApi$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PeopleApi$1 = (function () {
        function PeopleApi$1() {
        }
        PeopleApi$1.prototype.init = function (alfrescoApi) {
            this.networksApi = new NetworksApi(alfrescoApi);
            this.peopleApiNew = new PeopleApi(alfrescoApi);
            this.favoritesApi = new FavoritesApi(alfrescoApi);
            this.sitesApi = new SitesApi(alfrescoApi);
            this.activitiesApi = new ActivitiesApi(alfrescoApi);
            this.preferencesApi = new PreferencesApi(alfrescoApi);
            this.groupsApi = new GroupsApi(alfrescoApi);
        };
        PeopleApi$1.prototype.addFavorite = function (personId, favoriteBody) {
            return this.favoritesApi.createFavorite(personId, favoriteBody);
        };
        PeopleApi$1.prototype.addSiteMembershipRequest = function (personId, siteMembershipBody) {
            return this.sitesApi.createSiteMembershipRequestForPerson(personId, siteMembershipBody);
        };
        PeopleApi$1.prototype.deleteFavoriteSite = function (personId, siteId) {
            return this.favoritesApi.deleteSiteFavorite(personId, siteId);
        };
        PeopleApi$1.prototype.favoriteSite = function (personId, favoriteSiteBody) {
            return this.favoritesApi.createSiteFavorite(personId, favoriteSiteBody);
        };
        PeopleApi$1.prototype.getActivities = function (personId, opts) {
            return this.activitiesApi.listActivitiesForPerson(personId, opts);
        };
        PeopleApi$1.prototype.getFavorite = function (personId, favoriteId, opts) {
            return this.favoritesApi.getFavorite(personId, favoriteId, opts);
        };
        PeopleApi$1.prototype.getFavoriteSite = function (personId, siteId, opts) {
            return this.favoritesApi.getFavoriteSite(personId, siteId, opts);
        };
        PeopleApi$1.prototype.getFavoriteSites = function (personId, opts) {
            return this.favoritesApi.listFavoriteSitesForPerson(personId, opts);
        };
        PeopleApi$1.prototype.getFavorites = function (personId, opts) {
            return this.favoritesApi.listFavorites(personId, opts);
        };
        PeopleApi$1.prototype.getPerson = function (personId, opts) {
            return this.peopleApiNew.getPerson(personId, opts);
        };
        PeopleApi$1.prototype.getPersons = function (opts) {
            return this.peopleApiNew.listPeople(opts);
        };
        PeopleApi$1.prototype.addPerson = function (person) {
            return this.peopleApiNew.createPerson(person);
        };
        PeopleApi$1.prototype.updatePerson = function (personId, personBodyUpdate, opts) {
            return this.peopleApiNew.updatePerson(personId, personBodyUpdate, opts);
        };
        PeopleApi$1.prototype.getPersonNetwork = function (personId, networkId, opts) {
            return this.networksApi.getNetworkForPerson(personId, networkId, opts);
        };
        PeopleApi$1.prototype.getPersonNetworks = function (personId, opts) {
            return this.networksApi.listNetworksForPerson(personId, opts);
        };
        PeopleApi$1.prototype.getPreference = function (personId, preferenceName, opts) {
            return this.preferencesApi.getPreference(personId, preferenceName, opts);
        };
        PeopleApi$1.prototype.getPreferences = function (personId, opts) {
            return this.preferencesApi.listPreferences(personId, opts);
        };
        PeopleApi$1.prototype.getSiteMembership = function (personId, opts) {
            return this.sitesApi.listSiteMembershipsForPerson(personId, opts);
        };
        PeopleApi$1.prototype.getGroupsMembership = function (personId, opts) {
            return this.groupsApi.listGroupMembershipsForPerson(personId, opts);
        };
        PeopleApi$1.prototype.getSiteMembershipRequest = function (personId, siteId, opts) {
            return this.sitesApi.getSiteMembershipRequestForPerson(personId, siteId, opts);
        };
        PeopleApi$1.prototype.getSiteMembershipRequests = function (personId, opts) {
            return this.sitesApi.listSiteMembershipRequestsForPerson(personId, opts);
        };
        PeopleApi$1.prototype.removeFavoriteSite = function (personId, favoriteId) {
            return this.favoritesApi.deleteSiteFavorite(personId, favoriteId);
        };
        PeopleApi$1.prototype.listSiteMembershipsForPerson = function (personId, opts) {
            return this.sitesApi.listSiteMembershipsForPerson(personId, opts);
        };
        PeopleApi$1.prototype.removeSiteMembershipRequest = function (personId, siteId) {
            return this.sitesApi.deleteSiteMembershipRequestForPerson(personId, siteId);
        };
        PeopleApi$1.prototype.updateSiteMembershipRequest = function (personId, siteId, siteMembershipBody) {
            return this.sitesApi.updateSiteMembershipRequestForPerson(personId, siteId, siteMembershipBody);
        };
        return PeopleApi$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RenditionsApi$1 = (function () {
        function RenditionsApi$1() {
        }
        RenditionsApi$1.prototype.init = function (alfrescoApi) {
            this.renditionsApi = new RenditionsApi(alfrescoApi);
            this.sharedlinksApi = new SharedlinksApi(alfrescoApi);
        };
        RenditionsApi$1.prototype.createRendition = function (nodeId, renditionBody) {
            return this.renditionsApi.createRendition(nodeId, renditionBody);
        };
        RenditionsApi$1.prototype.getRendition = function (nodeId, renditionId) {
            return this.renditionsApi.getRendition(nodeId, renditionId);
        };
        RenditionsApi$1.prototype.getRenditionContent = function (nodeId, renditionId, opts) {
            return this.renditionsApi.getRenditionContent(nodeId, renditionId, opts);
        };
        RenditionsApi$1.prototype.getRenditions = function (nodeId) {
            return this.renditionsApi.listRenditions(nodeId);
        };
        RenditionsApi$1.prototype.getSharedLinkRenditionContent = function (sharedId, renditionId, opts) {
            return this.sharedlinksApi.getSharedLinkRenditionContent(sharedId, renditionId, opts);
        };
        RenditionsApi$1.prototype.getSharedLinkRenditions = function (sharedId) {
            return this.sharedlinksApi.listSharedLinkRenditions(sharedId);
        };
        RenditionsApi$1.prototype.getSharedLinkRendition = function (sharedId, renditionId) {
            return this.sharedlinksApi.getSharedLinkRendition(sharedId, renditionId);
        };
        return RenditionsApi$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var QueriesApi$1 = (function (_super) {
        __extends(QueriesApi, _super);
        function QueriesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        QueriesApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.contentClient;
        };
        return QueriesApi;
    }(QueriesApi));
    //# sourceMappingURL=queriesApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SharedlinksApi$1 = (function () {
        function SharedlinksApi$1() {
        }
        SharedlinksApi$1.prototype.init = function (alfrescoApi) {
            this.sharedlinksApi = new SharedlinksApi(alfrescoApi);
        };
        SharedlinksApi$1.prototype.addSharedLink = function (sharedLinkBody, opts) {
            return this.sharedlinksApi.createSharedLink(sharedLinkBody, opts);
        };
        SharedlinksApi$1.prototype.deleteSharedLink = function (sharedId) {
            return this.sharedlinksApi.deleteSharedLink(sharedId);
        };
        SharedlinksApi$1.prototype.emailSharedLink = function (sharedId, emailSharedLinkBody) {
            return this.sharedlinksApi.emailSharedLink(sharedId, emailSharedLinkBody);
        };
        SharedlinksApi$1.prototype.findSharedLinks = function (opts) {
            return this.sharedlinksApi.listSharedLinks(opts);
        };
        SharedlinksApi$1.prototype.getSharedLink = function (sharedId, opts) {
            return this.sharedlinksApi.getSharedLink(sharedId, opts);
        };
        SharedlinksApi$1.prototype.getSharedLinkContent = function (sharedId, opts) {
            return this.sharedlinksApi.getSharedLinkContent(sharedId, opts);
        };
        SharedlinksApi$1.prototype.getSharedLinkRenditionContent = function (sharedId, renditionId, opts) {
            return this.sharedlinksApi.getSharedLinkRenditionContent(sharedId, renditionId, opts);
        };
        SharedlinksApi$1.prototype.getSharedLinkRenditions = function (sharedId) {
            return this.sharedlinksApi.listSharedLinkRenditions(sharedId);
        };
        SharedlinksApi$1.prototype.getSharedLinkRendition = function (sharedId, renditionId) {
            return this.sharedlinksApi.getSharedLinkRendition(sharedId, renditionId);
        };
        return SharedlinksApi$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SitesApi$1 = (function () {
        function SitesApi$1() {
        }
        SitesApi$1.prototype.init = function (alfrescoApi) {
            this.sitesApi = new SitesApi(alfrescoApi);
        };
        SitesApi$1.prototype.addSiteMember = function (siteId, siteMemberBody) {
            return this.sitesApi.createSiteMembership(siteId, siteMemberBody);
        };
        SitesApi$1.prototype.createSite = function (siteBody, opts) {
            return this.sitesApi.createSite(siteBody, opts);
        };
        SitesApi$1.prototype.updateSite = function (siteId, siteBody, opts) {
            return this.sitesApi.updateSite(siteId, siteBody, opts);
        };
        SitesApi$1.prototype.deleteSite = function (siteId, opts) {
            return this.sitesApi.deleteSite(siteId, opts);
        };
        SitesApi$1.prototype.getSite = function (siteId, opts) {
            return this.sitesApi.getSite(siteId, opts);
        };
        SitesApi$1.prototype.getSiteContainer = function (siteId, containerId, opts) {
            return this.sitesApi.getSiteContainer(siteId, containerId, opts);
        };
        SitesApi$1.prototype.getSiteContainers = function (siteId, opts) {
            return this.sitesApi.listSiteContainers(siteId, opts);
        };
        SitesApi$1.prototype.getSiteMember = function (siteId, personId, opts) {
            return this.sitesApi.getSiteMembership(siteId, personId, opts);
        };
        SitesApi$1.prototype.getSiteMembers = function (siteId, opts) {
            return this.sitesApi.listSiteMemberships(siteId, opts);
        };
        SitesApi$1.prototype.getSites = function (opts) {
            return this.sitesApi.listSites(opts);
        };
        SitesApi$1.prototype.removeSiteMember = function (siteId, personId) {
            return this.sitesApi.deleteSiteMembership(siteId, personId);
        };
        SitesApi$1.prototype.updateSiteMember = function (siteId, personId, siteMemberRoleBody) {
            return this.sitesApi.updateSiteMembership(siteId, personId, siteMemberRoleBody);
        };
        return SitesApi$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TagsApi$1 = (function () {
        function TagsApi$1() {
        }
        TagsApi$1.prototype.init = function (alfrescoApi) {
            this.tagsApi = new TagsApi(alfrescoApi);
        };
        TagsApi$1.prototype.addTag = function (nodeId, tagBody) {
            return this.tagsApi.createTagForNode(nodeId, tagBody);
        };
        TagsApi$1.prototype.getNodeTags = function (nodeId, opts) {
            return this.tagsApi.listTagsForNode(nodeId, opts);
        };
        TagsApi$1.prototype.getTag = function (tagId, opts) {
            return this.tagsApi.getTag(tagId, opts);
        };
        TagsApi$1.prototype.getTags = function (opts) {
            return this.tagsApi.listTags(opts);
        };
        TagsApi$1.prototype.removeTag = function (nodeId, tagId) {
            return this.tagsApi.deleteTagFromNode(nodeId, tagId);
        };
        TagsApi$1.prototype.updateTag = function (tagId, tagBody) {
            return this.tagsApi.updateTag(tagId, tagBody);
        };
        return TagsApi$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var WebscriptApi$1 = (function (_super) {
        __extends(WebscriptApi, _super);
        function WebscriptApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        WebscriptApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.contentClient;
        };
        return WebscriptApi;
    }(WebscriptApi));
    //# sourceMappingURL=webscriptApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DownloadsApi$1 = (function (_super) {
        __extends(DownloadsApi, _super);
        function DownloadsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DownloadsApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.contentClient;
        };
        return DownloadsApi;
    }(DownloadsApi));
    //# sourceMappingURL=downloadsApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var VersionsApi$1 = (function (_super) {
        __extends(VersionsApi, _super);
        function VersionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        VersionsApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.contentClient;
        };
        return VersionsApi;
    }(VersionsApi));
    //# sourceMappingURL=versionsApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassesApi$1 = (function (_super) {
        __extends(ClassesApi, _super);
        function ClassesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ClassesApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.contentPrivateClient;
        };
        return ClassesApi;
    }(ClassesApi));
    //# sourceMappingURL=classesApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupsApi$1 = (function () {
        function GroupsApi$1() {
        }
        GroupsApi$1.prototype.init = function (alfrescoApi) {
            this.groupsApi = new GroupsApi(alfrescoApi);
        };
        GroupsApi$1.prototype.createGroup = function (groupBody, opts) {
            return this.groupsApi.createGroup(groupBody, opts);
        };
        GroupsApi$1.prototype.getGroups = function (opts) {
            return this.groupsApi.listGroups(opts);
        };
        GroupsApi$1.prototype.deleteGroup = function (groupId, opts) {
            return this.groupsApi.deleteGroup(groupId, opts);
        };
        GroupsApi$1.prototype.getGroup = function (groupId, opts) {
            return this.groupsApi.getGroup(groupId, opts);
        };
        GroupsApi$1.prototype.updateGroup = function (groupId, groupBody, opts) {
            return this.groupsApi.updateGroup(groupId, groupBody, opts);
        };
        GroupsApi$1.prototype.getGroupMembers = function (groupId, opts) {
            return this.groupsApi.listGroupMemberships(groupId, opts);
        };
        GroupsApi$1.prototype.addGroupMember = function (groupId, groupMemberBody, opts) {
            return this.groupsApi.createGroupMembership(groupId, groupMemberBody, opts);
        };
        GroupsApi$1.prototype.deleteGroupMember = function (groupId, groupMemberId) {
            return this.groupsApi.deleteGroupMembership(groupId, groupMemberId);
        };
        return GroupsApi$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CustomModelApi$1 = (function (_super) {
        __extends(CustomModelApi, _super);
        function CustomModelApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CustomModelApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.contentPrivateClient;
        };
        return CustomModelApi;
    }(CustomModelApi));
    //# sourceMappingURL=customModelApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CONTENT_LEGACY_APIS = {
        ChangesApi: ChangesApi,
        ChildAssociationsApi: ChildAssociationsApi,
        FavoritesApi: FavoritesApi$1,
        NetworksApi: NetworksApi$1,
        NodesApi: NodesApi$1,
        CommentsApi: CommentsApi$1,
        PeopleApi: PeopleApi$1,
        RatingsApi: RatingsApi$1,
        RenditionsApi: RenditionsApi$1,
        QueriesApi: QueriesApi$1,
        SharedlinksApi: SharedlinksApi$1,
        SitesApi: SitesApi$1,
        TagsApi: TagsApi$1,
        WebscriptApi: WebscriptApi$1,
        DownloadsApi: DownloadsApi$1,
        VersionsApi: VersionsApi$1,
        ClassesApi: ClassesApi$1,
        GroupsApi: GroupsApi$1,
        CustomModelApi: CustomModelApi$1
    };
    (function (Core) {
        var ChangesApi$1 = (function (_super) {
            __extends(ChangesApi, _super);
            function ChangesApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ChangesApi;
        }(ChangesApi));
        Core.ChangesApi = ChangesApi$1;
        var ChildAssociationsApi$1 = (function (_super) {
            __extends(ChildAssociationsApi, _super);
            function ChildAssociationsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ChildAssociationsApi;
        }(ChildAssociationsApi));
        Core.ChildAssociationsApi = ChildAssociationsApi$1;
        var FavoritesApi = (function (_super) {
            __extends(FavoritesApi, _super);
            function FavoritesApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return FavoritesApi;
        }(FavoritesApi$1));
        Core.FavoritesApi = FavoritesApi;
        var NetworksApi = (function (_super) {
            __extends(NetworksApi, _super);
            function NetworksApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return NetworksApi;
        }(NetworksApi$1));
        Core.NetworksApi = NetworksApi;
        var NodesApi = (function (_super) {
            __extends(NodesApi, _super);
            function NodesApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return NodesApi;
        }(NodesApi$1));
        Core.NodesApi = NodesApi;
        var CommentsApi = (function (_super) {
            __extends(CommentsApi, _super);
            function CommentsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CommentsApi;
        }(CommentsApi$1));
        Core.CommentsApi = CommentsApi;
        var PeopleApi = (function (_super) {
            __extends(PeopleApi, _super);
            function PeopleApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PeopleApi;
        }(PeopleApi$1));
        Core.PeopleApi = PeopleApi;
        var RatingsApi = (function (_super) {
            __extends(RatingsApi, _super);
            function RatingsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return RatingsApi;
        }(RatingsApi$1));
        Core.RatingsApi = RatingsApi;
        var RenditionsApi = (function (_super) {
            __extends(RenditionsApi, _super);
            function RenditionsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return RenditionsApi;
        }(RenditionsApi$1));
        Core.RenditionsApi = RenditionsApi;
        var QueriesApi = (function (_super) {
            __extends(QueriesApi, _super);
            function QueriesApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return QueriesApi;
        }(QueriesApi$1));
        Core.QueriesApi = QueriesApi;
        var SharedlinksApi = (function (_super) {
            __extends(SharedlinksApi, _super);
            function SharedlinksApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SharedlinksApi;
        }(SharedlinksApi$1));
        Core.SharedlinksApi = SharedlinksApi;
        var SitesApi = (function (_super) {
            __extends(SitesApi, _super);
            function SitesApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SitesApi;
        }(SitesApi$1));
        Core.SitesApi = SitesApi;
        var TagsApi = (function (_super) {
            __extends(TagsApi, _super);
            function TagsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TagsApi;
        }(TagsApi$1));
        Core.TagsApi = TagsApi;
        var WebscriptApi = (function (_super) {
            __extends(WebscriptApi, _super);
            function WebscriptApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return WebscriptApi;
        }(WebscriptApi$1));
        Core.WebscriptApi = WebscriptApi;
        var DownloadsApi = (function (_super) {
            __extends(DownloadsApi, _super);
            function DownloadsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return DownloadsApi;
        }(DownloadsApi$1));
        Core.DownloadsApi = DownloadsApi;
        var VersionsApi = (function (_super) {
            __extends(VersionsApi, _super);
            function VersionsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return VersionsApi;
        }(VersionsApi$1));
        Core.VersionsApi = VersionsApi;
        var ClassesApi = (function (_super) {
            __extends(ClassesApi, _super);
            function ClassesApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ClassesApi;
        }(ClassesApi$1));
        Core.ClassesApi = ClassesApi;
        var GroupsApi = (function (_super) {
            __extends(GroupsApi, _super);
            function GroupsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GroupsApi;
        }(GroupsApi$1));
        Core.GroupsApi = GroupsApi;
        var CustomModelApi = (function (_super) {
            __extends(CustomModelApi, _super);
            function CustomModelApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CustomModelApi;
        }(CustomModelApi$1));
        Core.CustomModelApi = CustomModelApi;
    })(exports.Core || (exports.Core = {}));
    //# sourceMappingURL=index.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BaseApi$1 = (function () {
        function BaseApi(alfrescoApi) {
            if (alfrescoApi) {
                this.apiClient = alfrescoApi.processClient;
            }
        }
        BaseApi.prototype.errorMessage = function (param, methodName) {
            return "Missing param " + param + " in " + methodName;
        };
        return BaseApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AboutApi = (function (_super) {
        __extends(AboutApi, _super);
        function AboutApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AboutApi.prototype.getAppVersion = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/app-version', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return AboutApi;
    }(BaseApi$1));
    //# sourceMappingURL=about.api.js.map

    var AboutApi$1 = (function (_super) {
        __extends(AboutApi, _super);
        function AboutApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AboutApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return AboutApi;
    }(AboutApi));
    //# sourceMappingURL=AboutApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AlfrescoContentRepresentation = (function () {
        function AlfrescoContentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AlfrescoContentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationAlfrescoContentRepresentation = (function () {
        function ResultListDataRepresentationAlfrescoContentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new AlfrescoContentRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationAlfrescoContentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AlfrescoNetworkRepresenation = (function () {
        function AlfrescoNetworkRepresenation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AlfrescoNetworkRepresenation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationAlfrescoNetworkRepresenation = (function () {
        function ResultListDataRepresentationAlfrescoNetworkRepresenation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new AlfrescoNetworkRepresenation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationAlfrescoNetworkRepresenation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AlfrescoSiteRepresenation = (function () {
        function AlfrescoSiteRepresenation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AlfrescoSiteRepresenation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationAlfrescoSiteRepresenation = (function () {
        function ResultListDataRepresentationAlfrescoSiteRepresenation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new AlfrescoSiteRepresenation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationAlfrescoSiteRepresenation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationAlfrescoCloudApi = (function (_super) {
        __extends(IntegrationAlfrescoCloudApi, _super);
        function IntegrationAlfrescoCloudApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationAlfrescoCloudApi.prototype.confirmAuthorisation = function (code) {
            throwIfNotDefined(code, 'code');
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'code': code
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['text/html'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/confirm-auth-request', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        IntegrationAlfrescoCloudApi.prototype.getAllNetworks = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/networks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoNetworkRepresenation);
        };
        IntegrationAlfrescoCloudApi.prototype.getAllSites = function (networkId) {
            throwIfNotDefined(networkId, 'networkId');
            var postBody = null;
            var pathParams = {
                'networkId': networkId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/networks/{networkId}/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoSiteRepresenation);
        };
        IntegrationAlfrescoCloudApi.prototype.getContentInFolderPath = function (networkId, opts) {
            throwIfNotDefined(networkId, 'networkId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'networkId': networkId
            };
            var queryParams = {
                'siteId': opts['siteId'],
                'path': opts['path']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/networks/{networkId}/sites/{siteId}/folderpath/{folderPath}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);
        };
        IntegrationAlfrescoCloudApi.prototype.getContentInFolder = function (networkId, folderId) {
            throwIfNotDefined(networkId, 'networkId');
            throwIfNotDefined(folderId, 'folderId');
            var postBody = null;
            var pathParams = {
                'networkId': networkId, 'folderId': folderId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/networks/{networkId}/folders/{folderId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);
        };
        IntegrationAlfrescoCloudApi.prototype.getContentInSite = function (networkId, siteId) {
            throwIfNotDefined(networkId, 'networkId');
            throwIfNotDefined(siteId, 'siteId');
            var postBody = null;
            var pathParams = {
                'networkId': networkId, 'siteId': siteId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/networks/{networkId}/sites/{siteId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);
        };
        return IntegrationAlfrescoCloudApi;
    }(BaseApi$1));
    //# sourceMappingURL=integrationAlfrescoCloud.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AlfrescoEndpointRepresentation = (function () {
        function AlfrescoEndpointRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                this.lastUpdated = input.lastUpdated ? DateAlfresco.parseDate(input.lastUpdated) : undefined;
            }
        }
        return AlfrescoEndpointRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationAlfrescoEndpointRepresentation = (function () {
        function ResultListDataRepresentationAlfrescoEndpointRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new AlfrescoEndpointRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationAlfrescoEndpointRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationAlfrescoOnPremiseApi = (function (_super) {
        __extends(IntegrationAlfrescoOnPremiseApi, _super);
        function IntegrationAlfrescoOnPremiseApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationAlfrescoOnPremiseApi.prototype.getAllSites = function (repositoryId) {
            throwIfNotDefined(repositoryId, 'networkId');
            var postBody = null;
            var pathParams = {
                'repositoryId': repositoryId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco/{repositoryId}/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoSiteRepresenation);
        };
        IntegrationAlfrescoOnPremiseApi.prototype.getContentInFolderPath = function (repositoryId, siteId, folderPath) {
            throwIfNotDefined(repositoryId, 'networkId');
            throwIfNotDefined(siteId, 'siteId');
            throwIfNotDefined(folderPath, 'folderPath');
            var postBody = null;
            var pathParams = {
                'repositoryId': repositoryId, 'siteId': siteId, 'folderPath': folderPath
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/rest/integration/alfresco/{repositoryId}/sites/{siteId}/folderpath/{folderPath}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);
        };
        IntegrationAlfrescoOnPremiseApi.prototype.getContentInFolder = function (repositoryId, folderId) {
            throwIfNotDefined(repositoryId, 'networkId');
            throwIfNotDefined(folderId, 'folderId');
            var postBody = null;
            var pathParams = {
                'repositoryId': repositoryId, 'folderId': folderId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco/{repositoryId}/folders/{folderId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);
        };
        IntegrationAlfrescoOnPremiseApi.prototype.getContentInSite = function (repositoryId, siteId) {
            throwIfNotDefined(repositoryId, 'networkId');
            throwIfNotDefined(siteId, 'siteId');
            var postBody = null;
            var pathParams = {
                'repositoryId': repositoryId, 'siteId': siteId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco/{repositoryId}/sites/{siteId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);
        };
        IntegrationAlfrescoOnPremiseApi.prototype.getRepositories = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'tenantId': opts['tenantId'],
                'includeAccounts': opts['includeAccounts']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/profile/accounts/alfresco', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoEndpointRepresentation);
        };
        return IntegrationAlfrescoOnPremiseApi;
    }(BaseApi$1));
    //# sourceMappingURL=integrationAlfrescoOnPremise.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AlfrescoApiActiviti = (function () {
        function AlfrescoApiActiviti() {
        }
        AlfrescoApiActiviti.prototype.init = function (alfrescoApi) {
            this.integrationAlfrescoCloudApi = new IntegrationAlfrescoCloudApi(alfrescoApi);
            this.IntegrationAlfrescoOnPremiseApi = new IntegrationAlfrescoOnPremiseApi(alfrescoApi);
        };
        AlfrescoApiActiviti.prototype.confirmAuthorisation = function (code) {
            return this.integrationAlfrescoCloudApi.confirmAuthorisation(code);
        };
        AlfrescoApiActiviti.prototype.getAllNetworks = function () {
            return this.integrationAlfrescoCloudApi.getAllNetworks();
        };
        AlfrescoApiActiviti.prototype.getAllSites = function (networkId) {
            return this.integrationAlfrescoCloudApi.getAllSites(networkId);
        };
        AlfrescoApiActiviti.prototype.getAllSitesByRepositoryId = function (repositoryId) {
            return this.IntegrationAlfrescoOnPremiseApi.getAllSites(repositoryId);
        };
        AlfrescoApiActiviti.prototype.getContentInFolder = function (networkId, folderId) {
            return this.integrationAlfrescoCloudApi.getContentInFolder(networkId, folderId);
        };
        AlfrescoApiActiviti.prototype.getContentInFolderByRepositoryId = function (repositoryId, folderId) {
            return this.IntegrationAlfrescoOnPremiseApi.getContentInFolder(repositoryId, folderId);
        };
        AlfrescoApiActiviti.prototype.getContentInSite = function (networkId, siteId) {
            return this.integrationAlfrescoCloudApi.getContentInSite(networkId, siteId);
        };
        AlfrescoApiActiviti.prototype.getContentInSiteByRepositoryId = function (repositoryId, siteId) {
            return this.IntegrationAlfrescoOnPremiseApi.getContentInSite(repositoryId, siteId);
        };
        AlfrescoApiActiviti.prototype.getRepositories = function (opts) {
            return this.IntegrationAlfrescoOnPremiseApi.getRepositories(opts);
        };
        return AlfrescoApiActiviti;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EndpointBasicAuthRepresentation = (function () {
        function EndpointBasicAuthRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                this.lastUpdated = input.lastUpdated ? DateAlfresco.parseDate(input.lastUpdated) : undefined;
            }
        }
        return EndpointBasicAuthRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EndpointRequestHeaderRepresentation = (function () {
        function EndpointRequestHeaderRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return EndpointRequestHeaderRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EndpointConfigurationRepresentation = (function () {
        function EndpointConfigurationRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.requestHeaders) {
                    this.requestHeaders = input.requestHeaders.map(function (item) {
                        return new EndpointRequestHeaderRepresentation(item);
                    });
                }
            }
        }
        return EndpointConfigurationRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AdminEndpointsApi = (function (_super) {
        __extends(AdminEndpointsApi, _super);
        function AdminEndpointsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AdminEndpointsApi.prototype.createBasicAuthConfiguration = function (createRepresentation) {
            throwIfNotDefined(createRepresentation, 'createRepresentation');
            var postBody = createRepresentation;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/basic-auths', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointBasicAuthRepresentation);
        };
        AdminEndpointsApi.prototype.createEndpointConfiguration = function (representation) {
            throwIfNotDefined(representation, 'representation');
            var postBody = representation;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/endpoints', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointConfigurationRepresentation);
        };
        AdminEndpointsApi.prototype.getBasicAuthConfiguration = function (basicAuthId, tenantId) {
            throwIfNotDefined(basicAuthId, 'basicAuthId');
            throwIfNotDefined(tenantId, 'tenantId');
            var postBody = null;
            var pathParams = {
                'basicAuthId': basicAuthId
            };
            var queryParams = {
                'tenantId': tenantId
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/basic-auths/{basicAuthId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointBasicAuthRepresentation);
        };
        AdminEndpointsApi.prototype.getBasicAuthConfigurations = function (tenantId) {
            throwIfNotDefined(tenantId, 'tenantId');
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'tenantId': tenantId
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/basic-auths', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointBasicAuthRepresentation);
        };
        AdminEndpointsApi.prototype.getEndpointConfiguration = function (endpointConfigurationId, tenantId) {
            throwIfNotDefined(endpointConfigurationId, 'endpointConfigurationId');
            throwIfNotDefined(tenantId, 'tenantId');
            var postBody = null;
            var pathParams = {
                'endpointConfigurationId': endpointConfigurationId
            };
            var queryParams = {
                'tenantId': tenantId
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/endpoints/{endpointConfigurationId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointConfigurationRepresentation);
        };
        AdminEndpointsApi.prototype.getEndpointConfigurations = function (tenantId) {
            throwIfNotDefined(tenantId, 'tenantId');
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'tenantId': tenantId
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/endpoints', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointConfigurationRepresentation);
        };
        AdminEndpointsApi.prototype.removeBasicAuthConfiguration = function (basicAuthId, tenantId) {
            throwIfNotDefined(basicAuthId, 'basicAuthId');
            throwIfNotDefined(tenantId, 'tenantId');
            var postBody = null;
            var pathParams = {
                'basicAuthId': basicAuthId
            };
            var queryParams = {
                'tenantId': tenantId
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/basic-auths/{basicAuthId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminEndpointsApi.prototype.removeEndpointConfiguration = function (endpointConfigurationId, tenantId) {
            throwIfNotDefined(endpointConfigurationId, 'endpointConfigurationId');
            throwIfNotDefined(tenantId, 'tenantId');
            var postBody = null;
            var pathParams = {
                'endpointConfigurationId': endpointConfigurationId
            };
            var queryParams = {
                'tenantId': tenantId
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/endpoints/{endpointConfigurationId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminEndpointsApi.prototype.updateBasicAuthConfiguration = function (basicAuthId, createRepresentation) {
            throwIfNotDefined(basicAuthId, 'basicAuthId');
            throwIfNotDefined(createRepresentation, 'createRepresentation');
            var postBody = createRepresentation;
            var pathParams = {
                'basicAuthId': basicAuthId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/basic-auths/{basicAuthId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointBasicAuthRepresentation);
        };
        AdminEndpointsApi.prototype.updateEndpointConfiguration = function (endpointConfigurationId, representation) {
            throwIfNotDefined(endpointConfigurationId, 'endpointConfigurationId');
            throwIfNotDefined(representation, 'representation');
            var postBody = representation;
            var pathParams = {
                'endpointConfigurationId': endpointConfigurationId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/endpoints/{endpointConfigurationId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointConfigurationRepresentation);
        };
        return AdminEndpointsApi;
    }(BaseApi$1));
    //# sourceMappingURL=adminEndpoints.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AdminEndpointsApi$1 = (function (_super) {
        __extends(AdminEndpointsApi, _super);
        function AdminEndpointsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AdminEndpointsApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        AdminEndpointsApi.prototype.removeBasicAuthonfiguration = function (basicAuthId, tenantId) {
            return this.removeBasicAuthConfiguration(basicAuthId, tenantId);
        };
        return AdminEndpointsApi;
    }(AdminEndpointsApi));
    //# sourceMappingURL=AdminEndpointsApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AbstractGroupRepresentation = (function () {
        function AbstractGroupRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AbstractGroupRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupCapabilityRepresentation = (function () {
        function GroupCapabilityRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GroupCapabilityRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var LightAppRepresentation = (function () {
        function LightAppRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return LightAppRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserRepresentationGroup = (function () {
        function UserRepresentationGroup(input) {
            if (input) {
                Object.assign(this, input);
                if (input.apps) {
                    this.apps = input.apps.map(function (item) {
                        return new LightAppRepresentation(item);
                    });
                }
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                this.lastUpdate = input.lastUpdate ? DateAlfresco.parseDate(input.lastUpdate) : undefined;
                this.latestSyncTimeStamp = input.latestSyncTimeStamp ? DateAlfresco.parseDate(input.latestSyncTimeStamp) : undefined;
            }
        }
        return UserRepresentationGroup;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupRepresentation = (function () {
        function GroupRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.capabilities) {
                    this.capabilities = input.capabilities.map(function (item) {
                        return new GroupCapabilityRepresentation(item);
                    });
                }
                if (input.groups) {
                    this.groups = input.groups.map(function (item) {
                        return new GroupRepresentation(item);
                    });
                }
                this.lastSyncTimeStamp = input.lastSyncTimeStamp ? DateAlfresco.parseDate(input.lastSyncTimeStamp) : undefined;
                this.manager = input.manager ? new UserRepresentationGroup(input.manager) : undefined;
                if (input.users) {
                    this.users = input.users.map(function (item) {
                        return new UserRepresentationGroup(item);
                    });
                }
            }
        }
        return GroupRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var LightGroupRepresentation = (function () {
        function LightGroupRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.groups) {
                    this.groups = input.groups.map(function (item) {
                        return new LightGroupRepresentation(item);
                    });
                }
            }
        }
        return LightGroupRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var LightUserRepresentation = (function () {
        function LightUserRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return LightUserRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationLightUserRepresentation = (function () {
        function ResultListDataRepresentationLightUserRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new LightUserRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationLightUserRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AdminGroupsApi = (function (_super) {
        __extends(AdminGroupsApi, _super);
        function AdminGroupsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AdminGroupsApi.prototype.activate = function (groupId) {
            throwIfNotDefined(groupId, 'groupId');
            var postBody = null;
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/action/activate', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.addAllUsersToGroup = function (groupId) {
            throwIfNotDefined(groupId, 'groupId');
            var postBody = null;
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/add-all-users', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.addGroupCapabilities = function (groupId, addGroupCapabilitiesRepresentation) {
            throwIfNotDefined(groupId, 'groupId');
            throwIfNotDefined(addGroupCapabilitiesRepresentation, 'addGroupCapabilitiesRepresentation');
            var postBody = addGroupCapabilitiesRepresentation;
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/capabilities', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.addGroupMember = function (groupId, userId) {
            throwIfNotDefined(groupId, 'groupId');
            throwIfNotDefined(userId, 'userId');
            var postBody = null;
            var pathParams = {
                'groupId': groupId, 'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/members/{userId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.addRelatedGroup = function (groupId, relatedGroupId, type) {
            throwIfNotDefined(groupId, 'groupId');
            throwIfNotDefined(relatedGroupId, 'relatedGroupId');
            throwIfNotDefined(type, 'type');
            var postBody = null;
            var pathParams = {
                'groupId': groupId, 'relatedGroupId': relatedGroupId
            };
            var queryParams = {
                'type': type
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/related-groups/{relatedGroupId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.createNewGroup = function (groupRepresentation) {
            throwIfNotDefined(groupRepresentation, 'groupRepresentation');
            var postBody = groupRepresentation;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupRepresentation);
        };
        AdminGroupsApi.prototype.deleteGroupCapability = function (groupId, groupCapabilityId) {
            throwIfNotDefined(groupId, 'groupId');
            throwIfNotDefined(groupCapabilityId, 'groupCapabilityId');
            var postBody = null;
            var pathParams = {
                'groupId': groupId, 'groupCapabilityId': groupCapabilityId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/capabilities/{groupCapabilityId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.deleteGroupMember = function (groupId, userId) {
            throwIfNotDefined(groupId, 'groupId');
            throwIfNotDefined(userId, 'userId');
            var postBody = null;
            var pathParams = {
                'groupId': groupId, 'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/members/{userId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.deleteGroup = function (groupId) {
            throwIfNotDefined(groupId, 'groupId');
            var postBody = null;
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.deleteRelatedGroup = function (groupId, relatedGroupId) {
            throwIfNotDefined(groupId, 'groupId');
            throwIfNotDefined(relatedGroupId, 'relatedGroupId');
            var postBody = null;
            var pathParams = {
                'groupId': groupId, 'relatedGroupId': relatedGroupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/related-groups/{relatedGroupId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.getCapabilities = function (groupId) {
            throwIfNotDefined(groupId, 'groupId');
            var postBody = null;
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/potential-capabilities', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.getGroupUsers = function (groupId, opts) {
            throwIfNotDefined(groupId, 'groupId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {
                'filter': opts['filter'],
                'page': opts['page'],
                'pageSize': opts['pageSize']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/users', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationLightUserRepresentation);
        };
        AdminGroupsApi.prototype.getGroup = function (groupId, opts) {
            throwIfNotDefined(groupId, 'groupId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {
                'includeAllUsers': opts['includeAllUsers'],
                'summary': opts['summary']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AbstractGroupRepresentation);
        };
        AdminGroupsApi.prototype.getGroups = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'tenantId': opts['tenantId'],
                'functional': opts['functional'],
                'summary': opts['summary']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, LightGroupRepresentation);
        };
        AdminGroupsApi.prototype.getRelatedGroups = function (groupId) {
            throwIfNotDefined(groupId, 'groupId');
            var postBody = null;
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/related-groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, LightGroupRepresentation);
        };
        AdminGroupsApi.prototype.updateGroup = function (groupId, groupRepresentation) {
            throwIfNotDefined(groupId, 'groupId');
            throwIfNotDefined(groupRepresentation, 'groupRepresentation');
            var postBody = groupRepresentation;
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupRepresentation);
        };
        return AdminGroupsApi;
    }(BaseApi$1));
    //# sourceMappingURL=adminGroups.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AdminGroupsApi$1 = (function (_super) {
        __extends(AdminGroupsApi, _super);
        function AdminGroupsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AdminGroupsApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return AdminGroupsApi;
    }(AdminGroupsApi));
    //# sourceMappingURL=AdminGroupsApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ImageUploadRepresentation = (function () {
        function ImageUploadRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
            }
        }
        return ImageUploadRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var LightTenantRepresentation = (function () {
        function LightTenantRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return LightTenantRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TenantEvent = (function () {
        function TenantEvent(input) {
            if (input) {
                Object.assign(this, input);
                this.eventTime = input.eventTime ? DateAlfresco.parseDate(input.eventTime) : undefined;
            }
        }
        return TenantEvent;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TenantRepresentation = (function () {
        function TenantRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                this.lastUpdate = input.lastUpdate ? DateAlfresco.parseDate(input.lastUpdate) : undefined;
            }
        }
        return TenantRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AdminTenantsApi = (function (_super) {
        __extends(AdminTenantsApi, _super);
        function AdminTenantsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AdminTenantsApi.prototype.createTenant = function (createTenantRepresentation) {
            throwIfNotDefined(createTenantRepresentation, 'groupId');
            var postBody = createTenantRepresentation;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/tenants', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, LightTenantRepresentation);
        };
        AdminTenantsApi.prototype.deleteTenant = function (tenantId) {
            throwIfNotDefined(tenantId, 'tenantId');
            var postBody = null;
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminTenantsApi.prototype.getTenantEvents = function (tenantId) {
            throwIfNotDefined(tenantId, 'tenantId');
            var postBody = null;
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}/events', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TenantEvent);
        };
        AdminTenantsApi.prototype.getTenantLogo = function (tenantId) {
            throwIfNotDefined(tenantId, 'tenantId');
            var postBody = null;
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}/logo', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminTenantsApi.prototype.getTenant = function (tenantId) {
            throwIfNotDefined(tenantId, 'tenantId');
            var postBody = null;
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TenantRepresentation);
        };
        AdminTenantsApi.prototype.getTenants = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/tenants', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, LightTenantRepresentation);
        };
        AdminTenantsApi.prototype.update = function (tenantId, createTenantRepresentation) {
            throwIfNotDefined(tenantId, 'tenantId');
            throwIfNotDefined(createTenantRepresentation, 'createTenantRepresentation');
            var postBody = createTenantRepresentation;
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TenantRepresentation);
        };
        AdminTenantsApi.prototype.uploadTenantLogo = function (tenantId, file) {
            throwIfNotDefined(tenantId, 'tenantId');
            throwIfNotDefined(file, 'file');
            var postBody = null;
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {
                'file': file
            };
            var contentTypes = ['multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}/logo', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ImageUploadRepresentation);
        };
        return AdminTenantsApi;
    }(BaseApi$1));
    //# sourceMappingURL=adminTenants.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AdminTenantsApi$1 = (function (_super) {
        __extends(AdminTenantsApi, _super);
        function AdminTenantsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AdminTenantsApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return AdminTenantsApi;
    }(AdminTenantsApi));
    //# sourceMappingURL=AdminTenantsApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AbstractUserRepresentation = (function () {
        function AbstractUserRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AbstractUserRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationAbstractUserRepresentation = (function () {
        function ResultListDataRepresentationAbstractUserRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new AbstractUserRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationAbstractUserRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserRepresentation = (function () {
        function UserRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.apps) {
                    this.apps = input.apps.map(function (item) {
                        return new LightAppRepresentation(item);
                    });
                }
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                if (input.groups) {
                    this.groups = input.groups.map(function (item) {
                        return new GroupRepresentation(item);
                    });
                }
                this.lastUpdate = input.lastUpdate ? DateAlfresco.parseDate(input.lastUpdate) : undefined;
                this.latestSyncTimeStamp = input.latestSyncTimeStamp ? DateAlfresco.parseDate(input.latestSyncTimeStamp) : undefined;
                this.primaryGroup = input.primaryGroup ? new GroupRepresentation(input.primaryGroup) : undefined;
            }
        }
        return UserRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AdminUsersApi = (function (_super) {
        __extends(AdminUsersApi, _super);
        function AdminUsersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AdminUsersApi.prototype.bulkUpdateUsers = function (update) {
            throwIfNotDefined(update, 'update');
            var postBody = update;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/users', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminUsersApi.prototype.createNewUser = function (userRepresentation) {
            throwIfNotDefined(userRepresentation, 'userRepresentation');
            var postBody = userRepresentation;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/users', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserRepresentation);
        };
        AdminUsersApi.prototype.getUser = function (userId, opts) {
            throwIfNotDefined(userId, 'userId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'userId': userId
            };
            var queryParams = {
                'summary': opts['summary']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/users/{userId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AbstractUserRepresentation);
        };
        AdminUsersApi.prototype.getUsers = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'filter': opts['filter'],
                'status': opts['status'],
                'accountType': opts['accountType'],
                'sort': opts['sort'],
                'company': opts['company'],
                'start': opts['start'],
                'page': opts['page'],
                'size': opts['size'],
                'groupId': opts['groupId'],
                'tenantId': opts['tenantId'],
                'summary': opts['summary']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/users', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAbstractUserRepresentation);
        };
        AdminUsersApi.prototype.updateUserDetails = function (userId, userRepresentation) {
            throwIfNotDefined(userId, 'userId');
            throwIfNotDefined(userRepresentation, 'userRepresentation');
            var postBody = userRepresentation;
            var pathParams = {
                'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/users/{userId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return AdminUsersApi;
    }(BaseApi$1));
    //# sourceMappingURL=adminUsers.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AdminUsersApi$1 = (function (_super) {
        __extends(AdminUsersApi, _super);
        function AdminUsersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AdminUsersApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return AdminUsersApi;
    }(AdminUsersApi));
    //# sourceMappingURL=AdminUsersApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppDefinitionRepresentation = (function () {
        function AppDefinitionRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AppDefinitionRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppDefinitionUpdateResultRepresentation = (function () {
        function AppDefinitionUpdateResultRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.appDefinition = input.appDefinition ? new AppDefinitionRepresentation(input.appDefinition) : undefined;
            }
        }
        return AppDefinitionUpdateResultRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppDefinitionsApi = (function (_super) {
        __extends(AppDefinitionsApi, _super);
        function AppDefinitionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AppDefinitionsApi.prototype.deleteAppDefinition = function (appDefinitionId) {
            throwIfNotDefined(appDefinitionId, 'appDefinitionId');
            var postBody = null;
            var pathParams = {
                'appDefinitionId': appDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/app-definitions/{appDefinitionId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AppDefinitionsApi.prototype.exportAppDefinition = function (modelId) {
            throwIfNotDefined(modelId, 'modelId');
            var postBody = null;
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json', 'application/zip'];
            return this.apiClient.callApi('/api/enterprise/app-definitions/{modelId}/export', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AppDefinitionsApi.prototype.getAppDefinition = function (modelId) {
            throwIfNotDefined(modelId, 'modelId');
            var postBody = null;
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/app-definitions/{modelId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AppDefinitionRepresentation);
        };
        AppDefinitionsApi.prototype.importAndPublishApp = function (file) {
            throwIfNotDefined(file, 'file');
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {
                'file': file
            };
            var contentTypes = ['multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/app-definitions/publish-app', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AppDefinitionUpdateResultRepresentation);
        };
        AppDefinitionsApi.prototype.importAppDefinition = function (file, opts) {
            throwIfNotDefined(file, 'file');
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'renewIdmEntries': opts['renewIdmEntries']
            };
            var headerParams = {};
            var formParams = {
                'file': file
            };
            var contentTypes = ['multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/app-definitions/import', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AppDefinitionRepresentation);
        };
        AppDefinitionsApi.prototype.publishAppDefinition = function (modelId, publishModel) {
            throwIfNotDefined(modelId, 'modelId');
            throwIfNotDefined(publishModel, 'publishModel');
            var postBody = publishModel;
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/app-definitions/{modelId}/publish', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AppDefinitionUpdateResultRepresentation);
        };
        AppDefinitionsApi.prototype.updateAppDefinition = function (modelId, updatedModel) {
            throwIfNotDefined(modelId, 'modelId');
            throwIfNotDefined(updatedModel, 'updatedModel');
            var postBody = updatedModel;
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            if (!updatedModel['appDefinition']) {
                contentTypes = ['multipart/form-data'];
                var formParams = {
                    'file': updatedModel
                };
                return this.apiClient.callApi('/api/enterprise/app-definitions/{modelId}/import', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
            }
            else {
                var formParams = {};
                return this.apiClient.callApi('/api/enterprise/app-definitions/{modelId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
            }
        };
        return AppDefinitionsApi;
    }(BaseApi$1));
    //# sourceMappingURL=appDefinitions.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationAppDefinitionRepresentation = (function () {
        function ResultListDataRepresentationAppDefinitionRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new AppDefinitionRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationAppDefinitionRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RuntimeAppDefinitionsApi = (function (_super) {
        __extends(RuntimeAppDefinitionsApi, _super);
        function RuntimeAppDefinitionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RuntimeAppDefinitionsApi.prototype.deployAppDefinitions = function (saveObject) {
            throwIfNotDefined(saveObject, 'saveObject');
            var postBody = saveObject;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/runtime-app-definitions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RuntimeAppDefinitionsApi.prototype.getAppDefinition = function (appDefinitionId) {
            throwIfNotDefined(appDefinitionId, 'appDefinitionId');
            var postBody = null;
            var pathParams = {
                'appDefinitionId': appDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/runtime-app-definitions/{appDefinitionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AppDefinitionRepresentation);
        };
        RuntimeAppDefinitionsApi.prototype.getAppDefinitions = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/runtime-app-definitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAppDefinitionRepresentation);
        };
        return RuntimeAppDefinitionsApi;
    }(BaseApi$1));
    //# sourceMappingURL=runtimeAppDefinitions.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppsApi = (function () {
        function AppsApi() {
        }
        AppsApi.prototype.init = function (alfrescoApi) {
            this.runtimeAppDefinitionsApi = new RuntimeAppDefinitionsApi(alfrescoApi);
            this.appDefinitionsApi = new AppDefinitionsApi(alfrescoApi);
        };
        AppsApi.prototype.deployAppDefinitions = function (saveObject) {
            return this.runtimeAppDefinitionsApi.deployAppDefinitions(saveObject);
        };
        AppsApi.prototype.exportAppDefinition = function (modelId) {
            return this.appDefinitionsApi.exportAppDefinition(modelId);
        };
        AppsApi.prototype.getAppDefinitions = function () {
            return this.runtimeAppDefinitionsApi.getAppDefinitions();
        };
        AppsApi.prototype.importAppDefinition = function (file) {
            return this.appDefinitionsApi.importAppDefinition(file);
        };
        AppsApi.prototype.importNewAppDefinition = function (modelId, file) {
            return this.appDefinitionsApi.updateAppDefinition(modelId, file);
        };
        AppsApi.prototype.publishAppDefinition = function (modelId, publishModel) {
            return this.appDefinitionsApi.publishAppDefinition(modelId, publishModel);
        };
        AppsApi.prototype.updateAppDefinition = function (modelId, updatedModel) {
            return this.appDefinitionsApi.updateAppDefinition(modelId, updatedModel);
        };
        return AppsApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppsDefinitionApi = (function () {
        function AppsDefinitionApi() {
        }
        AppsDefinitionApi.prototype.init = function (alfrescoApi) {
            this.appDefinitionsApi = new AppDefinitionsApi(alfrescoApi);
        };
        AppsDefinitionApi.prototype.exportAppDefinition = function (modelId) {
            return this.appDefinitionsApi.exportAppDefinition(modelId);
        };
        AppsDefinitionApi.prototype.importAppDefinition = function (file, opts) {
            return this.appDefinitionsApi.importAppDefinition(file, opts);
        };
        AppsDefinitionApi.prototype.importNewAppDefinition = function (modelId, file) {
            return this.appDefinitionsApi.updateAppDefinition(modelId, file);
        };
        AppsDefinitionApi.prototype.publishAppDefinition = function (modelId, publishModel) {
            return this.appDefinitionsApi.publishAppDefinition(modelId, publishModel);
        };
        return AppsDefinitionApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppsRuntimeApi = (function () {
        function AppsRuntimeApi() {
        }
        AppsRuntimeApi.prototype.init = function (alfrescoApi) {
            this.runtimeAppDefinitionsApi = new RuntimeAppDefinitionsApi(alfrescoApi);
        };
        AppsRuntimeApi.prototype.deployAppDefinitions = function (saveObject) {
            return this.runtimeAppDefinitionsApi.deployAppDefinitions(saveObject);
        };
        AppsRuntimeApi.prototype.getAppDefinitions = function () {
            return this.runtimeAppDefinitionsApi.getAppDefinitions();
        };
        return AppsRuntimeApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentRepresentation = (function () {
        function CommentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                this.createdBy = input.createdBy ? new LightUserRepresentation(input.createdBy) : undefined;
            }
        }
        return CommentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationCommentRepresentation = (function () {
        function ResultListDataRepresentationCommentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new CommentRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationCommentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActivitiCommentsApi = (function (_super) {
        __extends(ActivitiCommentsApi, _super);
        function ActivitiCommentsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ActivitiCommentsApi.prototype.addProcessInstanceComment = function (commentRequest, processInstanceId) {
            throwIfNotDefined(commentRequest, 'commentRequest');
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            var postBody = commentRequest;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/comments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CommentRepresentation);
        };
        ActivitiCommentsApi.prototype.addTaskComment = function (commentRequest, taskId) {
            throwIfNotDefined(commentRequest, 'commentRequest');
            throwIfNotDefined(taskId, 'taskId');
            var postBody = commentRequest;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/comments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CommentRepresentation);
        };
        ActivitiCommentsApi.prototype.getProcessInstanceComments = function (processInstanceId, opts) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {
                'latestFirst': opts['latestFirst']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/comments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationCommentRepresentation);
        };
        ActivitiCommentsApi.prototype.getTaskComments = function (taskId, opts) {
            throwIfNotDefined(taskId, 'taskId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {
                'latestFirst': opts['latestFirst']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/comments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationCommentRepresentation);
        };
        return ActivitiCommentsApi;
    }(BaseApi$1));
    //# sourceMappingURL=comments.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentsApi$2 = (function (_super) {
        __extends(CommentsApi, _super);
        function CommentsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CommentsApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return CommentsApi;
    }(ActivitiCommentsApi));
    //# sourceMappingURL=CommentsApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RelatedContentRepresentation = (function () {
        function RelatedContentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                this.createdBy = input.createdBy ? new LightUserRepresentation(input.createdBy) : undefined;
            }
        }
        return RelatedContentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationRelatedContentRepresentation = (function () {
        function ResultListDataRepresentationRelatedContentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new RelatedContentRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationRelatedContentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ContentApi$1 = (function (_super) {
        __extends(ContentApi, _super);
        function ContentApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ContentApi.prototype.createRelatedContentOnProcessInstance = function (processInstanceId, relatedContent, opts) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            throwIfNotDefined(relatedContent, 'relatedContent');
            opts = opts || {};
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {
                'isRelatedContent': opts['isRelatedContent']
            };
            var headerParams = {};
            var formParams = {};
            var accepts = ['application/json'];
            if (relatedContent instanceof RelatedContentRepresentation) {
                var postBody = relatedContent;
                var contentTypes = ['application/json'];
                return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/content', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
            }
            else {
                var postBody = null;
                formParams = {
                    'file': relatedContent
                };
                var contentTypes = ['multipart/form-data'];
                return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/raw-content', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
            }
        };
        ContentApi.prototype.createRelatedContentOnTask = function (taskId, relatedContent, opts) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(relatedContent, 'relatedContent');
            opts = opts || {};
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {
                'isRelatedContent': opts['isRelatedContent']
            };
            var headerParams = {};
            var formParams = {};
            var accepts = ['application/json'];
            if (relatedContent instanceof RelatedContentRepresentation) {
                var postBody = relatedContent;
                var contentTypes = ['application/json'];
                return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/content', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
            }
            else {
                var postBody = null;
                formParams = {
                    'file': relatedContent
                };
                var contentTypes = ['multipart/form-data'];
                return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/raw-content', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
            }
        };
        ContentApi.prototype.createTemporaryRawRelatedContent = function (file) {
            throwIfNotDefined(file, 'file');
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {
                'file': file
            };
            var contentTypes = ['multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/content/raw', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
        };
        ContentApi.prototype.createTemporaryRelatedContent = function (relatedContent) {
            throwIfNotDefined(relatedContent, 'relatedContent');
            var postBody = relatedContent;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/content', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
        };
        ContentApi.prototype.deleteContent = function (contentId) {
            throwIfNotDefined(contentId, 'contentId');
            var postBody = null;
            var pathParams = {
                'contentId': contentId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/content/{contentId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ContentApi.prototype.getContent = function (contentId) {
            throwIfNotDefined(contentId, 'contentId');
            var postBody = null;
            var pathParams = {
                'contentId': contentId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/content/{contentId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
        };
        ContentApi.prototype.getRawContentUrl = function (contentId) {
            return this.apiClient.basePath + "/api/enterprise/content/" + contentId + "/raw";
        };
        ContentApi.prototype.getRawContent = function (contentId, renditionType) {
            throwIfNotDefined(contentId, 'contentId');
            var postBody = null;
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            if (renditionType) {
                var contentTypes = ['application/json'];
                var accepts = ['application/json'];
                var pathParams = {
                    'contentId': contentId,
                    'renditionType': renditionType
                };
                return this.apiClient.callApi('/api/enterprise/content/{contentId}/rendition/{renditionType}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, 'blob');
            }
            else {
                var contentTypes = ['application/json'];
                var accepts = ['application/json'];
                var pathParams = {
                    'contentId': contentId
                };
                return this.apiClient.callApi('/api/enterprise/content/{contentId}/raw', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, 'blob', undefined, 'blob');
            }
        };
        ContentApi.prototype.getRelatedContentForProcessInstance = function (processInstanceId, opts) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {
                'isRelatedContent': opts['isRelatedContent']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationRelatedContentRepresentation);
        };
        ContentApi.prototype.getRelatedContentForTask = function (taskId, opts) {
            throwIfNotDefined(taskId, 'taskId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {
                'isRelatedContent': opts['isRelatedContent']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationRelatedContentRepresentation);
        };
        return ContentApi;
    }(BaseApi$1));
    //# sourceMappingURL=content.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ConditionRepresentation = (function () {
        function ConditionRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.nextCondition = input.nextCondition ? new ConditionRepresentation(input.nextCondition) : undefined;
            }
        }
        return ConditionRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var LayoutRepresentation = (function () {
        function LayoutRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return LayoutRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var OptionRepresentation = (function () {
        function OptionRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return OptionRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormFieldRepresentation = (function () {
        function FormFieldRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.layout = input.layout ? new LayoutRepresentation(input.layout) : undefined;
                if (input.options) {
                    this.options = input.options.map(function (item) {
                        return new OptionRepresentation(item);
                    });
                }
                this.visibilityCondition = input.visibilityCondition ? new ConditionRepresentation(input.visibilityCondition) : undefined;
            }
        }
        return FormFieldRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormJavascriptEventRepresentation = (function () {
        function FormJavascriptEventRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FormJavascriptEventRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormOutcomeRepresentation = (function () {
        function FormOutcomeRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FormOutcomeRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormTabRepresentation = (function () {
        function FormTabRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.visibilityCondition = input.visibilityCondition ? new ConditionRepresentation(input.visibilityCondition) : undefined;
            }
        }
        return FormTabRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormVariableRepresentation = (function () {
        function FormVariableRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FormVariableRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormDefinitionRepresentation = (function () {
        function FormDefinitionRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.fields) {
                    this.fields = input.fields.map(function (item) {
                        return new FormFieldRepresentation(item);
                    });
                }
                if (input.javascriptEvents) {
                    this.javascriptEvents = input.javascriptEvents.map(function (item) {
                        return new FormJavascriptEventRepresentation(item);
                    });
                }
                if (input.outcomes) {
                    this.outcomes = input.outcomes.map(function (item) {
                        return new FormOutcomeRepresentation(item);
                    });
                }
                if (input.tabs) {
                    this.tabs = input.tabs.map(function (item) {
                        return new FormTabRepresentation(item);
                    });
                }
                if (input.variables) {
                    this.variables = input.variables.map(function (item) {
                        return new FormVariableRepresentation(item);
                    });
                }
            }
        }
        return FormDefinitionRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IdentityLinkRepresentation = (function () {
        function IdentityLinkRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return IdentityLinkRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditCalculatedValueRepresentation = (function () {
        function AuditCalculatedValueRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AuditCalculatedValueRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditDecisionExpressionInfoRepresentation = (function () {
        function AuditDecisionExpressionInfoRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AuditDecisionExpressionInfoRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditDecisionRuleInfoRepresentation = (function () {
        function AuditDecisionRuleInfoRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.expressions) {
                    this.expressions = input.expressions.map(function (item) {
                        return new AuditDecisionExpressionInfoRepresentation(item);
                    });
                }
            }
        }
        return AuditDecisionRuleInfoRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditDecisionInfoRepresentation = (function () {
        function AuditDecisionInfoRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.appliedRules) {
                    this.appliedRules = input.appliedRules.map(function (item) {
                        return new AuditDecisionRuleInfoRepresentation(item);
                    });
                }
                if (input.calculatedValues) {
                    this.calculatedValues = input.calculatedValues.map(function (item) {
                        return new AuditCalculatedValueRepresentation(item);
                    });
                }
            }
        }
        return AuditDecisionInfoRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditLogFormDataRepresentation = (function () {
        function AuditLogFormDataRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AuditLogFormDataRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditLogEntryRepresentation = (function () {
        function AuditLogEntryRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.formData) {
                    this.formData = input.formData.map(function (item) {
                        return new AuditLogFormDataRepresentation(item);
                    });
                }
            }
        }
        return AuditLogEntryRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstanceAuditInfoRepresentation = (function () {
        function ProcessInstanceAuditInfoRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.decisionInfo = input.decisionInfo ? new AuditDecisionInfoRepresentation(input.decisionInfo) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new AuditLogEntryRepresentation(item);
                    });
                }
            }
        }
        return ProcessInstanceAuditInfoRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RestVariable = (function () {
        function RestVariable(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RestVariable;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstanceRepresentation = (function () {
        function ProcessInstanceRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.ended = input.ended ? DateAlfresco.parseDate(input.ended) : undefined;
                this.started = input.started ? DateAlfresco.parseDate(input.started) : undefined;
                this.startedBy = input.startedBy ? new LightUserRepresentation(input.startedBy) : undefined;
                if (input.variables) {
                    this.variables = input.variables.map(function (item) {
                        return new RestVariable(item);
                    });
                }
            }
        }
        return ProcessInstanceRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstanceVariableRepresentation = (function () {
        function ProcessInstanceVariableRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ProcessInstanceVariableRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NamedObject = (function () {
        function NamedObject(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return NamedObject;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessContentRepresentation = (function () {
        function ProcessContentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.content) {
                    this.content = input.content.map(function (item) {
                        return new RelatedContentRepresentation(item);
                    });
                }
                this.field = input.field ? new NamedObject(input.field) : undefined;
            }
        }
        return ProcessContentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationProcessContentRepresentation = (function () {
        function ResultListDataRepresentationProcessContentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new ProcessContentRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationProcessContentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationProcessInstanceRepresentation = (function () {
        function ResultListDataRepresentationProcessInstanceRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new ProcessInstanceRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationProcessInstanceRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstancesApi = (function (_super) {
        __extends(ProcessInstancesApi, _super);
        function ProcessInstancesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProcessInstancesApi.prototype.activateProcessInstance = function (processInstanceId) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/activate', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceRepresentation);
        };
        ProcessInstancesApi.prototype.createIdentityLink = function (processInstanceId, identityLinkRepresentation) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            throwIfNotDefined(identityLinkRepresentation, 'identityLinkRepresentation');
            var postBody = identityLinkRepresentation;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        ProcessInstancesApi.prototype.deleteIdentityLink = function (processInstanceId, family, identityId, type) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            throwIfNotDefined(family, 'family');
            throwIfNotDefined(identityId, 'identityId');
            throwIfNotDefined(type, 'type');
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId, 'family': family, 'identityId': identityId, 'type': type
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks/{family}/{identityId}/{type}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ProcessInstancesApi.prototype.deleteProcessInstance = function (processInstanceId) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ProcessInstancesApi.prototype.filterProcessInstances = function (filterRequest) {
            throwIfNotDefined(filterRequest, 'filterRequest');
            var postBody = filterRequest;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/filter', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationProcessInstanceRepresentation);
        };
        ProcessInstancesApi.prototype.getHistoricProcessInstanceDecisionTasks = function (processInstanceId) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/decision-tasks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ProcessInstancesApi.prototype.getHistoricProcessInstanceVariables = function (processInstanceId) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/historic-variables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceVariableRepresentation);
        };
        ProcessInstancesApi.prototype.getHistoricProcessInstances = function (queryRequest) {
            throwIfNotDefined(queryRequest, 'queryRequest');
            var postBody = queryRequest;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/historic-process-instances/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationProcessInstanceRepresentation);
        };
        ProcessInstancesApi.prototype.getIdentityLinkType = function (processInstanceId, family, identityId, type) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            throwIfNotDefined(family, 'family');
            throwIfNotDefined(identityId, 'identityId');
            throwIfNotDefined(type, 'type');
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId, 'family': family, 'identityId': identityId, 'type': type
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks/{family}/{identityId}/{type}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        ProcessInstancesApi.prototype.getIdentityLinksForFamily = function (processInstanceId, family) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            throwIfNotDefined(family, 'family');
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId, 'family': family
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks/{family}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        ProcessInstancesApi.prototype.getIdentityLinks = function (processInstanceId) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        ProcessInstancesApi.prototype.getProcessInstanceContent = function (processInstanceId) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/field-content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationProcessContentRepresentation);
        };
        ProcessInstancesApi.prototype.getProcessInstanceDiagram = function (processInstanceId) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['image/png'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/diagram', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ProcessInstancesApi.prototype.getProcessInstanceStartForm = function (processInstanceId) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/start-form', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormDefinitionRepresentation);
        };
        ProcessInstancesApi.prototype.getProcessInstance = function (processInstanceId) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceRepresentation);
        };
        ProcessInstancesApi.prototype.getProcessInstances = function (processInstancesQuery) {
            throwIfNotDefined(processInstancesQuery, 'processInstancesQuery');
            var postBody = processInstancesQuery;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationProcessInstanceRepresentation);
        };
        ProcessInstancesApi.prototype.getTaskAuditLog = function (processInstanceId) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/audit-log', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceAuditInfoRepresentation);
        };
        ProcessInstancesApi.prototype.getProcessAuditPdf = function (processInstanceId) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw "Missing param 'processId' in getProcessAuditPdf";
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            var contextRoot = null;
            var responseType = null;
            return this.apiClient.callApi('/app/rest/process-instances/{processInstanceId}/audit', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, null, contextRoot, responseType);
        };
        ProcessInstancesApi.prototype.startNewProcessInstance = function (startRequest) {
            throwIfNotDefined(startRequest, 'startRequest');
            var postBody = startRequest;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceRepresentation);
        };
        ProcessInstancesApi.prototype.suspendProcessInstance = function (processInstanceId) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/suspend', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceRepresentation);
        };
        return ProcessInstancesApi;
    }(BaseApi$1));
    //# sourceMappingURL=processInstances.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ContentApi$2 = (function () {
        function ContentApi() {
        }
        ContentApi.prototype.init = function (alfrescoApi) {
            this.contentApi = new ContentApi$1(alfrescoApi);
            this.processInstancesApi = new ProcessInstancesApi(alfrescoApi);
        };
        ContentApi.prototype.createRelatedContentOnProcessInstancePostBody = function (processInstanceId, relatedContent, opts) {
            return this.contentApi.createRelatedContentOnProcessInstance(processInstanceId, relatedContent, opts);
        };
        ContentApi.prototype.createRelatedContentOnProcessInstance = function (processInstanceId, file, opts) {
            return this.contentApi.createRelatedContentOnProcessInstance(processInstanceId, file, opts);
        };
        ContentApi.prototype.createRelatedContentOnTaskPostBody = function (taskId, relatedContent, opts) {
            return this.contentApi.createRelatedContentOnTask(taskId, relatedContent, opts);
        };
        ContentApi.prototype.createRelatedContentOnTask = function (taskId, file, opts) {
            return this.contentApi.createRelatedContentOnTask(taskId, file, opts);
        };
        ContentApi.prototype.createTemporaryRawRelatedContent = function (file) {
            return this.contentApi.createTemporaryRawRelatedContent(file);
        };
        ContentApi.prototype.createTemporaryRelatedContent = function (relatedContent) {
            return this.contentApi.createTemporaryRelatedContent(relatedContent);
        };
        ContentApi.prototype.deleteContent = function (contentId) {
            return this.contentApi.deleteContent(contentId);
        };
        ContentApi.prototype.getContent = function (contentId) {
            return this.contentApi.getContent(contentId);
        };
        ContentApi.prototype.getProcessInstanceContent = function (processInstanceId) {
            return this.processInstancesApi.getProcessInstanceContent(processInstanceId);
        };
        ContentApi.prototype.getRawContent = function (contentId) {
            return this.contentApi.getRawContent(contentId);
        };
        ContentApi.prototype.getContentPreview = function (contentId) {
            return this.contentApi.getRawContent(contentId, 'preview');
        };
        ContentApi.prototype.getRawContentUrl = function (contentId) {
            return this.contentApi.getRawContentUrl(contentId);
        };
        ContentApi.prototype.getContentThumbnail = function (contentId) {
            return this.contentApi.getRawContent(contentId, 'thumbnail');
        };
        ContentApi.prototype.getRelatedContentForProcessInstance = function (processInstanceId, isRelatedContent) {
            return this.contentApi.getRelatedContentForProcessInstance(processInstanceId, { isRelatedContent: isRelatedContent });
        };
        ContentApi.prototype.getRelatedContentForTask = function (taskId, isRelatedContent) {
            return this.contentApi.getRelatedContentForTask(taskId, { isRelatedContent: isRelatedContent });
        };
        return ContentApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ContentRenditionApi = (function () {
        function ContentRenditionApi() {
        }
        ContentRenditionApi.prototype.init = function (alfrescoApi) {
            this.contentApi = new ContentApi$1(alfrescoApi);
        };
        ContentRenditionApi.prototype.getRawContent = function (contentId, renditionType) {
            return this.contentApi.getRawContent(contentId, renditionType);
        };
        return ContentRenditionApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormRepresentation = (function () {
        function FormRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.formDefinition = input.formDefinition ? new FormDefinitionRepresentation(input.formDefinition) : undefined;
                this.lastUpdated = input.lastUpdated ? DateAlfresco.parseDate(input.lastUpdated) : undefined;
            }
        }
        return FormRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationFormRepresentation = (function () {
        function ResultListDataRepresentationFormRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new FormRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationFormRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RuntimeFormRepresentation = (function () {
        function RuntimeFormRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RuntimeFormRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationRuntimeFormRepresentation = (function () {
        function ResultListDataRepresentationRuntimeFormRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new RuntimeFormRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationRuntimeFormRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ValidationErrorRepresentation = (function () {
        function ValidationErrorRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ValidationErrorRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormModelsApi = (function (_super) {
        __extends(FormModelsApi, _super);
        function FormModelsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormModelsApi.prototype.getFormEditorJson = function (formId) {
            throwIfNotDefined(formId, 'formId');
            var postBody = null;
            var pathParams = {
                'formId': formId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/forms/{formId}/editorJson', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormDefinitionRepresentation);
        };
        FormModelsApi.prototype.getFormHistory = function (formId, formHistoryId) {
            throwIfNotDefined(formId, 'formId');
            throwIfNotDefined(formHistoryId, 'formHistoryId');
            var postBody = null;
            var pathParams = {
                'formId': formId, 'formHistoryId': formHistoryId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/editor/form-models/{formId}/history/{formHistoryId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormRepresentation);
        };
        FormModelsApi.prototype.getForm = function (formId) {
            throwIfNotDefined(formId, 'formId');
            var postBody = null;
            var pathParams = {
                'formId': formId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/editor/form-models/{formId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormRepresentation);
        };
        FormModelsApi.prototype.getForms = function (input) {
            var postBody = null;
            var pathParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            if (typeof input === 'string') {
                var queryParams = {
                    'formId': buildCollectionParam(input, 'multi')
                };
                return this.apiClient.callApi('/api/enterprise/editor/form-models/values', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormRepresentation);
            }
            else if (typeof input === 'object') {
                input = input || {};
                var queryParams = {
                    'nameLike': input['nameLike'],
                    'appId': input['appId'],
                    'tenantId': input['tenantId'],
                    'start': input['start'],
                    'sort': input['sort'],
                    'order': input['order'],
                    'size': input['size']
                };
                return this.apiClient.callApi('/api/enterprise/forms', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationRuntimeFormRepresentation);
            }
            else {
                var queryParams = {};
                return this.apiClient.callApi('/api/enterprise/editor/form-models', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationFormRepresentation);
            }
        };
        FormModelsApi.prototype.saveForm = function (formId, saveRepresentation) {
            throwIfNotDefined(formId, 'formId');
            throwIfNotDefined(saveRepresentation, 'saveRepresentation');
            var postBody = saveRepresentation;
            var pathParams = {
                'formId': formId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/editor/form-models/{formId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormRepresentation);
        };
        FormModelsApi.prototype.validateModel = function (formId, saveRepresentation) {
            throwIfNotDefined(formId, 'formId');
            throwIfNotDefined(saveRepresentation, 'saveRepresentation');
            var postBody = saveRepresentation;
            var pathParams = {
                'formId': formId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/editor/form-models/{formId}/validate', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ValidationErrorRepresentation);
        };
        return FormModelsApi;
    }(BaseApi$1));
    //# sourceMappingURL=formModels.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EditorApi = (function () {
        function EditorApi() {
        }
        EditorApi.prototype.init = function (alfrescoApi) {
            this.formModelsApi = new FormModelsApi(alfrescoApi);
        };
        EditorApi.prototype.getFormHistory = function (formId, formHistoryId) {
            return this.formModelsApi.getFormHistory(formId, formHistoryId);
        };
        EditorApi.prototype.getForm = function (formId) {
            return this.formModelsApi.getForm(formId);
        };
        EditorApi.prototype.getForms = function (input) {
            return this.formModelsApi.getForms(input);
        };
        EditorApi.prototype.saveForm = function (formId, saveRepresentation) {
            return this.formModelsApi.saveForm(formId, saveRepresentation);
        };
        EditorApi.prototype.validateModel = function (formId, saveRepresentation) {
            return this.formModelsApi.validateModel(formId, saveRepresentation);
        };
        return EditorApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationLightGroupRepresentation = (function () {
        function ResultListDataRepresentationLightGroupRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new LightGroupRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationLightGroupRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActivitiGroupsApi = (function (_super) {
        __extends(ActivitiGroupsApi, _super);
        function ActivitiGroupsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ActivitiGroupsApi.prototype.getGroups = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'filter': opts['filter'],
                'groupId': opts['groupId'],
                'externalId': opts['externalId'],
                'externalIdCaseInsensitive': opts['externalIdCaseInsensitive'],
                'tenantId': opts['tenantId']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationLightGroupRepresentation);
        };
        ActivitiGroupsApi.prototype.getUsersForGroup = function (groupId) {
            throwIfNotDefined(groupId, 'formId');
            var postBody = null;
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/groups/{groupId}/users', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationLightUserRepresentation);
        };
        return ActivitiGroupsApi;
    }(BaseApi$1));
    //# sourceMappingURL=groups.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupsApi$2 = (function (_super) {
        __extends(GroupsApi, _super);
        function GroupsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GroupsApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return GroupsApi;
    }(ActivitiGroupsApi));
    //# sourceMappingURL=GroupsApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SyncLogEntryRepresentation = (function () {
        function SyncLogEntryRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.timeStamp = input.timeStamp ? DateAlfresco.parseDate(input.timeStamp) : undefined;
            }
        }
        return SyncLogEntryRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IDMSyncApi = (function (_super) {
        __extends(IDMSyncApi, _super);
        function IDMSyncApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IDMSyncApi.prototype.getLogFile = function (syncLogEntryId) {
            throwIfNotDefined(syncLogEntryId, 'syncLogEntryId');
            var postBody = null;
            var pathParams = {
                'syncLogEntryId': syncLogEntryId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/idm-sync-log-entries/{syncLogEntryId}/logfile', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        IDMSyncApi.prototype.getSyncLogEntries = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'tenantId': opts['tenantId'],
                'page': opts['page'],
                'start': opts['start'],
                'size': opts['size']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/idm-sync-log-entries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SyncLogEntryRepresentation);
        };
        return IDMSyncApi;
    }(BaseApi$1));
    //# sourceMappingURL=iDMSync.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IDMSyncApi$1 = (function (_super) {
        __extends(IDMSyncApi, _super);
        function IDMSyncApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IDMSyncApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return IDMSyncApi;
    }(IDMSyncApi));
    //# sourceMappingURL=IDMSyncApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AccountRepresentation = (function () {
        function AccountRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AccountRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationAccountRepresentation = (function () {
        function ResultListDataRepresentationAccountRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new AccountRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationAccountRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AccountIntegrationApi = (function (_super) {
        __extends(AccountIntegrationApi, _super);
        function AccountIntegrationApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AccountIntegrationApi.prototype.getAccounts = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/account/integration', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAccountRepresentation);
        };
        return AccountIntegrationApi;
    }(BaseApi$1));
    //# sourceMappingURL=accountIntegration.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationAccountApi = (function (_super) {
        __extends(IntegrationAccountApi, _super);
        function IntegrationAccountApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationAccountApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return IntegrationAccountApi;
    }(AccountIntegrationApi));
    //# sourceMappingURL=IntegrationAccountApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationAlfrescoCloudApi$1 = (function (_super) {
        __extends(IntegrationAlfrescoCloudApi, _super);
        function IntegrationAlfrescoCloudApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationAlfrescoCloudApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return IntegrationAlfrescoCloudApi;
    }(IntegrationAlfrescoCloudApi));
    //# sourceMappingURL=IntegrationAlfrescoCloudApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationAlfrescoOnPremiseApi$1 = (function (_super) {
        __extends(IntegrationAlfrescoOnPremiseApi, _super);
        function IntegrationAlfrescoOnPremiseApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationAlfrescoOnPremiseApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return IntegrationAlfrescoOnPremiseApi;
    }(IntegrationAlfrescoOnPremiseApi));
    //# sourceMappingURL=IntegrationAlfrescoOnPremiseApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BoxContent = (function () {
        function BoxContent(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return BoxContent;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationBoxContent = (function () {
        function ResultListDataRepresentationBoxContent(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new BoxContent(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationBoxContent;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationBoxApi = (function (_super) {
        __extends(IntegrationBoxApi, _super);
        function IntegrationBoxApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationBoxApi.prototype.confirmAuthorisation = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['text/html'];
            return this.apiClient.callApi('/api/enterprise/integration/box/confirm-auth-request', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        IntegrationBoxApi.prototype.createRepositoryAccount = function (userId, credentials) {
            throwIfNotDefined(userId, 'userId');
            throwIfNotDefined(credentials, 'credentials');
            var postBody = credentials;
            var pathParams = {
                'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['*/*'];
            return this.apiClient.callApi('/api/enterprise/integration/box/{userId}/account', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        IntegrationBoxApi.prototype.deleteRepositoryAccount = function (userId) {
            throwIfNotDefined(userId, 'userId');
            var postBody = null;
            var pathParams = {
                'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['*/*'];
            return this.apiClient.callApi('/api/enterprise/integration/box/{userId}/account', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        IntegrationBoxApi.prototype.getBoxPluginStatus = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['*/*'];
            return this.apiClient.callApi('/api/enterprise/integration/box/status', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        IntegrationBoxApi.prototype.getFiles = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'filter': opts['filter'],
                'parent': opts['parent']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['*/*'];
            return this.apiClient.callApi('/api/enterprise/integration/box/files', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationBoxContent);
        };
        IntegrationBoxApi.prototype.getRepositoryAccount = function (userId) {
            throwIfNotDefined(userId, 'userId');
            var postBody = null;
            var pathParams = {
                'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['*/*'];
            return this.apiClient.callApi('/api/enterprise/integration/box/{userId}/account', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        IntegrationBoxApi.prototype.updateRepositoryAccount = function (userId, credentials) {
            throwIfNotDefined(userId, 'userId');
            throwIfNotDefined(credentials, 'credentials');
            var postBody = credentials;
            var pathParams = {
                'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['*/*'];
            return this.apiClient.callApi('/api/enterprise/integration/box/{userId}/account', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return IntegrationBoxApi;
    }(BaseApi$1));
    //# sourceMappingURL=integrationBox.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationBoxApi$1 = (function (_super) {
        __extends(IntegrationBoxApi, _super);
        function IntegrationBoxApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationBoxApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return IntegrationBoxApi;
    }(IntegrationBoxApi));
    //# sourceMappingURL=IntegrationBoxApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GoogleDriveContent = (function () {
        function GoogleDriveContent(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GoogleDriveContent;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationGoogleDriveContent = (function () {
        function ResultListDataRepresentationGoogleDriveContent(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new GoogleDriveContent(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationGoogleDriveContent;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationDriveApi = (function (_super) {
        __extends(IntegrationDriveApi, _super);
        function IntegrationDriveApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationDriveApi.prototype.confirmAuthorisation = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['text/html'];
            return this.apiClient.callApi('/api/enterprise/integration/google-drive/confirm-auth-request', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        IntegrationDriveApi.prototype.getFiles = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'filter': opts['filter'],
                'parent': opts['parent'],
                'currentFolderOnly': opts['currentFolderOnly']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/google-drive/files', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationGoogleDriveContent);
        };
        return IntegrationDriveApi;
    }(BaseApi$1));
    //# sourceMappingURL=integrationDrive.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationDriveApi$1 = (function (_super) {
        __extends(IntegrationDriveApi, _super);
        function IntegrationDriveApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationDriveApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return IntegrationDriveApi;
    }(IntegrationDriveApi));
    //# sourceMappingURL=IntegrationDriveApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelsBpmnApi = (function (_super) {
        __extends(ModelsBpmnApi, _super);
        function ModelsBpmnApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModelsBpmnApi.prototype.getHistoricProcessModelBpmn20Xml = function (processModelId, processModelHistoryId) {
            throwIfNotDefined(processModelId, 'processModelId');
            throwIfNotDefined(processModelHistoryId, 'processModelHistoryId');
            var postBody = null;
            var pathParams = {
                'processModelId': processModelId, 'processModelHistoryId': processModelHistoryId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/xml'];
            return this.apiClient.callApi('/api/enterprise/models/{processModelId}/history/{processModelHistoryId}/bpmn20', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ModelsBpmnApi.prototype.getProcessModelBpmn20Xml = function (processModelId) {
            throwIfNotDefined(processModelId, 'processModelId');
            var postBody = null;
            var pathParams = {
                'processModelId': processModelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/xml'];
            return this.apiClient.callApi('/api/enterprise/models/{processModelId}/bpmn20', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return ModelsBpmnApi;
    }(BaseApi$1));
    //# sourceMappingURL=modelsBpmn.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelBpmnApi = (function (_super) {
        __extends(ModelBpmnApi, _super);
        function ModelBpmnApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModelBpmnApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ModelBpmnApi;
    }(ModelsBpmnApi));
    //# sourceMappingURL=ModelBpmnApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelJsonBpmnApi = (function (_super) {
        __extends(ModelJsonBpmnApi, _super);
        function ModelJsonBpmnApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModelJsonBpmnApi.prototype.getHistoricEditorDisplayJsonClient = function (processModelId, processModelHistoryId) {
            var postBody = null;
            if (processModelId === undefined || processModelId === null) {
                throw "Missing param 'processModelId' in getHistoricEditorDisplayJsonClient";
            }
            if (processModelHistoryId === undefined || processModelHistoryId === null) {
                throw "Missing param 'processModelHistoryId' in getHistoricEditorDisplayJsonClient";
            }
            var pathParams = {
                'processModelId': processModelId,
                'processModelHistoryId': processModelHistoryId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/models/{processModelId}/history/{processModelHistoryId}/model-json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ModelJsonBpmnApi.prototype.getEditorDisplayJsonClient = function (processModelId) {
            var postBody = null;
            if (processModelId === undefined || processModelId === null) {
                throw "Missing param 'processModelId' in getEditorDisplayJsonClient";
            }
            var pathParams = {
                'processModelId': processModelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/models/{processModelId}/model-json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ModelJsonBpmnApi.prototype.getModelJSON = function (processDefinitionId) {
            var postBody = null;
            if (processDefinitionId === undefined || processDefinitionId === null) {
                throw "Missing param 'processDefinitionId' in getProcessDefinitionModel";
            }
            var pathParams = {
                'processDefinitionId': processDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/process-definitions/{processDefinitionId}/model-json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ModelJsonBpmnApi.prototype.getModelJSONForProcessDefinition = function (processInstanceId) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw "Missing param 'processInstanceId' in getProcessInstancesModel";
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/process-instances/{processInstanceId}/model-json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return ModelJsonBpmnApi;
    }(BaseApi$1));
    //# sourceMappingURL=modelJsonBpmn.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelJsonBpmnApi$1 = (function (_super) {
        __extends(ModelJsonBpmnApi, _super);
        function ModelJsonBpmnApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModelJsonBpmnApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ModelJsonBpmnApi;
    }(ModelJsonBpmnApi));
    //# sourceMappingURL=ModelJsonBpmnApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelRepresentation = (function () {
        function ModelRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.lastUpdated = input.lastUpdated ? DateAlfresco.parseDate(input.lastUpdated) : undefined;
            }
        }
        return ModelRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.ObjectNode = (function () {
        function ObjectNode(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ObjectNode;
    }());
    (function (ObjectNode) {
        ObjectNode.NodeTypeEnum = {
            ARRAY: 'ARRAY',
            BINARY: 'BINARY',
            BOOLEAN: 'BOOLEAN',
            MISSING: 'MISSING',
            NULL: 'NULL',
            NUMBER: 'NUMBER',
            OBJECT: 'OBJECT',
            POJO: 'POJO',
            STRING: 'STRING'
        };
    })(exports.ObjectNode || (exports.ObjectNode = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationModelRepresentation = (function () {
        function ResultListDataRepresentationModelRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new ModelRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationModelRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelsApi = (function (_super) {
        __extends(ModelsApi, _super);
        function ModelsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModelsApi.prototype.createModel = function (modelRepresentation) {
            throwIfNotDefined(modelRepresentation, 'modelRepresentation');
            var postBody = modelRepresentation;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
        };
        ModelsApi.prototype.deleteModel = function (modelId, opts) {
            throwIfNotDefined(modelId, 'modelId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {
                'cascade': opts['cascade'],
                'deleteRuntimeApp': opts['deleteRuntimeApp']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ModelsApi.prototype.duplicateModel = function (modelId, modelRepresentation) {
            throwIfNotDefined(modelId, 'modelId');
            throwIfNotDefined(modelRepresentation, 'modelRepresentation');
            var postBody = modelRepresentation;
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}/clone', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
        };
        ModelsApi.prototype.getModelJSON = function (modelId) {
            throwIfNotDefined(modelId, 'modelId');
            var postBody = null;
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}/editor/json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, exports.ObjectNode);
        };
        ModelsApi.prototype.getModelThumbnail = function (modelId) {
            throwIfNotDefined(modelId, 'modelId');
            var postBody = null;
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['image/png'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}/thumbnail', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ModelsApi.prototype.getModel = function (modelId, opts) {
            throwIfNotDefined(modelId, 'modelId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {
                'includePermissions': opts['includePermissions']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
        };
        ModelsApi.prototype.getModelsToIncludeInAppDefinition = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models-for-app-definition', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationModelRepresentation);
        };
        ModelsApi.prototype.getModels = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'filter': opts['filter'],
                'filterText': opts['filterText'],
                'sort': opts['sort'],
                'modelType': opts['modelType'],
                'referenceId': opts['referenceId']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationModelRepresentation);
        };
        ModelsApi.prototype.importNewVersion = function (modelId, file) {
            throwIfNotDefined(modelId, 'modelId');
            throwIfNotDefined(file, 'file');
            var postBody = null;
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {
                'file': file
            };
            var contentTypes = ['multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}/newversion', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
        };
        ModelsApi.prototype.importProcessModel = function (file) {
            throwIfNotDefined(file, 'file');
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {
                'file': file
            };
            var contentTypes = ['multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-models/import', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
        };
        ModelsApi.prototype.saveModel = function (modelId, values) {
            throwIfNotDefined(modelId, 'modelId');
            throwIfNotDefined(values, 'values');
            var postBody = values;
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}/editor/json', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
        };
        ModelsApi.prototype.updateModel = function (modelId, updatedModel) {
            throwIfNotDefined(modelId, 'modelId');
            throwIfNotDefined(updatedModel, 'updatedModel');
            var postBody = updatedModel;
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
        };
        ModelsApi.prototype.validateModel = function (modelId, opts) {
            throwIfNotDefined(modelId, 'modelId');
            opts = opts || {};
            var postBody = opts['values'];
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/x-www-form-urlencoded'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}/editor/validate', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ValidationErrorRepresentation);
        };
        return ModelsApi;
    }(BaseApi$1));
    //# sourceMappingURL=models.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelsApi$1 = (function (_super) {
        __extends(ModelsApi, _super);
        function ModelsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModelsApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ModelsApi;
    }(ModelsApi));
    //# sourceMappingURL=ModelsApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelsHistoryApi = (function (_super) {
        __extends(ModelsHistoryApi, _super);
        function ModelsHistoryApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModelsHistoryApi.prototype.getModelHistoryCollection = function (modelId, opts) {
            throwIfNotDefined(modelId, 'modelId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {
                'includeLatestVersion': opts['includeLatestVersion']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}/history', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationModelRepresentation);
        };
        ModelsHistoryApi.prototype.getProcessModelHistory = function (modelId, modelHistoryId) {
            throwIfNotDefined(modelId, 'modelId');
            throwIfNotDefined(modelHistoryId, 'modelHistoryId');
            var postBody = null;
            var pathParams = {
                'modelId': modelId, 'modelHistoryId': modelHistoryId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}/history/{modelHistoryId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
        };
        return ModelsHistoryApi;
    }(BaseApi$1));
    //# sourceMappingURL=modelsHistory.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelsHistoryApi$1 = (function (_super) {
        __extends(ModelsHistoryApi, _super);
        function ModelsHistoryApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModelsHistoryApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ModelsHistoryApi;
    }(ModelsHistoryApi));
    //# sourceMappingURL=ModelsHistoryApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormValueRepresentation = (function () {
        function FormValueRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FormValueRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessDefinitionMetaDataRepresentation = (function () {
        function ProcessDefinitionMetaDataRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ProcessDefinitionMetaDataRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessDefinitionRepresentation = (function () {
        function ProcessDefinitionRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.metaDataValues) {
                    this.metaDataValues = input.metaDataValues.map(function (item) {
                        return new ProcessDefinitionMetaDataRepresentation(item);
                    });
                }
            }
        }
        return ProcessDefinitionRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationProcessDefinitionRepresentation = (function () {
        function ResultListDataRepresentationProcessDefinitionRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new ProcessDefinitionRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationProcessDefinitionRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RuntimeDecisionTableRepresentation = (function () {
        function RuntimeDecisionTableRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RuntimeDecisionTableRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationRuntimeDecisionTableRepresentation = (function () {
        function ResultListDataRepresentationRuntimeDecisionTableRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new RuntimeDecisionTableRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationRuntimeDecisionTableRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessDefinitionsApi = (function (_super) {
        __extends(ProcessDefinitionsApi, _super);
        function ProcessDefinitionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProcessDefinitionsApi.prototype.createIdentityLink = function (processDefinitionId, identityLinkRepresentation) {
            throwIfNotDefined(processDefinitionId, 'processDefinitionId');
            throwIfNotDefined(identityLinkRepresentation, 'identityLinkRepresentation');
            var postBody = identityLinkRepresentation;
            var pathParams = {
                'processDefinitionId': processDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        ProcessDefinitionsApi.prototype.deleteIdentityLink = function (processDefinitionId, family, identityId) {
            throwIfNotDefined(processDefinitionId, 'processDefinitionId');
            throwIfNotDefined(family, 'family');
            throwIfNotDefined(identityId, 'identityId');
            var postBody = null;
            var pathParams = {
                'processDefinitionId': processDefinitionId, 'family': family, 'identityId': identityId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ProcessDefinitionsApi.prototype.getIdentityLinkType = function (processDefinitionId, family, identityId) {
            throwIfNotDefined(processDefinitionId, 'processDefinitionId');
            throwIfNotDefined(family, 'family');
            throwIfNotDefined(identityId, 'identityId');
            var postBody = null;
            var pathParams = {
                'processDefinitionId': processDefinitionId, 'family': family, 'identityId': identityId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        ProcessDefinitionsApi.prototype.getIdentityLinksForFamily = function (processDefinitionId, family) {
            throwIfNotDefined(processDefinitionId, 'processDefinitionId');
            throwIfNotDefined(family, 'family');
            var postBody = null;
            var pathParams = {
                'processDefinitionId': processDefinitionId, 'family': family
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        ProcessDefinitionsApi.prototype.getIdentityLinks = function (processDefinitionId) {
            throwIfNotDefined(processDefinitionId, 'processDefinitionId');
            var postBody = null;
            var pathParams = {
                'processDefinitionId': processDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        ProcessDefinitionsApi.prototype.getProcessDefinitionDecisionTables = function (processDefinitionId) {
            throwIfNotDefined(processDefinitionId, 'processDefinitionId');
            var postBody = null;
            var pathParams = {
                'processDefinitionId': processDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/decision-tables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationRuntimeDecisionTableRepresentation);
        };
        ProcessDefinitionsApi.prototype.getProcessDefinitionForms = function (processDefinitionId) {
            throwIfNotDefined(processDefinitionId, 'processDefinitionId');
            var postBody = null;
            var pathParams = {
                'processDefinitionId': processDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/forms', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationRuntimeFormRepresentation);
        };
        ProcessDefinitionsApi.prototype.getProcessDefinitionStartForm = function (processDefinitionId) {
            var postBody = null;
            var pathParams = {
                'processDefinitionId': processDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/start-form', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormDefinitionRepresentation);
        };
        ProcessDefinitionsApi.prototype.getProcessDefinitions = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'latest': opts['latest'],
                'appDefinitionId': opts['appDefinitionId'],
                'deploymentId': opts['deploymentId']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationProcessDefinitionRepresentation);
        };
        ProcessDefinitionsApi.prototype.getRestFieldValues = function (processDefinitionId, field) {
            var postBody = null;
            var pathParams = {
                'processDefinitionId': processDefinitionId,
                'field': field
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/start-form-values/{field}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormValueRepresentation);
        };
        ProcessDefinitionsApi.prototype.getRestTableFieldValues = function (processDefinitionId, field, column) {
            var postBody = null;
            var pathParams = {
                'processDefinitionId': processDefinitionId,
                'field': field,
                'column': column
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/start-form-values/{field}/{column}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormValueRepresentation);
        };
        return ProcessDefinitionsApi;
    }(BaseApi$1));
    //# sourceMappingURL=processDefinitions.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessApi = (function () {
        function ProcessApi() {
        }
        ProcessApi.prototype.init = function (alfrescoApi) {
            this.processInstancesApi = new ProcessInstancesApi(alfrescoApi);
            this.processDefinitionsApi = new ProcessDefinitionsApi(alfrescoApi);
        };
        ProcessApi.prototype.deleteProcessInstance = function (processInstanceId) {
            return this.processInstancesApi.deleteProcessInstance(processInstanceId);
        };
        ProcessApi.prototype.filterProcessInstances = function (filterRequest) {
            return this.processInstancesApi.filterProcessInstances(filterRequest);
        };
        ProcessApi.prototype.getProcessDefinitionStartForm = function (processDefinitionId) {
            return this.processDefinitionsApi.getProcessDefinitionStartForm(processDefinitionId);
        };
        ProcessApi.prototype.getProcessDefinitions = function (opts) {
            return this.processDefinitionsApi.getProcessDefinitions(opts);
        };
        ProcessApi.prototype.getProcessInstanceContent = function (processInstanceId) {
            return this.processInstancesApi.getProcessInstanceContent(processInstanceId);
        };
        ProcessApi.prototype.getProcessInstanceStartForm = function (processInstanceId) {
            return this.processInstancesApi.getProcessInstanceStartForm(processInstanceId);
        };
        ProcessApi.prototype.getProcessInstance = function (processInstanceId) {
            return this.processInstancesApi.getProcessInstance(processInstanceId);
        };
        ProcessApi.prototype.getProcessInstances = function (processInstancesQuery) {
            return this.processInstancesApi.getProcessInstances(processInstancesQuery);
        };
        ProcessApi.prototype.getProcessAuditJson = function (processInstanceId) {
            return this.processInstancesApi.getTaskAuditLog(processInstanceId);
        };
        ProcessApi.prototype.getProcessAuditPdf = function (processInstanceId) {
            return this.processInstancesApi.getProcessAuditPdf(processInstanceId);
        };
        ProcessApi.prototype.getRestFieldValues = function (processDefinitionId, field) {
            return this.processDefinitionsApi.getRestFieldValues(processDefinitionId, field);
        };
        ProcessApi.prototype.getRestTableFieldValues = function (processDefinitionId, field, column) {
            return this.processDefinitionsApi.getRestTableFieldValues(processDefinitionId, field, column);
        };
        ProcessApi.prototype.startNewProcessInstance = function (startRequest) {
            return this.processInstancesApi.startNewProcessInstance(startRequest);
        };
        return ProcessApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessDefinitionsApi$1 = (function (_super) {
        __extends(ProcessDefinitionsApi, _super);
        function ProcessDefinitionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProcessDefinitionsApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ProcessDefinitionsApi;
    }(ProcessDefinitionsApi));
    //# sourceMappingURL=ProcessDefinitionsApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessDefinitionsFormApi = (function () {
        function ProcessDefinitionsFormApi() {
        }
        ProcessDefinitionsFormApi.prototype.init = function (alfrescoApi) {
            this.processDefinitionsApi = new ProcessDefinitionsApi(alfrescoApi);
        };
        ProcessDefinitionsFormApi.prototype.getProcessDefinitionStartForm = function (processDefinitionId) {
            return this.processDefinitionsApi.getProcessDefinitionStartForm(processDefinitionId);
        };
        ProcessDefinitionsFormApi.prototype.getRestFieldValues = function (processDefinitionId, field) {
            return this.processDefinitionsApi.getRestFieldValues(processDefinitionId, field);
        };
        ProcessDefinitionsFormApi.prototype.getRestTableFieldValues = function (processDefinitionId, field, column) {
            return this.processDefinitionsApi.getRestTableFieldValues(processDefinitionId, field, column);
        };
        return ProcessDefinitionsFormApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskRepresentation = (function () {
        function TaskRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.assignee = input.assignee ? new LightUserRepresentation(input.assignee) : undefined;
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                this.dueDate = input.dueDate ? DateAlfresco.parseDate(input.dueDate) : undefined;
                this.endDate = input.endDate ? DateAlfresco.parseDate(input.endDate) : undefined;
                if (input.involvedGroups) {
                    this.involvedGroups = input.involvedGroups.map(function (item) {
                        return new LightGroupRepresentation(item);
                    });
                }
                if (input.involvedPeople) {
                    this.involvedPeople = input.involvedPeople.map(function (item) {
                        return new LightUserRepresentation(item);
                    });
                }
                if (input.variables) {
                    this.variables = input.variables.map(function (item) {
                        return new RestVariable(item);
                    });
                }
            }
        }
        TaskRepresentation.prototype.getFullName = function () {
            var fullName = '';
            if (this.assignee) {
                var firstName = this.assignee.firstName ? this.assignee.firstName : '';
                var lastName = this.assignee.lastName ? this.assignee.lastName : '';
                fullName = firstName + " " + lastName;
            }
            return fullName.trim();
        };
        TaskRepresentation.prototype.isCompleted = function () {
            return !!this.endDate;
        };
        return TaskRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationTaskRepresentation = (function () {
        function ResultListDataRepresentationTaskRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new TaskRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationTaskRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChecklistsApi = (function (_super) {
        __extends(ChecklistsApi, _super);
        function ChecklistsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ChecklistsApi.prototype.addSubtask = function (taskId, taskRepresentation) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(taskRepresentation, 'taskRepresentation');
            var postBody = taskRepresentation;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/checklist', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
        };
        ChecklistsApi.prototype.getChecklist = function (taskId) {
            throwIfNotDefined(taskId, 'taskId');
            var postBody = null;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/checklist', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);
        };
        ChecklistsApi.prototype.orderChecklist = function (taskId, orderRepresentation) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(orderRepresentation, 'orderRepresentation');
            var postBody = orderRepresentation;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/checklist', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return ChecklistsApi;
    }(BaseApi$1));
    //# sourceMappingURL=checklists.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DataSourceConfigRepresentation = (function () {
        function DataSourceConfigRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return DataSourceConfigRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DataSourceRepresentation = (function () {
        function DataSourceRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.config = input.config ? new DataSourceConfigRepresentation(input.config) : undefined;
            }
        }
        return DataSourceRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationDataSourceRepresentation = (function () {
        function ResultListDataRepresentationDataSourceRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new DataSourceRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationDataSourceRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DataSourcesApi = (function (_super) {
        __extends(DataSourcesApi, _super);
        function DataSourcesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DataSourcesApi.prototype.getDataSources = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'tenantId': opts['tenantId']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/editor/data-sources', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationDataSourceRepresentation);
        };
        return DataSourcesApi;
    }(BaseApi$1));
    //# sourceMappingURL=dataSources.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DecisionAuditRepresentation = (function () {
        function DecisionAuditRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
            }
        }
        return DecisionAuditRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationDecisionAuditRepresentation = (function () {
        function ResultListDataRepresentationDecisionAuditRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new DecisionAuditRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationDecisionAuditRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DecisionAuditsApi = (function (_super) {
        __extends(DecisionAuditsApi, _super);
        function DecisionAuditsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DecisionAuditsApi.prototype.getAuditTrail = function (auditTrailId) {
            throwIfNotDefined(auditTrailId, 'taskId');
            var postBody = null;
            var pathParams = {
                'auditTrailId': auditTrailId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/decisions/audits/{auditTrailId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DecisionAuditRepresentation);
        };
        DecisionAuditsApi.prototype.getAuditTrails = function (decisionKey, dmnDeploymentId) {
            throwIfNotDefined(decisionKey, 'decisionKey');
            throwIfNotDefined(dmnDeploymentId, 'dmnDeploymentId');
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'decisionKey': decisionKey,
                'dmnDeploymentId': dmnDeploymentId
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/decisions/audits', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationDecisionAuditRepresentation);
        };
        return DecisionAuditsApi;
    }(BaseApi$1));
    //# sourceMappingURL=decisionAudits.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.JsonNode = (function () {
        function JsonNode(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return JsonNode;
    }());
    (function (JsonNode) {
        JsonNode.NodeTypeEnum = {
            ARRAY: 'ARRAY',
            BINARY: 'BINARY',
            BOOLEAN: 'BOOLEAN',
            MISSING: 'MISSING',
            NULL: 'NULL',
            NUMBER: 'NUMBER',
            OBJECT: 'OBJECT',
            POJO: 'POJO',
            STRING: 'STRING'
        };
    })(exports.JsonNode || (exports.JsonNode = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DecisionTablesApi = (function (_super) {
        __extends(DecisionTablesApi, _super);
        function DecisionTablesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DecisionTablesApi.prototype.getDecisionTableEditorJson = function (decisionTableId) {
            throwIfNotDefined(decisionTableId, 'decisionTableId');
            var postBody = null;
            var pathParams = {
                'decisionTableId': decisionTableId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/decisions/decision-tables/{decisionTableId}/editorJson', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, exports.JsonNode);
        };
        DecisionTablesApi.prototype.getDecisionTable = function (decisionTableId) {
            throwIfNotDefined(decisionTableId, 'decisionTableId');
            var postBody = null;
            var pathParams = {
                'decisionTableId': decisionTableId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/decisions/decision-tables/{decisionTableId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RuntimeDecisionTableRepresentation);
        };
        DecisionTablesApi.prototype.getDecisionTables = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'nameLike': opts['nameLike'],
                'keyLike': opts['keyLike'],
                'tenantIdLike': opts['tenantIdLike'],
                'deploymentId': opts['deploymentId'],
                'sort': opts['sort'],
                'order': opts['order'],
                'start': opts['start'],
                'size': opts['size']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/decisions/decision-tables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationRuntimeDecisionTableRepresentation);
        };
        return DecisionTablesApi;
    }(BaseApi$1));
    //# sourceMappingURL=decisionTables.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EndpointsApi = (function (_super) {
        __extends(EndpointsApi, _super);
        function EndpointsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        EndpointsApi.prototype.getEndpointConfiguration = function (endpointConfigurationId) {
            throwIfNotDefined(endpointConfigurationId, 'endpointConfigurationId');
            var postBody = null;
            var pathParams = {
                'endpointConfigurationId': endpointConfigurationId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/editor/endpoints/{endpointConfigurationId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointConfigurationRepresentation);
        };
        EndpointsApi.prototype.getEndpointConfigurations = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/editor/endpoints', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointConfigurationRepresentation);
        };
        return EndpointsApi;
    }(BaseApi$1));
    //# sourceMappingURL=endpoints.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstanceVariablesApi = (function (_super) {
        __extends(ProcessInstanceVariablesApi, _super);
        function ProcessInstanceVariablesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProcessInstanceVariablesApi.prototype.createOrUpdateProcessInstanceVariables = function (processInstanceId, restVariables) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            throwIfNotDefined(restVariables, 'restVariables');
            var postBody = restVariables;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ProcessInstanceVariablesApi.prototype.createProcessInstanceVariables = function (processInstanceId, restVariables) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            throwIfNotDefined(restVariables, 'restVariables');
            var postBody = restVariables;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ProcessInstanceVariablesApi.prototype.deleteProcessInstanceVariable = function (processInstanceId, variableName) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            throwIfNotDefined(variableName, 'variableName');
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId, 'variableName': variableName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables/{variableName}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ProcessInstanceVariablesApi.prototype.getProcessInstanceVariable = function (processInstanceId, variableName) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            throwIfNotDefined(variableName, 'variableName');
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId, 'variableName': variableName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables/{variableName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RestVariable);
        };
        ProcessInstanceVariablesApi.prototype.getProcessInstanceVariables = function (processInstanceId) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            var postBody = null;
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ProcessInstanceVariablesApi.prototype.updateProcessInstanceVariable = function (processInstanceId, variableName, restVariable) {
            throwIfNotDefined(processInstanceId, 'processInstanceId');
            throwIfNotDefined(variableName, 'variableName');
            throwIfNotDefined(restVariable, 'restVariable');
            var postBody = restVariable;
            var pathParams = {
                'processInstanceId': processInstanceId, 'variableName': variableName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables/{variableName}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RestVariable);
        };
        return ProcessInstanceVariablesApi;
    }(BaseApi$1));
    //# sourceMappingURL=processInstanceVariables.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessScopeRepresentation = (function () {
        function ProcessScopeRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ProcessScopeRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessScopesApi = (function (_super) {
        __extends(ProcessScopesApi, _super);
        function ProcessScopesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProcessScopesApi.prototype.getRuntimeProcessScopes = function (processScopesRequest) {
            throwIfNotDefined(processScopesRequest, 'processScopesRequest');
            var postBody = processScopesRequest;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-scopes', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessScopeRepresentation);
        };
        return ProcessScopesApi;
    }(BaseApi$1));
    //# sourceMappingURL=processScopes.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppDeploymentRepresentation = (function () {
        function AppDeploymentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.appDefinition = input.appDefinition ? new AppDefinitionRepresentation(input.appDefinition) : undefined;
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                this.createdBy = input.createdBy ? new LightUserRepresentation(input.createdBy) : undefined;
            }
        }
        return AppDeploymentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationAppDeploymentRepresentation = (function () {
        function ResultListDataRepresentationAppDeploymentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new AppDeploymentRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationAppDeploymentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RuntimeAppDeploymentsApi = (function (_super) {
        __extends(RuntimeAppDeploymentsApi, _super);
        function RuntimeAppDeploymentsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RuntimeAppDeploymentsApi.prototype.deleteAppDeployment = function (appDeploymentId) {
            throwIfNotDefined(appDeploymentId, 'appDeploymentId');
            var postBody = null;
            var pathParams = {
                'appDeploymentId': appDeploymentId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/runtime-app-deployments/{appDeploymentId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RuntimeAppDeploymentsApi.prototype.exportAppDefinition = function (deploymentId) {
            throwIfNotDefined(deploymentId, 'deploymentId');
            var postBody = null;
            var pathParams = {
                'deploymentId': deploymentId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/zip'];
            return this.apiClient.callApi('/api/enterprise/export-app-deployment/{deploymentId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RuntimeAppDeploymentsApi.prototype.getAppDefinitions = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'nameLike': opts['nameLike'],
                'tenantId': opts['tenantId'],
                'latest': opts['latest'],
                'start': opts['start'],
                'sort': opts['sort'],
                'order': opts['order'],
                'size': opts['size']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/runtime-app-deployments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAppDeploymentRepresentation);
        };
        RuntimeAppDeploymentsApi.prototype.getAppDeployment = function (appDeploymentId) {
            throwIfNotDefined(appDeploymentId, 'appDeploymentId');
            var postBody = null;
            var pathParams = {
                'appDeploymentId': appDeploymentId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/runtime-app-deployments/{appDeploymentId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AppDeploymentRepresentation);
        };
        RuntimeAppDeploymentsApi.prototype.getRuntimeAppDeploymentByDeployment = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'deploymentId': opts['deploymentId'],
                'dmnDeploymentId': opts['dmnDeploymentId']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/runtime-app-deployment', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AppDeploymentRepresentation);
        };
        return RuntimeAppDeploymentsApi;
    }(BaseApi$1));
    //# sourceMappingURL=runtimeAppDeployments.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ScriptFilesApi = (function (_super) {
        __extends(ScriptFilesApi, _super);
        function ScriptFilesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ScriptFilesApi.prototype.getControllers = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['text/html'];
            return this.apiClient.callApi('/api/enterprise/script-files/controllers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ScriptFilesApi.prototype.getLibraries = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['text/html'];
            return this.apiClient.callApi('/api/enterprise/script-files/libraries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return ScriptFilesApi;
    }(BaseApi$1));
    //# sourceMappingURL=scriptFiles.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SubmittedFormRepresentation = (function () {
        function SubmittedFormRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.form = input.form ? new FormDefinitionRepresentation(input.form) : undefined;
                this.submitted = input.submitted ? DateAlfresco.parseDate(input.submitted) : undefined;
                this.submittedBy = input.submittedBy ? new LightUserRepresentation(input.submittedBy) : undefined;
            }
        }
        return SubmittedFormRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationSubmittedFormRepresentation = (function () {
        function ResultListDataRepresentationSubmittedFormRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new SubmittedFormRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationSubmittedFormRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SubmittedFormsApi = (function (_super) {
        __extends(SubmittedFormsApi, _super);
        function SubmittedFormsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SubmittedFormsApi.prototype.getFormSubmittedForms = function (formId, opts) {
            throwIfNotDefined(formId, 'formId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'formId': formId
            };
            var queryParams = {
                'submittedBy': opts['submittedBy'],
                'start': opts['start'],
                'size': opts['size']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/form-submitted-forms/{formId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationSubmittedFormRepresentation);
        };
        SubmittedFormsApi.prototype.getProcessSubmittedForms = function (processId) {
            throwIfNotDefined(processId, 'processId');
            var postBody = null;
            var pathParams = {
                'processId': processId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-submitted-forms/{processId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationSubmittedFormRepresentation);
        };
        SubmittedFormsApi.prototype.getSubmittedFrom = function (submittedFormId) {
            throwIfNotDefined(submittedFormId, 'submittedFormId');
            var postBody = null;
            var pathParams = {
                'submittedFormId': submittedFormId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/submitted-forms/{submittedFormId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SubmittedFormRepresentation);
        };
        SubmittedFormsApi.prototype.getTaskSubmittedForms = function (taskId) {
            throwIfNotDefined(taskId, 'taskId');
            var postBody = null;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/task-submitted-form/{taskId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SubmittedFormRepresentation);
        };
        return SubmittedFormsApi;
    }(BaseApi$1));
    //# sourceMappingURL=submittedForms.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GlobalDateFormatRepresentation = (function () {
        function GlobalDateFormatRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GlobalDateFormatRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PasswordValidationConstraints = (function () {
        function PasswordValidationConstraints(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return PasswordValidationConstraints;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SystemPropertiesRepresentation = (function () {
        function SystemPropertiesRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SystemPropertiesRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SystemPropertiesApi = (function (_super) {
        __extends(SystemPropertiesApi, _super);
        function SystemPropertiesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SystemPropertiesApi.prototype.getGlobalDateFormat = function (tenantId) {
            throwIfNotDefined(tenantId, 'tenantId');
            var postBody = null;
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/system/properties/global-date-format/{tenantId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GlobalDateFormatRepresentation);
        };
        SystemPropertiesApi.prototype.getPasswordValidationConstraints = function (tenantId) {
            throwIfNotDefined(tenantId, 'tenantId');
            var postBody = null;
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/system/properties/password-validation-constraints/{tenantId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PasswordValidationConstraints);
        };
        SystemPropertiesApi.prototype.getProperties = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/system/properties', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SystemPropertiesRepresentation);
        };
        SystemPropertiesApi.prototype.involvedUsersCanEditForms = function (tenantId) {
            throwIfNotDefined(tenantId, 'tenantId');
            var postBody = null;
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/system/properties/involved-users-can-edit-forms/{tenantId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return SystemPropertiesApi;
    }(BaseApi$1));
    //# sourceMappingURL=systemProperties.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskActionsApi = (function (_super) {
        __extends(TaskActionsApi, _super);
        function TaskActionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TaskActionsApi.prototype.assignTask = function (taskId, userIdentifier) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(userIdentifier, 'userIdentifier');
            var postBody = userIdentifier;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/assign', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
        };
        TaskActionsApi.prototype.attachForm = function (taskId, formIdentifier) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(formIdentifier, 'formIdentifier');
            var postBody = formIdentifier;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/attach-form', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskActionsApi.prototype.claimTask = function (taskId) {
            throwIfNotDefined(taskId, 'taskId');
            var postBody = null;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/claim', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskActionsApi.prototype.completeTask = function (taskId) {
            throwIfNotDefined(taskId, 'taskId');
            var postBody = null;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/complete', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskActionsApi.prototype.delegateTask = function (taskId, userIdentifier) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(userIdentifier, 'userIdentifier');
            var postBody = userIdentifier;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/delegate', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskActionsApi.prototype.involveGroup = function (taskId, groupId) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(groupId, 'groupId');
            var postBody = null;
            var pathParams = {
                'taskId': taskId, 'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/groups/{groupId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskActionsApi.prototype.involveUser = function (taskId, userIdentifier) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(userIdentifier, 'userIdentifier');
            var postBody = userIdentifier;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/involve', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskActionsApi.prototype.removeForm = function (taskId) {
            throwIfNotDefined(taskId, 'taskId');
            var postBody = null;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/remove-form', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskActionsApi.prototype.removeInvolvedUser = function (taskId, identifier) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(identifier, 'identifier');
            var pathParams = {
                'taskId': taskId, 'groupId': identifier
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            if (identifier instanceof String) {
                var postBody = null;
                return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/groups/{groupId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
            }
            else {
                var postBody = identifier;
                return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/remove-involved', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
            }
        };
        TaskActionsApi.prototype.resolveTask = function (taskId) {
            throwIfNotDefined(taskId, 'taskId');
            var postBody = null;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/resolve', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskActionsApi.prototype.unclaimTask = function (taskId) {
            throwIfNotDefined(taskId, 'taskId');
            var postBody = null;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/unclaim', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return TaskActionsApi;
    }(BaseApi$1));
    //# sourceMappingURL=taskActions.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskFormsApi = (function (_super) {
        __extends(TaskFormsApi, _super);
        function TaskFormsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TaskFormsApi.prototype.completeTaskForm = function (taskId, completeTaskFormRepresentation) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(completeTaskFormRepresentation, 'completeTaskFormRepresentation');
            var postBody = completeTaskFormRepresentation;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskFormsApi.prototype.getProcessInstanceVariables = function (taskId) {
            throwIfNotDefined(taskId, 'taskId');
            var postBody = null;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}/variables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceVariableRepresentation);
        };
        TaskFormsApi.prototype.getRestFieldColumnValues = function (taskId, field, column) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw "Missing param 'taskId' in getRestFieldValues";
            }
            if (field === undefined || field === null) {
                throw "Missing param 'field' in getRestFieldValues";
            }
            if (column === undefined || column === null) {
                throw "Missing param 'column' in getRestFieldValues";
            }
            var pathParams = {
                'taskId': taskId,
                'field': field,
                'column': column
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}/form-values/{field}/{column}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskFormsApi.prototype.getRestFieldValues = function (taskId, field) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(field, 'field');
            var postBody = null;
            var pathParams = {
                'taskId': taskId, 'field': field
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}/form-values/{field}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormValueRepresentation);
        };
        TaskFormsApi.prototype.getTaskForm = function (taskId) {
            throwIfNotDefined(taskId, 'taskId');
            var postBody = null;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormDefinitionRepresentation);
        };
        TaskFormsApi.prototype.saveTaskForm = function (taskId, saveTaskFormRepresentation) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(saveTaskFormRepresentation, 'saveTaskFormRepresentation');
            var postBody = saveTaskFormRepresentation;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}/save-form', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskFormsApi.prototype.getTaskFormVariables = function (taskId) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw "Missing param 'taskId' in getTaskFormVariables";
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}/variables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return TaskFormsApi;
    }(BaseApi$1));
    //# sourceMappingURL=taskForms.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentAuditInfo = (function () {
        function CommentAuditInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return CommentAuditInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskAuditInfoRepresentation = (function () {
        function TaskAuditInfoRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.comments) {
                    this.comments = input.comments.map(function (item) {
                        return new CommentAuditInfo(item);
                    });
                }
                if (input.formData) {
                    this.formData = input.formData.map(function (item) {
                        return new AuditLogFormDataRepresentation(item);
                    });
                }
            }
        }
        return TaskAuditInfoRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TasksApi = (function (_super) {
        __extends(TasksApi, _super);
        function TasksApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TasksApi.prototype.createIdentityLink = function (taskId, identityLinkRepresentation) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(identityLinkRepresentation, 'identityLinkRepresentation');
            var postBody = identityLinkRepresentation;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        TasksApi.prototype.createNewTask = function (taskRepresentation) {
            throwIfNotDefined(taskRepresentation, 'taskRepresentation');
            var postBody = taskRepresentation;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
        };
        TasksApi.prototype.deleteIdentityLink = function (taskId, family, identityId, type) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(family, 'family');
            throwIfNotDefined(identityId, 'identityId');
            throwIfNotDefined(type, 'type');
            var postBody = null;
            var pathParams = {
                'taskId': taskId, 'family': family, 'identityId': identityId, 'type': type
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TasksApi.prototype.deleteTask = function (taskId) {
            throwIfNotDefined(taskId, 'taskId');
            var postBody = null;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TasksApi.prototype.filterTasks = function (tasksFilter) {
            throwIfNotDefined(tasksFilter, 'tasksFilter');
            var postBody = tasksFilter;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/filter', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);
        };
        TasksApi.prototype.getIdentityLinkType = function (taskId, family, identityId, type) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(family, 'family');
            throwIfNotDefined(identityId, 'identityId');
            throwIfNotDefined(type, 'type');
            var postBody = null;
            var pathParams = {
                'taskId': taskId, 'family': family, 'identityId': identityId, 'type': type
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        TasksApi.prototype.getIdentityLinksForFamily = function (taskId, family) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(family, 'family');
            var postBody = null;
            var pathParams = {
                'taskId': taskId, 'family': family
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks/{family}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        TasksApi.prototype.getIdentityLinks = function (taskId) {
            throwIfNotDefined(taskId, 'taskId');
            var postBody = null;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        TasksApi.prototype.getTaskAuditLog = function (taskId) {
            throwIfNotDefined(taskId, 'taskId');
            var postBody = null;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/audit', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskAuditInfoRepresentation);
        };
        TasksApi.prototype.getTask = function (taskId) {
            throwIfNotDefined(taskId, 'taskId');
            var postBody = null;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
        };
        TasksApi.prototype.listHistoricTasks = function (queryRequest) {
            throwIfNotDefined(queryRequest, 'queryRequest');
            var postBody = queryRequest;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/historic-tasks/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);
        };
        TasksApi.prototype.listTasks = function (tasksQuery) {
            throwIfNotDefined(tasksQuery, 'tasksQuery');
            var postBody = tasksQuery;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);
        };
        TasksApi.prototype.updateTask = function (taskId, updated) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(updated, 'updated');
            var postBody = updated;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
        };
        return TasksApi;
    }(BaseApi$1));
    //# sourceMappingURL=tasks.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskVariablesApi = (function (_super) {
        __extends(TaskVariablesApi, _super);
        function TaskVariablesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TaskVariablesApi.prototype.createTaskVariable = function (taskId, restVariables) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(restVariables, 'restVariables');
            var postBody = restVariables;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RestVariable);
        };
        TaskVariablesApi.prototype.deleteAllLocalTaskVariables = function (taskId) {
            throwIfNotDefined(taskId, 'taskId');
            var postBody = null;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskVariablesApi.prototype.deleteVariable = function (taskId, variableName, opts) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(variableName, 'variableName');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'taskId': taskId, 'variableName': variableName
            };
            var queryParams = {
                'scope': opts['scope']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables/{variableName}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskVariablesApi.prototype.getVariable = function (taskId, variableName, opts) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(variableName, 'variableName');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'taskId': taskId, 'variableName': variableName
            };
            var queryParams = {
                'scope': opts['scope']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables/{variableName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RestVariable);
        };
        TaskVariablesApi.prototype.getVariables = function (taskId, opts) {
            throwIfNotDefined(taskId, 'taskId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {
                'scope': opts['scope']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RestVariable);
        };
        TaskVariablesApi.prototype.updateVariable = function (taskId, variableName, restVariable) {
            throwIfNotDefined(taskId, 'taskId');
            throwIfNotDefined(variableName, 'variableName');
            throwIfNotDefined(restVariable, 'restVariable');
            var postBody = restVariable;
            var pathParams = {
                'taskId': taskId, 'variableName': variableName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables/{variableName}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RestVariable);
        };
        return TaskVariablesApi;
    }(BaseApi$1));
    //# sourceMappingURL=taskVariables.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstanceFilterRepresentation = (function () {
        function ProcessInstanceFilterRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ProcessInstanceFilterRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserProcessInstanceFilterRepresentation = (function () {
        function UserProcessInstanceFilterRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.filter = input.filter ? new ProcessInstanceFilterRepresentation(input.filter) : undefined;
            }
        }
        return UserProcessInstanceFilterRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationUserProcessInstanceFilterRepresentation = (function () {
        function ResultListDataRepresentationUserProcessInstanceFilterRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new UserProcessInstanceFilterRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationUserProcessInstanceFilterRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.TaskFilterRepresentation = (function () {
        function TaskFilterRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.dueAfter = input.dueAfter ? DateAlfresco.parseDate(input.dueAfter) : undefined;
                this.dueBefore = input.dueBefore ? DateAlfresco.parseDate(input.dueBefore) : undefined;
            }
        }
        return TaskFilterRepresentation;
    }());
    (function (TaskFilterRepresentation) {
        TaskFilterRepresentation.StateEnum = {
            Active: 'active',
            Completed: 'completed',
            All: 'all'
        };
    })(exports.TaskFilterRepresentation || (exports.TaskFilterRepresentation = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserTaskFilterRepresentation = (function () {
        function UserTaskFilterRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.filter = input.filter ? new exports.TaskFilterRepresentation(input.filter) : undefined;
            }
        }
        return UserTaskFilterRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationUserTaskFilterRepresentation = (function () {
        function ResultListDataRepresentationUserTaskFilterRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new UserTaskFilterRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationUserTaskFilterRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserFiltersApi = (function (_super) {
        __extends(UserFiltersApi, _super);
        function UserFiltersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UserFiltersApi.prototype.createUserProcessInstanceFilter = function (userProcessInstanceFilterRepresentation) {
            throwIfNotDefined(userProcessInstanceFilterRepresentation, 'userProcessInstanceFilterRepresentation');
            var postBody = userProcessInstanceFilterRepresentation;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/processes', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserProcessInstanceFilterRepresentation);
        };
        UserFiltersApi.prototype.createUserTaskFilter = function (userTaskFilterRepresentation) {
            throwIfNotDefined(userTaskFilterRepresentation, 'userTaskFilterRepresentation');
            var postBody = userTaskFilterRepresentation;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/tasks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserTaskFilterRepresentation);
        };
        UserFiltersApi.prototype.deleteUserProcessInstanceFilter = function (userFilterId) {
            throwIfNotDefined(userFilterId, 'userFilterId');
            var postBody = null;
            var pathParams = {
                'userFilterId': userFilterId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/processes/{userFilterId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UserFiltersApi.prototype.deleteUserTaskFilter = function (userFilterId) {
            throwIfNotDefined(userFilterId, 'userFilterId');
            var postBody = null;
            var pathParams = {
                'userFilterId': userFilterId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/tasks/{userFilterId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UserFiltersApi.prototype.getUserProcessInstanceFilter = function (userFilterId) {
            throwIfNotDefined(userFilterId, 'userFilterId');
            var postBody = null;
            var pathParams = {
                'userFilterId': userFilterId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/processes/{userFilterId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserProcessInstanceFilterRepresentation);
        };
        UserFiltersApi.prototype.getUserProcessInstanceFilters = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'appId': opts['appId']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/processes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationUserProcessInstanceFilterRepresentation);
        };
        UserFiltersApi.prototype.getUserTaskFilter = function (userFilterId) {
            throwIfNotDefined(userFilterId, 'userFilterId');
            var postBody = null;
            var pathParams = {
                'userFilterId': userFilterId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/tasks/{userFilterId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserTaskFilterRepresentation);
        };
        UserFiltersApi.prototype.getUserTaskFilters = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'appId': opts['appId']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/tasks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationUserTaskFilterRepresentation);
        };
        UserFiltersApi.prototype.orderUserProcessInstanceFilters = function (filterOrderRepresentation) {
            throwIfNotDefined(filterOrderRepresentation, 'filterOrderRepresentation');
            var postBody = filterOrderRepresentation;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/processes', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UserFiltersApi.prototype.orderUserTaskFilters = function (filterOrderRepresentation) {
            throwIfNotDefined(filterOrderRepresentation, 'filterOrderRepresentation');
            var postBody = filterOrderRepresentation;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/tasks', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UserFiltersApi.prototype.updateUserProcessInstanceFilter = function (userFilterId, userProcessInstanceFilterRepresentation) {
            throwIfNotDefined(userFilterId, 'userFilterId');
            throwIfNotDefined(userProcessInstanceFilterRepresentation, 'userProcessInstanceFilterRepresentation');
            var postBody = userProcessInstanceFilterRepresentation;
            var pathParams = {
                'userFilterId': userFilterId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/processes/{userFilterId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserProcessInstanceFilterRepresentation);
        };
        UserFiltersApi.prototype.updateUserTaskFilter = function (userFilterId, userTaskFilterRepresentation) {
            throwIfNotDefined(userFilterId, 'userFilterId');
            throwIfNotDefined(userTaskFilterRepresentation, 'userTaskFilterRepresentation');
            var postBody = userTaskFilterRepresentation;
            var pathParams = {
                'userFilterId': userFilterId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/tasks/{userFilterId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserTaskFilterRepresentation);
        };
        return UserFiltersApi;
    }(BaseApi$1));
    //# sourceMappingURL=userFilters.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserProfileApi = (function (_super) {
        __extends(UserProfileApi, _super);
        function UserProfileApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UserProfileApi.prototype.changePassword = function (changePasswordRepresentation) {
            throwIfNotDefined(changePasswordRepresentation, 'changePasswordRepresentation');
            var postBody = changePasswordRepresentation;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/profile-password', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UserProfileApi.prototype.getProfilePicture = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json', '*/*'];
            return this.apiClient.callApi('/api/enterprise/profile-picture', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UserProfileApi.prototype.getProfilePictureUrl = function () {
            return this.apiClient.basePath + '/app/rest/admin/profile-picture';
        };
        UserProfileApi.prototype.getProfile = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/profile', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserRepresentation);
        };
        UserProfileApi.prototype.updateProfile = function (userRepresentation) {
            throwIfNotDefined(userRepresentation, 'userRepresentation');
            var postBody = userRepresentation;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/profile', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserRepresentation);
        };
        UserProfileApi.prototype.uploadProfilePicture = function (file) {
            throwIfNotDefined(file, 'file');
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {
                'file': file
            };
            var contentTypes = ['multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/profile-picture', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ImageUploadRepresentation);
        };
        return UserProfileApi;
    }(BaseApi$1));
    //# sourceMappingURL=userProfile.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UsersApi = (function (_super) {
        __extends(UsersApi, _super);
        function UsersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UsersApi.prototype.executeAction = function (userId, actionRequest) {
            throwIfNotDefined(userId, 'userId');
            throwIfNotDefined(actionRequest, 'actionRequest');
            var postBody = actionRequest;
            var pathParams = {
                'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/users/{userId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UsersApi.prototype.getUserProfilePictureUrl = function (userId) {
            return this.apiClient.basePath + '/app/rest/users/' + userId + '/picture';
        };
        UsersApi.prototype.getUser = function (userId) {
            throwIfNotDefined(userId, 'userId');
            var postBody = null;
            var pathParams = {
                'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/users/{userId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserRepresentation);
        };
        UsersApi.prototype.getUsers = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'filter': opts['filter'],
                'email': opts['email'],
                'externalId': opts['externalId'],
                'externalIdCaseInsensitive': opts['externalIdCaseInsensitive'],
                'excludeTaskId': opts['excludeTaskId'],
                'excludeProcessId': opts['excludeProcessId'],
                'groupId': opts['groupId'],
                'tenantId': opts['tenantId']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/users', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationLightUserRepresentation);
        };
        UsersApi.prototype.requestPasswordReset = function (resetPassword) {
            throwIfNotDefined(resetPassword, 'resetPassword');
            var postBody = resetPassword;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/idm/passwords', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UsersApi.prototype.updateUser = function (userId, userRequest) {
            throwIfNotDefined(userId, 'userId');
            throwIfNotDefined(userRequest, 'userRequest');
            var postBody = userRequest;
            var pathParams = {
                'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/users/{userId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserRepresentation);
        };
        return UsersApi;
    }(BaseApi$1));
    //# sourceMappingURL=users.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ReportApi = (function (_super) {
        __extends(ReportApi, _super);
        function ReportApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ReportApi.prototype.createDefaultReports = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/default-reports', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.getTasksByProcessDefinitionId = function (reportId, processDefinitionId) {
            var postBody = null;
            if (reportId === undefined || reportId === null) {
                throw "Missing param 'reportId' in getTasksByProcessDefinitionId";
            }
            if (processDefinitionId === undefined || processDefinitionId === null) {
                throw "Missing param 'processDefinitionId' in getTasksByProcessDefinitionId";
            }
            var pathParams = {
                'reportId': reportId
            };
            var queryParams = {
                'processDefinitionId': processDefinitionId
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/report-params/{reportId}/tasks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.getReportsByParams = function (reportId, paramsQuery) {
            var postBody = paramsQuery;
            if (reportId === undefined || reportId === null) {
                throw "Missing param 'reportId' in getReportsByParams";
            }
            var pathParams = {
                'reportId': reportId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/report-params/{reportId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.getProcessDefinitions = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/process-definitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.getReportParams = function (reportId) {
            var postBody = null;
            if (reportId === undefined || reportId === null) {
                throw "Missing param 'reportId' in getReportParams";
            }
            var pathParams = {
                'reportId': reportId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/report-params/{reportId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.getReportList = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/reports', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.updateReport = function (reportId, name) {
            var postBody = {
                'name': name
            };
            if (reportId === undefined || reportId === null) {
                throw "Missing param 'reportId' in updateReport";
            }
            var pathParams = {
                'reportId': reportId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/reports/{reportId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.exportToCsv = function (reportId, queryParams) {
            var postBody = queryParams;
            if (reportId === undefined || reportId === null) {
                throw "Missing param 'reportId' in exportToCsv";
            }
            if (queryParams === undefined || queryParams === null) {
                throw "Missing param 'queryParams' in exportToCsv";
            }
            if (queryParams.reportName === undefined || queryParams.reportName === null) {
                throw "Missing param 'reportName' in exportToCsv";
            }
            var pathParams = {
                'reportId': reportId
            };
            var headerParams = {};
            var formParams = {};
            queryParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/reports/{reportId}/export-to-csv', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.saveReport = function (reportId, queryParams) {
            var postBody = queryParams;
            if (reportId === undefined || reportId === null) {
                throw "Missing param 'reportId' in saveReport";
            }
            if (queryParams === undefined || queryParams === null) {
                throw "Missing param 'queryParams' in queryParams";
            }
            if (queryParams.reportName === undefined || queryParams.reportName === null) {
                throw "Missing param 'reportName' in exportToCsv";
            }
            queryParams.__reportName = queryParams.reportName;
            var pathParams = {
                'reportId': reportId
            };
            var headerParams = {};
            var formParams = {};
            queryParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/reports/{reportId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.deleteReport = function (reportId) {
            var postBody = null;
            if (reportId === undefined || reportId === null) {
                throw "Missing param 'reportId' in delete";
            }
            var pathParams = {
                'reportId': reportId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/reports/{reportId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return ReportApi;
    }(BaseApi$1));
    //# sourceMappingURL=report.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TemporaryApi = (function (_super) {
        __extends(TemporaryApi, _super);
        function TemporaryApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TemporaryApi.prototype.completeTasks = function (userId, processDefinitionKey) {
            var postBody = null;
            if (userId === undefined || userId === null) {
                throw "Missing param 'userId' in completeTasks";
            }
            if (processDefinitionKey === undefined || processDefinitionKey === null) {
                throw "Missing param 'processDefinitionKey' in completeTasks";
            }
            var pathParams = {};
            var queryParams = {
                'userId': userId,
                'processDefinitionKey': processDefinitionKey
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/temporary/generate-report-data/complete-tasks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TemporaryApi.prototype.generateData = function (userId, processDefinitionKey) {
            var postBody = null;
            if (userId === undefined || userId === null) {
                throw "Missing param 'userId' in generateData";
            }
            if (processDefinitionKey === undefined || processDefinitionKey === null) {
                throw "Missing param 'processDefinitionKey' in generateData";
            }
            var pathParams = {};
            var queryParams = {
                'userId': userId,
                'processDefinitionKey': processDefinitionKey
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/temporary/generate-report-data/start-process', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TemporaryApi.prototype.getHeaders = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/temporary/example-headers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TemporaryApi.prototype.getOptions = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/temporary/example-options', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return TemporaryApi;
    }(BaseApi$1));
    //# sourceMappingURL=temporary.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var APS_APIS = [AboutApi, AccountIntegrationApi, AdminEndpointsApi, AdminGroupsApi, AdminTenantsApi, AdminUsersApi, AppDefinitionsApi, ChecklistsApi, ActivitiCommentsApi, ContentApi$1, DataSourcesApi, DecisionAuditsApi, DecisionTablesApi, EndpointsApi, FormModelsApi, ActivitiGroupsApi, IDMSyncApi, IntegrationAlfrescoCloudApi, IntegrationAlfrescoOnPremiseApi, IntegrationBoxApi, IntegrationDriveApi, ModelsApi, ModelJsonBpmnApi, ModelsBpmnApi, ModelsHistoryApi, ProcessDefinitionsApi, ProcessInstancesApi, ProcessInstanceVariablesApi, ProcessScopesApi, RuntimeAppDefinitionsApi, RuntimeAppDeploymentsApi, ScriptFilesApi, SubmittedFormsApi, SystemPropertiesApi, TaskActionsApi, TaskFormsApi, TasksApi, TaskVariablesApi, UserFiltersApi, UserProfileApi, UsersApi, ReportApi, TemporaryApi];

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstancesApi$1 = (function () {
        function ProcessInstancesApi$1() {
        }
        ProcessInstancesApi$1.prototype.init = function (alfrescoApi) {
            this.processInstancesApi = new ProcessInstancesApi(alfrescoApi);
            this.activitiCommentsApi = new ActivitiCommentsApi(alfrescoApi);
        };
        ProcessInstancesApi$1.prototype.addProcessInstanceComment = function (commentRequest, processInstanceId) {
            return this.activitiCommentsApi.addProcessInstanceComment(commentRequest, processInstanceId);
        };
        ProcessInstancesApi$1.prototype.deleteProcessInstance = function (processInstanceId) {
            return this.processInstancesApi.deleteProcessInstance(processInstanceId);
        };
        ProcessInstancesApi$1.prototype.getProcessInstanceComments = function (processInstanceId, opts) {
            return this.activitiCommentsApi.getProcessInstanceComments(processInstanceId, opts);
        };
        ProcessInstancesApi$1.prototype.getProcessInstanceStartForm = function (processInstanceId) {
            return this.processInstancesApi.getProcessInstanceStartForm(processInstanceId);
        };
        ProcessInstancesApi$1.prototype.getProcessInstance = function (processInstanceId) {
            return this.processInstancesApi.getProcessInstance(processInstanceId);
        };
        return ProcessInstancesApi$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstancesInformationApi = (function () {
        function ProcessInstancesInformationApi() {
        }
        ProcessInstancesInformationApi.prototype.init = function (alfrescoApi) {
            this.processInstancesApi = new ProcessInstancesApi(alfrescoApi);
        };
        ProcessInstancesInformationApi.prototype.getProcessInstanceContent = function (processInstanceId) {
            return this.processInstancesApi.getProcessInstanceContent(processInstanceId);
        };
        ProcessInstancesInformationApi.prototype.startNewProcessInstance = function (startRequest) {
            return this.processInstancesApi.startNewProcessInstance(startRequest);
        };
        return ProcessInstancesInformationApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstancesListingApi = (function () {
        function ProcessInstancesListingApi() {
        }
        ProcessInstancesListingApi.prototype.init = function (alfrescoApi) {
            this.processInstancesApi = new ProcessInstancesApi(alfrescoApi);
        };
        ProcessInstancesListingApi.prototype.filterProcessInstances = function (filterRequest) {
            return this.processInstancesApi.filterProcessInstances(filterRequest);
        };
        ProcessInstancesListingApi.prototype.getProcessInstances = function (processInstancesQuery) {
            return this.processInstancesApi.getProcessInstances(processInstancesQuery);
        };
        return ProcessInstancesListingApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstanceVariablesApi$1 = (function (_super) {
        __extends(ProcessInstanceVariablesApi, _super);
        function ProcessInstanceVariablesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProcessInstanceVariablesApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ProcessInstanceVariablesApi;
    }(ProcessInstanceVariablesApi));
    //# sourceMappingURL=ProcessInstanceVariablesApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessScopeApi = (function (_super) {
        __extends(ProcessScopeApi, _super);
        function ProcessScopeApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProcessScopeApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ProcessScopeApi;
    }(ProcessScopesApi));
    //# sourceMappingURL=ProcessScopeApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProfileApi = (function (_super) {
        __extends(ProfileApi, _super);
        function ProfileApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProfileApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ProfileApi;
    }(UserProfileApi));
    //# sourceMappingURL=ProfileApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ScriptFileApi = (function (_super) {
        __extends(ScriptFileApi, _super);
        function ScriptFileApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ScriptFileApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ScriptFileApi;
    }(ScriptFilesApi));
    //# sourceMappingURL=ScriptFileApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SystemPropertiesApi$1 = (function (_super) {
        __extends(SystemPropertiesApi, _super);
        function SystemPropertiesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SystemPropertiesApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return SystemPropertiesApi;
    }(SystemPropertiesApi));
    //# sourceMappingURL=SystemPropertiesApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskApi = (function () {
        function TaskApi() {
        }
        TaskApi.prototype.init = function (alfrescoApi) {
            this.taskactionsApi = new TaskActionsApi(alfrescoApi);
            this.activitiCommentsApi = new ActivitiCommentsApi(alfrescoApi);
            this.checklistsApi = new ChecklistsApi(alfrescoApi);
            this.taskFormsApi = new TaskFormsApi(alfrescoApi);
            this.tasksApi = new TasksApi(alfrescoApi);
            this.contentApi = new ContentApi$1(alfrescoApi);
        };
        TaskApi.prototype.addSubtask = function (taskId, taskRepresentation) {
            return this.checklistsApi.addSubtask(taskId, taskRepresentation);
        };
        TaskApi.prototype.addTaskComment = function (commentRequest, taskId) {
            return this.activitiCommentsApi.addTaskComment(commentRequest, taskId);
        };
        TaskApi.prototype.assignTask = function (taskId, userIdentifier) {
            return this.taskactionsApi.assignTask(taskId, userIdentifier);
        };
        TaskApi.prototype.attachForm = function (taskId, formIdentifier) {
            return this.taskactionsApi.attachForm(taskId, formIdentifier);
        };
        TaskApi.prototype.claimTask = function (taskId) {
            return this.taskactionsApi.claimTask(taskId);
        };
        TaskApi.prototype.completeTaskForm = function (taskId, completeTaskFormRepresentation) {
            return this.taskFormsApi.completeTaskForm(taskId, completeTaskFormRepresentation);
        };
        TaskApi.prototype.completeTask = function (taskId) {
            return this.taskactionsApi.completeTask(taskId);
        };
        TaskApi.prototype.createNewTask = function (taskRepresentation) {
            return this.tasksApi.createNewTask(taskRepresentation);
        };
        TaskApi.prototype.createRelatedContentOnTask = function (taskId, relatedContent, opts) {
            return this.contentApi.createRelatedContentOnTask(taskId, relatedContent, opts);
        };
        TaskApi.prototype.deleteTask = function (taskId) {
            return this.tasksApi.deleteTask(taskId);
        };
        TaskApi.prototype.filterTasks = function (tasksFilter) {
            return this.tasksApi.filterTasks(tasksFilter);
        };
        TaskApi.prototype.getChecklist = function (taskId) {
            return this.checklistsApi.getChecklist(taskId);
        };
        TaskApi.prototype.getTaskAuditLog = function (taskId) {
            return this.tasksApi.getTaskAuditLog(taskId);
        };
        TaskApi.prototype.getTaskAuditJson = function (taskId) {
            return this.tasksApi.getTaskAuditLog(taskId);
        };
        TaskApi.prototype.getTaskAuditPdf = function (taskId) {
            return this.tasksApi.getTaskAuditLog(taskId);
        };
        TaskApi.prototype.getRelatedContentForTask = function (taskId, opts) {
            return this.contentApi.getRelatedContentForTask(taskId, opts);
        };
        TaskApi.prototype.getRestFieldValuesColumn = function (taskId, field, column) {
            return this.taskFormsApi.getRestFieldColumnValues(taskId, field, column);
        };
        TaskApi.prototype.getRestFieldValues = function (taskId, field) {
            return this.taskFormsApi.getRestFieldValues(taskId, field);
        };
        TaskApi.prototype.getTaskComments = function (taskId, opts) {
            return this.activitiCommentsApi.getTaskComments(taskId, opts);
        };
        TaskApi.prototype.getTaskForm = function (taskId) {
            return this.taskFormsApi.getTaskForm(taskId);
        };
        TaskApi.prototype.getTask = function (taskId) {
            return this.tasksApi.getTask(taskId);
        };
        TaskApi.prototype.involveUser = function (taskId, userIdentifier) {
            return this.taskactionsApi.involveUser(taskId, userIdentifier);
        };
        TaskApi.prototype.listTasks = function (tasksQuery) {
            return this.tasksApi.listTasks(tasksQuery);
        };
        TaskApi.prototype.orderChecklist = function (taskId, orderRepresentation) {
            return this.checklistsApi.orderChecklist(taskId, orderRepresentation);
        };
        TaskApi.prototype.removeForm = function (taskId) {
            return this.taskactionsApi.removeForm(taskId);
        };
        TaskApi.prototype.removeInvolvedUser = function (taskId, groupId) {
            return this.taskactionsApi.removeInvolvedUser(taskId, groupId);
        };
        TaskApi.prototype.saveTaskForm = function (taskId, saveTaskFormRepresentation) {
            return this.taskFormsApi.saveTaskForm(taskId, saveTaskFormRepresentation);
        };
        TaskApi.prototype.unclaimTask = function (taskId) {
            return this.taskactionsApi.unclaimTask(taskId);
        };
        TaskApi.prototype.updateTask = function (taskId, updated) {
            return this.tasksApi.updateTask(taskId, updated);
        };
        return TaskApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskActionsApi$1 = (function (_super) {
        __extends(TaskActionsApi, _super);
        function TaskActionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TaskActionsApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return TaskActionsApi;
    }(TaskActionsApi));
    //# sourceMappingURL=TaskActionsApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskCheckListApi = (function (_super) {
        __extends(TaskCheckListApi, _super);
        function TaskCheckListApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TaskCheckListApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return TaskCheckListApi;
    }(ChecklistsApi));
    //# sourceMappingURL=TaskCheckListApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskFormsApi$1 = (function (_super) {
        __extends(TaskFormsApi, _super);
        function TaskFormsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TaskFormsApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return TaskFormsApi;
    }(TaskFormsApi));
    //# sourceMappingURL=TaskFormsApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TemporaryApi$1 = (function (_super) {
        __extends(TemporaryApi, _super);
        function TemporaryApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TemporaryApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return TemporaryApi;
    }(TemporaryApi));
    //# sourceMappingURL=TemporaryApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserApi = (function (_super) {
        __extends(UserApi, _super);
        function UserApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UserApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return UserApi;
    }(UsersApi));
    //# sourceMappingURL=UserApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserFiltersApi$1 = (function (_super) {
        __extends(UserFiltersApi, _super);
        function UserFiltersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UserFiltersApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return UserFiltersApi;
    }(UserFiltersApi));
    //# sourceMappingURL=UserFiltersApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UsersWorkflowApi = (function () {
        function UsersWorkflowApi() {
        }
        UsersWorkflowApi.prototype.init = function (alfrescoApi) {
            this.usersApi = new UsersApi(alfrescoApi);
        };
        UsersWorkflowApi.prototype.getUsers = function (opts) {
            return this.usersApi.getUsers(opts);
        };
        return UsersWorkflowApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ReportApi$1 = (function (_super) {
        __extends(ReportApi, _super);
        function ReportApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ReportApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ReportApi;
    }(ReportApi));
    //# sourceMappingURL=ReportApi.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var APS_LEGACY_APIS = {
        AlfrescoApi: AlfrescoApiActiviti,
        AboutApi: AboutApi$1,
        AdminEndpointsApi: AdminEndpointsApi$1,
        AdminGroupsApi: AdminGroupsApi$1,
        AdminTenantsApi: AdminTenantsApi$1,
        AdminUsersApi: AdminUsersApi$1,
        AppsApi: AppsApi,
        AppsDefinitionApi: AppsDefinitionApi,
        AppsRuntimeApi: AppsRuntimeApi,
        CommentsApi: CommentsApi$2,
        ContentApi: ContentApi$2,
        ContentRenditionApi: ContentRenditionApi,
        EditorApi: EditorApi,
        GroupsApi: GroupsApi$2,
        IDMSyncApi: IDMSyncApi$1,
        IntegrationAccountApi: IntegrationAccountApi,
        IntegrationAlfrescoCloudApi: IntegrationAlfrescoCloudApi$1,
        IntegrationAlfrescoOnPremiseApi: IntegrationAlfrescoOnPremiseApi$1,
        IntegrationBoxApi: IntegrationBoxApi$1,
        IntegrationDriveApi: IntegrationDriveApi$1,
        ModelBpmnApi: ModelBpmnApi,
        ModelJsonBpmnApi: ModelJsonBpmnApi$1,
        ModelsApi: ModelsApi$1,
        ModelsHistoryApi: ModelsHistoryApi$1,
        ProcessApi: ProcessApi,
        ProcessDefinitionsApi: ProcessDefinitionsApi$1,
        ProcessDefinitionsFormApi: ProcessDefinitionsFormApi,
        ProcessInstancesApi: ProcessInstancesApi$1,
        ProcessInstancesInformationApi: ProcessInstancesInformationApi,
        ProcessInstancesListingApi: ProcessInstancesListingApi,
        ProcessInstanceVariablesApi: ProcessInstanceVariablesApi$1,
        ProcessScopeApi: ProcessScopeApi,
        ProfileApi: ProfileApi,
        ScriptFileApi: ScriptFileApi,
        SystemPropertiesApi: SystemPropertiesApi$1,
        TaskApi: TaskApi,
        TaskActionsApi: TaskActionsApi$1,
        TaskCheckListApi: TaskCheckListApi,
        TaskFormsApi: TaskFormsApi$1,
        TemporaryApi: TemporaryApi$1,
        UserApi: UserApi,
        UserFiltersApi: UserFiltersApi$1,
        UsersWorkflowApi: UsersWorkflowApi,
        ReportApi: ReportApi$1
    };
    (function (Activiti) {
        var AlfrescoApi = (function (_super) {
            __extends(AlfrescoApi, _super);
            function AlfrescoApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AlfrescoApi;
        }(AlfrescoApiActiviti));
        Activiti.AlfrescoApi = AlfrescoApi;
        var AboutApi = (function (_super) {
            __extends(AboutApi, _super);
            function AboutApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AboutApi;
        }(AboutApi$1));
        Activiti.AboutApi = AboutApi;
        var AdminEndpointsApi = (function (_super) {
            __extends(AdminEndpointsApi, _super);
            function AdminEndpointsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AdminEndpointsApi;
        }(AdminEndpointsApi$1));
        Activiti.AdminEndpointsApi = AdminEndpointsApi;
        var AdminGroupsApi = (function (_super) {
            __extends(AdminGroupsApi, _super);
            function AdminGroupsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AdminGroupsApi;
        }(AdminGroupsApi$1));
        Activiti.AdminGroupsApi = AdminGroupsApi;
        var AdminTenantsApi = (function (_super) {
            __extends(AdminTenantsApi, _super);
            function AdminTenantsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AdminTenantsApi;
        }(AdminTenantsApi$1));
        Activiti.AdminTenantsApi = AdminTenantsApi;
        var AdminUsersApi = (function (_super) {
            __extends(AdminUsersApi, _super);
            function AdminUsersApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AdminUsersApi;
        }(AdminUsersApi$1));
        Activiti.AdminUsersApi = AdminUsersApi;
        var AppsApi$1 = (function (_super) {
            __extends(AppsApi, _super);
            function AppsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AppsApi;
        }(AppsApi));
        Activiti.AppsApi = AppsApi$1;
        var AppsDefinitionApi$1 = (function (_super) {
            __extends(AppsDefinitionApi, _super);
            function AppsDefinitionApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AppsDefinitionApi;
        }(AppsDefinitionApi));
        Activiti.AppsDefinitionApi = AppsDefinitionApi$1;
        var AppsRuntimeApi$1 = (function (_super) {
            __extends(AppsRuntimeApi, _super);
            function AppsRuntimeApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AppsRuntimeApi;
        }(AppsRuntimeApi));
        Activiti.AppsRuntimeApi = AppsRuntimeApi$1;
        var CommentsApi = (function (_super) {
            __extends(CommentsApi, _super);
            function CommentsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CommentsApi;
        }(CommentsApi$2));
        Activiti.CommentsApi = CommentsApi;
        var ContentApi = (function (_super) {
            __extends(ContentApi, _super);
            function ContentApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ContentApi;
        }(ContentApi$2));
        Activiti.ContentApi = ContentApi;
        var ContentRenditionApi$1 = (function (_super) {
            __extends(ContentRenditionApi, _super);
            function ContentRenditionApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ContentRenditionApi;
        }(ContentRenditionApi));
        Activiti.ContentRenditionApi = ContentRenditionApi$1;
        var EditorApi$1 = (function (_super) {
            __extends(EditorApi, _super);
            function EditorApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return EditorApi;
        }(EditorApi));
        Activiti.EditorApi = EditorApi$1;
        var GroupsApi = (function (_super) {
            __extends(GroupsApi, _super);
            function GroupsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GroupsApi;
        }(GroupsApi$2));
        Activiti.GroupsApi = GroupsApi;
        var IDMSyncApi = (function (_super) {
            __extends(IDMSyncApi, _super);
            function IDMSyncApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return IDMSyncApi;
        }(IDMSyncApi$1));
        Activiti.IDMSyncApi = IDMSyncApi;
        var IntegrationAccountApi$1 = (function (_super) {
            __extends(IntegrationAccountApi, _super);
            function IntegrationAccountApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return IntegrationAccountApi;
        }(IntegrationAccountApi));
        Activiti.IntegrationAccountApi = IntegrationAccountApi$1;
        var IntegrationAlfrescoCloudApi = (function (_super) {
            __extends(IntegrationAlfrescoCloudApi, _super);
            function IntegrationAlfrescoCloudApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return IntegrationAlfrescoCloudApi;
        }(IntegrationAlfrescoCloudApi$1));
        Activiti.IntegrationAlfrescoCloudApi = IntegrationAlfrescoCloudApi;
        var IntegrationAlfrescoOnPremiseApi = (function (_super) {
            __extends(IntegrationAlfrescoOnPremiseApi, _super);
            function IntegrationAlfrescoOnPremiseApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return IntegrationAlfrescoOnPremiseApi;
        }(IntegrationAlfrescoOnPremiseApi$1));
        Activiti.IntegrationAlfrescoOnPremiseApi = IntegrationAlfrescoOnPremiseApi;
        var IntegrationBoxApi = (function (_super) {
            __extends(IntegrationBoxApi, _super);
            function IntegrationBoxApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return IntegrationBoxApi;
        }(IntegrationBoxApi$1));
        Activiti.IntegrationBoxApi = IntegrationBoxApi;
        var IntegrationDriveApi = (function (_super) {
            __extends(IntegrationDriveApi, _super);
            function IntegrationDriveApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return IntegrationDriveApi;
        }(IntegrationDriveApi$1));
        Activiti.IntegrationDriveApi = IntegrationDriveApi;
        var ModelBpmnApi$1 = (function (_super) {
            __extends(ModelBpmnApi, _super);
            function ModelBpmnApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ModelBpmnApi;
        }(ModelBpmnApi));
        Activiti.ModelBpmnApi = ModelBpmnApi$1;
        var ModelJsonBpmnApi = (function (_super) {
            __extends(ModelJsonBpmnApi, _super);
            function ModelJsonBpmnApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ModelJsonBpmnApi;
        }(ModelJsonBpmnApi$1));
        Activiti.ModelJsonBpmnApi = ModelJsonBpmnApi;
        var ModelsApi = (function (_super) {
            __extends(ModelsApi, _super);
            function ModelsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ModelsApi;
        }(ModelsApi$1));
        Activiti.ModelsApi = ModelsApi;
        var ModelsHistoryApi = (function (_super) {
            __extends(ModelsHistoryApi, _super);
            function ModelsHistoryApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ModelsHistoryApi;
        }(ModelsHistoryApi$1));
        Activiti.ModelsHistoryApi = ModelsHistoryApi;
        var ProcessApi$1 = (function (_super) {
            __extends(ProcessApi, _super);
            function ProcessApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProcessApi;
        }(ProcessApi));
        Activiti.ProcessApi = ProcessApi$1;
        var ProcessDefinitionsApi = (function (_super) {
            __extends(ProcessDefinitionsApi, _super);
            function ProcessDefinitionsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProcessDefinitionsApi;
        }(ProcessDefinitionsApi$1));
        Activiti.ProcessDefinitionsApi = ProcessDefinitionsApi;
        var ProcessDefinitionsFormApi$1 = (function (_super) {
            __extends(ProcessDefinitionsFormApi, _super);
            function ProcessDefinitionsFormApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProcessDefinitionsFormApi;
        }(ProcessDefinitionsFormApi));
        Activiti.ProcessDefinitionsFormApi = ProcessDefinitionsFormApi$1;
        var ProcessInstancesApi = (function (_super) {
            __extends(ProcessInstancesApi, _super);
            function ProcessInstancesApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProcessInstancesApi;
        }(ProcessInstancesApi$1));
        Activiti.ProcessInstancesApi = ProcessInstancesApi;
        var ProcessInstancesInformationApi$1 = (function (_super) {
            __extends(ProcessInstancesInformationApi, _super);
            function ProcessInstancesInformationApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProcessInstancesInformationApi;
        }(ProcessInstancesInformationApi));
        Activiti.ProcessInstancesInformationApi = ProcessInstancesInformationApi$1;
        var ProcessInstancesListingApi$1 = (function (_super) {
            __extends(ProcessInstancesListingApi, _super);
            function ProcessInstancesListingApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProcessInstancesListingApi;
        }(ProcessInstancesListingApi));
        Activiti.ProcessInstancesListingApi = ProcessInstancesListingApi$1;
        var ProcessInstanceVariablesApi = (function (_super) {
            __extends(ProcessInstanceVariablesApi, _super);
            function ProcessInstanceVariablesApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProcessInstanceVariablesApi;
        }(ProcessInstanceVariablesApi$1));
        Activiti.ProcessInstanceVariablesApi = ProcessInstanceVariablesApi;
        var ProcessScopeApi$1 = (function (_super) {
            __extends(ProcessScopeApi, _super);
            function ProcessScopeApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProcessScopeApi;
        }(ProcessScopeApi));
        Activiti.ProcessScopeApi = ProcessScopeApi$1;
        var ProfileApi$1 = (function (_super) {
            __extends(ProfileApi, _super);
            function ProfileApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProfileApi;
        }(ProfileApi));
        Activiti.ProfileApi = ProfileApi$1;
        var ScriptFileApi$1 = (function (_super) {
            __extends(ScriptFileApi, _super);
            function ScriptFileApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ScriptFileApi;
        }(ScriptFileApi));
        Activiti.ScriptFileApi = ScriptFileApi$1;
        var SystemPropertiesApi = (function (_super) {
            __extends(SystemPropertiesApi, _super);
            function SystemPropertiesApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SystemPropertiesApi;
        }(SystemPropertiesApi$1));
        Activiti.SystemPropertiesApi = SystemPropertiesApi;
        var TaskApi$1 = (function (_super) {
            __extends(TaskApi, _super);
            function TaskApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TaskApi;
        }(TaskApi));
        Activiti.TaskApi = TaskApi$1;
        var TaskActionsApi = (function (_super) {
            __extends(TaskActionsApi, _super);
            function TaskActionsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TaskActionsApi;
        }(TaskActionsApi$1));
        Activiti.TaskActionsApi = TaskActionsApi;
        var TaskCheckListApi$1 = (function (_super) {
            __extends(TaskCheckListApi, _super);
            function TaskCheckListApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TaskCheckListApi;
        }(TaskCheckListApi));
        Activiti.TaskCheckListApi = TaskCheckListApi$1;
        var TaskFormsApi = (function (_super) {
            __extends(TaskFormsApi, _super);
            function TaskFormsApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TaskFormsApi;
        }(TaskFormsApi$1));
        Activiti.TaskFormsApi = TaskFormsApi;
        var TemporaryApi = (function (_super) {
            __extends(TemporaryApi, _super);
            function TemporaryApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TemporaryApi;
        }(TemporaryApi$1));
        Activiti.TemporaryApi = TemporaryApi;
        var UserApi$1 = (function (_super) {
            __extends(UserApi, _super);
            function UserApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return UserApi;
        }(UserApi));
        Activiti.UserApi = UserApi$1;
        var UserFiltersApi = (function (_super) {
            __extends(UserFiltersApi, _super);
            function UserFiltersApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return UserFiltersApi;
        }(UserFiltersApi$1));
        Activiti.UserFiltersApi = UserFiltersApi;
        var UsersWorkflowApi$1 = (function (_super) {
            __extends(UsersWorkflowApi, _super);
            function UsersWorkflowApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return UsersWorkflowApi;
        }(UsersWorkflowApi));
        Activiti.UsersWorkflowApi = UsersWorkflowApi$1;
        var ReportApi = (function (_super) {
            __extends(ReportApi, _super);
            function ReportApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ReportApi;
        }(ReportApi$1));
        Activiti.ReportApi = ReportApi;
    })(exports.Activiti || (exports.Activiti = {}));
    //# sourceMappingURL=index.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EntitlementsInfo = (function () {
        function EntitlementsInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return EntitlementsInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var LicenseInfo = (function () {
        function LicenseInfo(input) {
            if (input) {
                Object.assign(this, input);
                this.issuedAt = input.issuedAt ? DateAlfresco.parseDate(input.issuedAt) : undefined;
                this.expiresAt = input.expiresAt ? DateAlfresco.parseDate(input.expiresAt) : undefined;
                this.entitlements = input.entitlements ? new EntitlementsInfo(input.entitlements) : undefined;
            }
        }
        return LicenseInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModuleInfo = (function () {
        function ModuleInfo(input) {
            if (input) {
                Object.assign(this, input);
                this.installDate = input.installDate ? DateAlfresco.parseDate(input.installDate) : undefined;
            }
        }
        return ModuleInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var StatusInfo = (function () {
        function StatusInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return StatusInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var VersionInfo = (function () {
        function VersionInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return VersionInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RepositoryInfo = (function () {
        function RepositoryInfo(input) {
            if (input) {
                Object.assign(this, input);
                this.version = input.version ? new VersionInfo(input.version) : undefined;
                this.status = input.status ? new StatusInfo(input.status) : undefined;
                this.license = input.license ? new LicenseInfo(input.license) : undefined;
                if (input.modules) {
                    this.modules = input.modules.map(function (item) {
                        return new ModuleInfo(item);
                    });
                }
            }
        }
        return RepositoryInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RepositoryEntry = (function () {
        function RepositoryEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.repository = input.repository ? new RepositoryInfo(input.repository) : undefined;
            }
        }
        return RepositoryEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DiscoveryEntry = (function () {
        function DiscoveryEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new RepositoryEntry(input.entry) : undefined;
            }
        }
        return DiscoveryEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BaseApi$2 = (function () {
        function BaseApi(alfrescoApi) {
            this.apiClient = alfrescoApi.discoveryClient;
        }
        BaseApi.prototype.errorMessage = function (param, methodName) {
            return "Missing param " + param + " in " + methodName;
        };
        return BaseApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DiscoveryApi = (function (_super) {
        __extends(DiscoveryApi, _super);
        function DiscoveryApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DiscoveryApi.prototype.getRepositoryInformation = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = [];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/discovery', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DiscoveryEntry);
        };
        return DiscoveryApi;
    }(BaseApi$2));
    //# sourceMappingURL=discovery.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DISCOVERY_APIS = { DiscoveryApi: DiscoveryApi };

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuide = (function () {
        function ClassificationGuide(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationGuide;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuideEntry = (function () {
        function ClassificationGuideEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ClassificationGuide(input.entry) : undefined;
            }
        }
        return ClassificationGuideEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuides = (function () {
        function ClassificationGuides(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationGuides;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuidesEntry = (function () {
        function ClassificationGuidesEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ClassificationGuides(input.entry) : undefined;
            }
        }
        return ClassificationGuidesEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuidePagingList = (function () {
        function ClassificationGuidePagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new ClassificationGuidesEntry(item);
                    });
                }
            }
        }
        return ClassificationGuidePagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuidePaging = (function () {
        function ClassificationGuidePaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new ClassificationGuidePagingList(input.list) : undefined;
            }
        }
        return ClassificationGuidePaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationInformation = (function () {
        function ClassificationInformation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationInformation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityMarks = (function (_super) {
        __extends(SecurityMarks, _super);
        function SecurityMarks(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return SecurityMarks;
    }(Array));
    //# sourceMappingURL=securityMarks.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityMarkInformation = (function () {
        function SecurityMarkInformation(input) {
            if (input) {
                Object.assign(this, input);
                this.add = input.add ? new SecurityMarks(input.add) : undefined;
            }
        }
        return SecurityMarkInformation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Instruction = (function () {
        function Instruction(input) {
            if (input) {
                Object.assign(this, input);
                this.classificationInformation = input.classificationInformation ? new ClassificationInformation(input.classificationInformation) : undefined;
                this.securityMarkInformation = input.securityMarkInformation ? new SecurityMarkInformation(input.securityMarkInformation) : undefined;
            }
        }
        return Instruction;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var InstructionEntry = (function () {
        function InstructionEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Instruction(input.entry) : undefined;
            }
        }
        return InstructionEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuideInTopic = (function () {
        function ClassificationGuideInTopic(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationGuideInTopic;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Path = (function (_super) {
        __extends(Path, _super);
        function Path(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return Path;
    }(Array));
    //# sourceMappingURL=path.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Topic = (function () {
        function Topic(input) {
            if (input) {
                Object.assign(this, input);
                this.instruction = input.instruction ? new Instruction(input.instruction) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.path = input.path ? new Path(input.path) : undefined;
                this.classificationGuide = input.classificationGuide ? new ClassificationGuideInTopic(input.classificationGuide) : undefined;
            }
        }
        return Topic;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TopicEntry = (function () {
        function TopicEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Topic(input.entry) : undefined;
            }
        }
        return TopicEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TopicPagingList = (function () {
        function TopicPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new TopicEntry(item);
                    });
                }
            }
        }
        return TopicPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SubtopicPaging = (function () {
        function SubtopicPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new TopicPagingList(input.list) : undefined;
            }
        }
        return SubtopicPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TopicPaging = (function () {
        function TopicPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new TopicPagingList(input.list) : undefined;
            }
        }
        return TopicPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BaseApi$3 = (function () {
        function BaseApi(alfrescoApi) {
            this.apiClient = alfrescoApi.gsClient;
        }
        BaseApi.prototype.errorMessage = function (param, methodName) {
            return "Missing param " + param + " in " + methodName;
        };
        return BaseApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuidesApi = (function (_super) {
        __extends(ClassificationGuidesApi, _super);
        function ClassificationGuidesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ClassificationGuidesApi.prototype.combinedInstructions = function (opts) {
            opts = opts || {};
            var postBody = opts['instructions'];
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/combined-instructions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, InstructionEntry);
        };
        ClassificationGuidesApi.prototype.createClassificationGuide = function (classificationGuide) {
            throwIfNotDefined(classificationGuide, 'classificationGuide');
            var postBody = classificationGuide;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-guides', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationGuideEntry);
        };
        ClassificationGuidesApi.prototype.createSubtopic = function (topicId, topic, opts) {
            throwIfNotDefined(topicId, 'topicId');
            throwIfNotDefined(topic, 'topic');
            opts = opts || {};
            var postBody = topic;
            var pathParams = {
                'topicId': topicId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/topics/{topicId}/subtopics', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TopicEntry);
        };
        ClassificationGuidesApi.prototype.createTopic = function (classificationGuideId, topic, opts) {
            throwIfNotDefined(classificationGuideId, 'classificationGuideId');
            throwIfNotDefined(topic, 'topic');
            opts = opts || {};
            var postBody = topic;
            var pathParams = {
                'classificationGuideId': classificationGuideId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-guides/{classificationGuideId}/topics', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TopicEntry);
        };
        ClassificationGuidesApi.prototype.deleteClassificationGuide = function (classificationGuideId) {
            throwIfNotDefined(classificationGuideId, 'classificationGuideId');
            var postBody = null;
            var pathParams = {
                'classificationGuideId': classificationGuideId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-guides/{classificationGuideId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ClassificationGuidesApi.prototype.deleteTopic = function (topicId) {
            throwIfNotDefined(topicId, 'topicId');
            var postBody = null;
            var pathParams = {
                'topicId': topicId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/topics/{topicId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ClassificationGuidesApi.prototype.listClassificationGuides = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
                'where': opts['where']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-guides', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationGuidePaging);
        };
        ClassificationGuidesApi.prototype.listSubtopics = function (topicId, opts) {
            throwIfNotDefined(topicId, 'topicId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'topicId': topicId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
                'where': opts['where'],
                'includeSource': opts['includeSource']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/topics/{topicId}/subtopics', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SubtopicPaging);
        };
        ClassificationGuidesApi.prototype.listTopics = function (classificationGuideId, opts) {
            throwIfNotDefined(classificationGuideId, 'classificationGuideId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'classificationGuideId': classificationGuideId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
                'where': opts['where'],
                'includeSource': opts['includeSource']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-guides/{classificationGuideId}/topics', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TopicPaging);
        };
        ClassificationGuidesApi.prototype.showClassificationGuideById = function (classificationGuideId) {
            throwIfNotDefined(classificationGuideId, 'classificationGuideId');
            var postBody = null;
            var pathParams = {
                'classificationGuideId': classificationGuideId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-guides/{classificationGuideId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationGuideEntry);
        };
        ClassificationGuidesApi.prototype.showTopicById = function (topicId, opts) {
            throwIfNotDefined(topicId, 'topicId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'topicId': topicId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/topics/{topicId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TopicEntry);
        };
        ClassificationGuidesApi.prototype.updateClassificationGuide = function (classificationGuideId, classificationGuide) {
            throwIfNotDefined(classificationGuideId, 'classificationGuideId');
            throwIfNotDefined(classificationGuide, 'classificationGuide');
            var postBody = classificationGuide;
            var pathParams = {
                'classificationGuideId': classificationGuideId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-guides/{classificationGuideId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationGuideEntry);
        };
        ClassificationGuidesApi.prototype.updateTopic = function (topicId, topic, opts) {
            throwIfNotDefined(topicId, 'topicId');
            throwIfNotDefined(topic, 'topic');
            opts = opts || {};
            var postBody = topic;
            var pathParams = {
                'topicId': topicId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/topics/{topicId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TopicEntry);
        };
        return ClassificationGuidesApi;
    }(BaseApi$3));
    //# sourceMappingURL=classificationGuides.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationReason = (function () {
        function ClassificationReason(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationReason;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationReasonEntry = (function () {
        function ClassificationReasonEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ClassificationReason(input.entry) : undefined;
            }
        }
        return ClassificationReasonEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationReasonsPagingList = (function () {
        function ClassificationReasonsPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new ClassificationReasonEntry(item);
                    });
                }
            }
        }
        return ClassificationReasonsPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationReasonsPaging = (function () {
        function ClassificationReasonsPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new ClassificationReasonsPagingList(input.list) : undefined;
            }
        }
        return ClassificationReasonsPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationReasonsApi = (function (_super) {
        __extends(ClassificationReasonsApi, _super);
        function ClassificationReasonsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ClassificationReasonsApi.prototype.createClassificationReason = function (classificationReason) {
            throwIfNotDefined(classificationReason, 'classificationReason');
            var postBody = classificationReason;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-reasons', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationReasonEntry);
        };
        ClassificationReasonsApi.prototype.deleteClassificationReason = function (classificationReasonId) {
            throwIfNotDefined(classificationReasonId, 'classificationReasonId');
            var postBody = null;
            var pathParams = {
                'classificationReasonId': classificationReasonId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-reasons/{classificationReasonId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ClassificationReasonsApi.prototype.listClassificationReasons = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-reasons', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationReasonsPaging);
        };
        ClassificationReasonsApi.prototype.showClassificationReasonById = function (classificationReasonId) {
            throwIfNotDefined(classificationReasonId, 'classificationReasonId');
            var postBody = null;
            var pathParams = {
                'classificationReasonId': classificationReasonId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-reasons/{classificationReasonId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationReasonEntry);
        };
        ClassificationReasonsApi.prototype.updateClassificationReason = function (classificationReasonId, classificationReason) {
            throwIfNotDefined(classificationReasonId, 'classificationReasonId');
            throwIfNotDefined(classificationReason, 'classificationReason');
            var postBody = classificationReason;
            var pathParams = {
                'classificationReasonId': classificationReasonId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-reasons/{classificationReasonId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationReasonEntry);
        };
        return ClassificationReasonsApi;
    }(BaseApi$3));
    //# sourceMappingURL=classificationReasons.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeclassificationExemption = (function () {
        function DeclassificationExemption(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return DeclassificationExemption;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeclassificationExemptionEntry = (function () {
        function DeclassificationExemptionEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new DeclassificationExemption(input.entry) : undefined;
            }
        }
        return DeclassificationExemptionEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeclassificationExemptionsPagingList = (function () {
        function DeclassificationExemptionsPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new DeclassificationExemptionEntry(item);
                    });
                }
            }
        }
        return DeclassificationExemptionsPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeclassificationExemptionsPaging = (function () {
        function DeclassificationExemptionsPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new DeclassificationExemptionsPagingList(input.list) : undefined;
            }
        }
        return DeclassificationExemptionsPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeclassificationExemptionsApi = (function (_super) {
        __extends(DeclassificationExemptionsApi, _super);
        function DeclassificationExemptionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DeclassificationExemptionsApi.prototype.createDeclassificationExemption = function (declassificationExemption) {
            throwIfNotDefined(declassificationExemption, 'declassificationExemption');
            var postBody = declassificationExemption;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/declassification-exemptions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeclassificationExemptionEntry);
        };
        DeclassificationExemptionsApi.prototype.deleteDeclassificationExemption = function (declassificationExemptionId) {
            throwIfNotDefined(declassificationExemptionId, 'declassificationExemptionId');
            var postBody = null;
            var pathParams = {
                'declassificationExemptionId': declassificationExemptionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/declassification-exemptions/{declassificationExemptionId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        DeclassificationExemptionsApi.prototype.listDeclassificationExemptions = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/declassification-exemptions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeclassificationExemptionsPaging);
        };
        DeclassificationExemptionsApi.prototype.showDeclassificationExemptionById = function (declassificationExemptionId) {
            throwIfNotDefined(declassificationExemptionId, 'declassificationExemptionId');
            var postBody = null;
            var pathParams = {
                'declassificationExemptionId': declassificationExemptionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/declassification-exemptions/{declassificationExemptionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeclassificationExemptionEntry);
        };
        DeclassificationExemptionsApi.prototype.updateDeclassificationExemption = function (declassificationExemptionId, declassificationExemption) {
            throwIfNotDefined(declassificationExemptionId, 'declassificationExemptionId');
            throwIfNotDefined(declassificationExemption, 'declassificationExemption');
            var postBody = declassificationExemption;
            var pathParams = {
                'declassificationExemptionId': declassificationExemptionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/declassification-exemptions/{declassificationExemptionId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeclassificationExemptionEntry);
        };
        return DeclassificationExemptionsApi;
    }(BaseApi$3));
    //# sourceMappingURL=declassificationExemptions.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DefaultClassificationValuesApi = (function (_super) {
        __extends(DefaultClassificationValuesApi, _super);
        function DefaultClassificationValuesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DefaultClassificationValuesApi.prototype.calculateDefaultDeclassificationDate = function (nodeId) {
            throwIfNotDefined(nodeId, 'nodeId');
            var postBody = null;
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/default-classification-values/{nodeId}/calculate-declassification-date', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DateAlfresco);
        };
        return DefaultClassificationValuesApi;
    }(BaseApi$3));
    //# sourceMappingURL=defaultClassificationValues.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityControlSetting = (function () {
        function SecurityControlSetting(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SecurityControlSetting;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityControlSettingEntry = (function () {
        function SecurityControlSettingEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new SecurityControlSetting(input.entry) : undefined;
            }
        }
        return SecurityControlSettingEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityControlSettingsApi = (function (_super) {
        __extends(SecurityControlSettingsApi, _super);
        function SecurityControlSettingsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SecurityControlSettingsApi.prototype.getSecurityControlSetting = function (securityControlSettingKey) {
            throwIfNotDefined(securityControlSettingKey, 'securityControlSettingKey');
            var postBody = null;
            var pathParams = {
                'securityControlSettingKey': securityControlSettingKey
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/security-control-settings/{securityControlSettingKey}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SecurityControlSettingEntry);
        };
        SecurityControlSettingsApi.prototype.updateSecurityControlSetting = function (securityControlSettingKey, securityControlSettingValue) {
            throwIfNotDefined(securityControlSettingKey, 'securityControlSettingKey');
            throwIfNotDefined(securityControlSettingValue, 'securityControlSettingValue');
            var postBody = securityControlSettingValue;
            var pathParams = {
                'securityControlSettingKey': securityControlSettingKey
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/security-control-settings/{securityControlSettingKey}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SecurityControlSettingEntry);
        };
        return SecurityControlSettingsApi;
    }(BaseApi$3));
    //# sourceMappingURL=securityControlSettings.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GS_CLASSIFICATION_APIS = {
        ClassificationGuidesApi: ClassificationGuidesApi,
        ClassificationReasonsApi: ClassificationReasonsApi,
        DeclassificationExemptionsApi: DeclassificationExemptionsApi,
        DefaultClassificationValuesApi: DefaultClassificationValuesApi,
        SecurityControlSettingsApi: SecurityControlSettingsApi
    };

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuideBody = (function () {
        function ClassificationGuideBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationGuideBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuidesBody = (function () {
        function ClassificationGuidesBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationGuidesBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationReasonBody = (function () {
        function ClassificationReasonBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationReasonBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeclassificationExemptionBody = (function () {
        function DeclassificationExemptionBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return DeclassificationExemptionBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityMarksBody = (function (_super) {
        __extends(SecurityMarksBody, _super);
        function SecurityMarksBody(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return SecurityMarksBody;
    }(Array));
    //# sourceMappingURL=securityMarksBody.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityMarkInformationBody = (function () {
        function SecurityMarkInformationBody(input) {
            if (input) {
                Object.assign(this, input);
                this.add = input.add ? new SecurityMarksBody(input.add) : undefined;
            }
        }
        return SecurityMarkInformationBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var InstructionBody = (function () {
        function InstructionBody(input) {
            if (input) {
                Object.assign(this, input);
                this.classificationInformation = input.classificationInformation ? new ClassificationInformation(input.classificationInformation) : undefined;
                this.securityMarkInformation = input.securityMarkInformation ? new SecurityMarkInformationBody(input.securityMarkInformation) : undefined;
            }
        }
        return InstructionBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityControlSettingBody = (function () {
        function SecurityControlSettingBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SecurityControlSettingBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityMark = (function () {
        function SecurityMark(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SecurityMark;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityMarkBody = (function () {
        function SecurityMarkBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SecurityMarkBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TopicBody = (function () {
        function TopicBody(input) {
            if (input) {
                Object.assign(this, input);
                this.instruction = input.instruction ? new InstructionBody(input.instruction) : undefined;
            }
        }
        return TopicBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuidesInTopic = (function () {
        function ClassificationGuidesInTopic(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationGuidesInTopic;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CombinedInstructionBody = (function () {
        function CombinedInstructionBody(input) {
            if (input) {
                Object.assign(this, input);
                this.classificationInformation = input.classificationInformation ? new ClassificationInformation(input.classificationInformation) : undefined;
                this.securityMarkInformation = input.securityMarkInformation ? new SecurityMarkInformationBody(input.securityMarkInformation) : undefined;
            }
        }
        return CombinedInstructionBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FilePlan = (function () {
        function FilePlan(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return FilePlan;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FilePlanEntry = (function () {
        function FilePlanEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new FilePlan(input.entry) : undefined;
            }
        }
        return FilePlanEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategory = (function () {
        function RecordCategory(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return RecordCategory;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategoryEntry = (function () {
        function RecordCategoryEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new RecordCategory(input.entry) : undefined;
            }
        }
        return RecordCategoryEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategoryPagingList = (function () {
        function RecordCategoryPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new RecordCategoryEntry(item);
                    });
                }
                this.source = input.source ? new FilePlan(input.source) : undefined;
            }
        }
        return RecordCategoryPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategoryPaging = (function () {
        function RecordCategoryPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new RecordCategoryPagingList(input.list) : undefined;
            }
        }
        return RecordCategoryPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BaseApi$4 = (function () {
        function BaseApi(alfrescoApi) {
            this.apiClient = alfrescoApi.gsClient;
        }
        BaseApi.prototype.errorMessage = function (param, methodName) {
            return "Missing param " + param + " in " + methodName;
        };
        return BaseApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FilePlansApi = (function (_super) {
        __extends(FilePlansApi, _super);
        function FilePlansApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FilePlansApi.prototype.createFilePlanCategories = function (filePlanId, nodeBodyCreate, opts) {
            throwIfNotDefined(filePlanId, 'filePlanId');
            throwIfNotDefined(nodeBodyCreate, 'nodeBodyCreate');
            opts = opts || {};
            var postBody = nodeBodyCreate;
            var pathParams = {
                'filePlanId': filePlanId
            };
            var queryParams = {
                'autoRename': opts['autoRename'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json', 'multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/file-plans/{filePlanId}/categories', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryEntry);
        };
        FilePlansApi.prototype.getFilePlan = function (filePlanId, opts) {
            throwIfNotDefined(filePlanId, 'filePlanId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'filePlanId': filePlanId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/file-plans/{filePlanId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FilePlanEntry);
        };
        FilePlansApi.prototype.getFilePlanCategories = function (filePlanId, opts) {
            throwIfNotDefined(filePlanId, 'filePlanId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'filePlanId': filePlanId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'includeSource': opts['includeSource'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/file-plans/{filePlanId}/categories', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryPaging);
        };
        FilePlansApi.prototype.updateFilePlan = function (filePlanId, filePlanBodyUpdate, opts) {
            throwIfNotDefined(filePlanId, 'filePlanId');
            throwIfNotDefined(filePlanBodyUpdate, 'filePlanBodyUpdate');
            opts = opts || {};
            var postBody = filePlanBodyUpdate;
            var pathParams = {
                'filePlanId': filePlanId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/file-plans/{filePlanId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FilePlanEntry);
        };
        return FilePlansApi;
    }(BaseApi$4));
    //# sourceMappingURL=filePlans.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Record = (function () {
        function Record(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return Record;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordEntry = (function () {
        function RecordEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Record(input.entry) : undefined;
            }
        }
        return RecordEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FilesApi = (function (_super) {
        __extends(FilesApi, _super);
        function FilesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FilesApi.prototype.declareRecord = function (fileId, opts) {
            throwIfNotDefined(fileId, 'fileId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'fileId': fileId
            };
            var queryParams = {
                'hideRecord': opts['hideRecord'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/files/{fileId}/declare', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordEntry);
        };
        return FilesApi;
    }(BaseApi$4));
    //# sourceMappingURL=files.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.RMSite = (function () {
        function RMSite(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RMSite;
    }());
    (function (RMSite) {
        RMSite.VisibilityEnum = {
            PRIVATE: 'PRIVATE',
            MODERATED: 'MODERATED',
            PUBLIC: 'PUBLIC'
        };
        RMSite.ComplianceEnum = {
            STANDARD: 'STANDARD',
            DOD5015: 'DOD5015'
        };
        RMSite.RoleEnum = {
            SiteConsumer: 'SiteConsumer',
            SiteCollaborator: 'SiteCollaborator',
            SiteContributor: 'SiteContributor',
            SiteManager: 'SiteManager'
        };
    })(exports.RMSite || (exports.RMSite = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RMSiteEntry = (function () {
        function RMSiteEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new exports.RMSite(input.entry) : undefined;
            }
        }
        return RMSiteEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GsSitesApi = (function (_super) {
        __extends(GsSitesApi, _super);
        function GsSitesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GsSitesApi.prototype.createRMSite = function (siteBodyCreate, opts) {
            throwIfNotDefined(siteBodyCreate, 'siteBodyCreate');
            opts = opts || {};
            var postBody = siteBodyCreate;
            var pathParams = {};
            var queryParams = {
                'skipAddToFavorites': opts['skipAddToFavorites']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/gs-sites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RMSiteEntry);
        };
        GsSitesApi.prototype.deleteRMSite = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/gs-sites/rm', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        GsSitesApi.prototype.getRMSite = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/gs-sites/rm', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RMSiteEntry);
        };
        GsSitesApi.prototype.updateRMSite = function (siteBodyUpdate, opts) {
            throwIfNotDefined(siteBodyUpdate, 'siteBodyUpdate');
            opts = opts || {};
            var postBody = siteBodyUpdate;
            var pathParams = {};
            var queryParams = {
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/gs-sites/rm', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RMSiteEntry);
        };
        return GsSitesApi;
    }(BaseApi$4));
    //# sourceMappingURL=gsSites.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategoryChild = (function () {
        function RecordCategoryChild(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return RecordCategoryChild;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategoryChildEntry = (function () {
        function RecordCategoryChildEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new RecordCategoryChild(input.entry) : undefined;
            }
        }
        return RecordCategoryChildEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategoryChildPagingList = (function () {
        function RecordCategoryChildPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new RecordCategoryChildEntry(item);
                    });
                }
                this.source = input.source ? new RecordCategory(input.source) : undefined;
            }
        }
        return RecordCategoryChildPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategoryChildPaging = (function () {
        function RecordCategoryChildPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new RecordCategoryChildPagingList(input.list) : undefined;
            }
        }
        return RecordCategoryChildPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategoriesApi = (function (_super) {
        __extends(RecordCategoriesApi, _super);
        function RecordCategoriesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RecordCategoriesApi.prototype.createRecordCategoryChild = function (recordCategoryId, nodeBodyCreate, opts) {
            throwIfNotDefined(recordCategoryId, 'recordCategoryId');
            throwIfNotDefined(nodeBodyCreate, 'nodeBodyCreate');
            opts = opts || {};
            var postBody = nodeBodyCreate;
            var pathParams = {
                'recordCategoryId': recordCategoryId
            };
            var queryParams = {
                'autoRename': opts['autoRename'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json', 'multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-categories/{recordCategoryId}/children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryChildEntry);
        };
        RecordCategoriesApi.prototype.deleteRecordCategory = function (recordCategoryId) {
            throwIfNotDefined(recordCategoryId, 'recordCategoryId');
            var postBody = null;
            var pathParams = {
                'recordCategoryId': recordCategoryId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-categories/{recordCategoryId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RecordCategoriesApi.prototype.getRecordCategory = function (recordCategoryId, opts) {
            throwIfNotDefined(recordCategoryId, 'recordCategoryId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'recordCategoryId': recordCategoryId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'relativePath': opts['relativePath'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-categories/{recordCategoryId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryEntry);
        };
        RecordCategoriesApi.prototype.listRecordCategoryChildren = function (recordCategoryId, opts) {
            throwIfNotDefined(recordCategoryId, 'recordCategoryId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'recordCategoryId': recordCategoryId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'relativePath': opts['relativePath'],
                'includeSource': opts['includeSource'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-categories/{recordCategoryId}/children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryChildPaging);
        };
        RecordCategoriesApi.prototype.updateRecordCategory = function (recordCategoryId, recordCategoryBodyUpdate, opts) {
            throwIfNotDefined(recordCategoryId, 'recordCategoryId');
            throwIfNotDefined(recordCategoryBodyUpdate, 'recordCategoryBodyUpdate');
            opts = opts || {};
            var postBody = recordCategoryBodyUpdate;
            var pathParams = {
                'recordCategoryId': recordCategoryId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-categories/{recordCategoryId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryEntry);
        };
        return RecordCategoriesApi;
    }(BaseApi$4));
    //# sourceMappingURL=recordCategories.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordFolder = (function () {
        function RecordFolder(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return RecordFolder;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordFolderChildAssociation = (function () {
        function RecordFolderChildAssociation(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.association = input.association ? new ChildAssociationInfo(input.association) : undefined;
            }
        }
        return RecordFolderChildAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordFolderChildAssociationEntry = (function () {
        function RecordFolderChildAssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new RecordFolderChildAssociation(input.entry) : undefined;
            }
        }
        return RecordFolderChildAssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordFolderAssociationPagingList = (function () {
        function RecordFolderAssociationPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new RecordFolderChildAssociationEntry(item);
                    });
                }
                this.source = input.source ? new RecordFolder(input.source) : undefined;
            }
        }
        return RecordFolderAssociationPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordFolderAssociationPaging = (function () {
        function RecordFolderAssociationPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new RecordFolderAssociationPagingList(input.list) : undefined;
            }
        }
        return RecordFolderAssociationPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordFolderEntry = (function () {
        function RecordFolderEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new RecordFolder(input.entry) : undefined;
            }
        }
        return RecordFolderEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordFoldersApi = (function (_super) {
        __extends(RecordFoldersApi, _super);
        function RecordFoldersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RecordFoldersApi.prototype.createRecordFolderChild = function (recordFolderId, recordBodyCreate, opts) {
            throwIfNotDefined(recordFolderId, 'recordFolderId');
            throwIfNotDefined(recordBodyCreate, 'recordBodyCreate');
            opts = opts || {};
            var postBody = recordBodyCreate;
            var pathParams = {
                'recordFolderId': recordFolderId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json', 'multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-folders/{recordFolderId}/records', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RecordFoldersApi.prototype.deleteRecordFolder = function (recordFolderId) {
            throwIfNotDefined(recordFolderId, 'recordFolderId');
            var postBody = null;
            var pathParams = {
                'recordFolderId': recordFolderId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-folders/{recordFolderId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RecordFoldersApi.prototype.getRecordFolder = function (recordFolderId, opts) {
            throwIfNotDefined(recordFolderId, 'recordFolderId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'recordFolderId': recordFolderId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-folders/{recordFolderId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordFolderEntry);
        };
        RecordFoldersApi.prototype.listRecordFolderChildren = function (recordFolderId, opts) {
            throwIfNotDefined(recordFolderId, 'recordFolderId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'recordFolderId': recordFolderId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'includeSource': opts['includeSource'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-folders/{recordFolderId}/records', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordFolderAssociationPaging);
        };
        RecordFoldersApi.prototype.updateRecordFolder = function (recordFolderId, recordFolderBodyUpdate, opts) {
            throwIfNotDefined(recordFolderId, 'recordFolderId');
            throwIfNotDefined(recordFolderBodyUpdate, 'recordFolderBodyUpdate');
            opts = opts || {};
            var postBody = recordFolderBodyUpdate;
            var pathParams = {
                'recordFolderId': recordFolderId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-folders/{recordFolderId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordFolderEntry);
        };
        return RecordFoldersApi;
    }(BaseApi$4));
    //# sourceMappingURL=recordFolders.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordsApi = (function (_super) {
        __extends(RecordsApi, _super);
        function RecordsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RecordsApi.prototype.completeRecord = function (recordId, opts) {
            throwIfNotDefined(recordId, 'recordId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'recordId': recordId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/records/{recordId}/complete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordEntry);
        };
        RecordsApi.prototype.deleteRecord = function (recordId) {
            throwIfNotDefined(recordId, 'recordId');
            var postBody = null;
            var pathParams = {
                'recordId': recordId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/records/{recordId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RecordsApi.prototype.fileRecord = function (recordId, nodeBodyFile, opts) {
            throwIfNotDefined(recordId, 'recordId');
            throwIfNotDefined(nodeBodyFile, 'nodeBodyFile');
            opts = opts || {};
            var postBody = nodeBodyFile;
            var pathParams = {
                'recordId': recordId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/records/{recordId}/file', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordEntry);
        };
        RecordsApi.prototype.getRecord = function (recordId, opts) {
            throwIfNotDefined(recordId, 'recordId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'recordId': recordId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/records/{recordId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordEntry);
        };
        RecordsApi.prototype.getRecordContent = function (recordId, opts) {
            throwIfNotDefined(recordId, 'recordId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'recordId': recordId
            };
            var queryParams = {
                'attachment': opts['attachment']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/records/{recordId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RecordsApi.prototype.updateRecord = function (recordId, recordBodyUpdate, opts) {
            throwIfNotDefined(recordId, 'recordId');
            throwIfNotDefined(recordBodyUpdate, 'recordBodyUpdate');
            opts = opts || {};
            var postBody = recordBodyUpdate;
            var pathParams = {
                'recordId': recordId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/records/{recordId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordEntry);
        };
        return RecordsApi;
    }(BaseApi$4));
    //# sourceMappingURL=records.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainer = (function () {
        function TransferContainer(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
            }
        }
        return TransferContainer;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainerChildAssociation = (function () {
        function TransferContainerChildAssociation(input) {
            if (input) {
                Object.assign(this, input);
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.association = input.association ? new ChildAssociationInfo(input.association) : undefined;
            }
        }
        return TransferContainerChildAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainerChildAssociationEntry = (function () {
        function TransferContainerChildAssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new TransferContainerChildAssociation(input.entry) : undefined;
            }
        }
        return TransferContainerChildAssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainerAssociationPagingList = (function () {
        function TransferContainerAssociationPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new TransferContainerChildAssociationEntry(item);
                    });
                }
                this.source = input.source ? new TransferContainer(input.source) : undefined;
            }
        }
        return TransferContainerAssociationPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainerAssociationPaging = (function () {
        function TransferContainerAssociationPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new TransferContainerAssociationPagingList(input.list) : undefined;
            }
        }
        return TransferContainerAssociationPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainerEntry = (function () {
        function TransferContainerEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new TransferContainer(input.entry) : undefined;
            }
        }
        return TransferContainerEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainersApi = (function (_super) {
        __extends(TransferContainersApi, _super);
        function TransferContainersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TransferContainersApi.prototype.getTransferContainer = function (transferContainerId, opts) {
            throwIfNotDefined(transferContainerId, 'transferContainerId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'transferContainerId': transferContainerId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/transfer-containers/{transferContainerId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TransferContainerEntry);
        };
        TransferContainersApi.prototype.listTransfers = function (transferContainerId, opts) {
            throwIfNotDefined(transferContainerId, 'transferContainerId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'transferContainerId': transferContainerId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'includeSource': opts['includeSource'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/transfer-containers/{transferContainerId}/transfers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TransferContainerAssociationPaging);
        };
        TransferContainersApi.prototype.updateTransferContainer = function (transferContainerId, nodeBodyUpdate, opts) {
            throwIfNotDefined(transferContainerId, 'transferContainerId');
            throwIfNotDefined(nodeBodyUpdate, 'nodeBodyUpdate');
            opts = opts || {};
            var postBody = nodeBodyUpdate;
            var pathParams = {
                'transferContainerId': transferContainerId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/transfer-containers/{transferContainerId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TransferContainerEntry);
        };
        return TransferContainersApi;
    }(BaseApi$4));
    //# sourceMappingURL=transferContainers.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Transfer = (function () {
        function Transfer(input) {
            if (input) {
                Object.assign(this, input);
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
            }
        }
        return Transfer;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferChildAssociation = (function () {
        function TransferChildAssociation(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.association = input.association ? new ChildAssociationInfo(input.association) : undefined;
            }
        }
        return TransferChildAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferChildAssociationEntry = (function () {
        function TransferChildAssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new TransferChildAssociation(input.entry) : undefined;
            }
        }
        return TransferChildAssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferAssociationPagingList = (function () {
        function TransferAssociationPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new TransferChildAssociationEntry(item);
                    });
                }
                this.source = input.source ? new Transfer(input.source) : undefined;
            }
        }
        return TransferAssociationPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferAssociationPaging = (function () {
        function TransferAssociationPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new TransferAssociationPagingList(input.list) : undefined;
            }
        }
        return TransferAssociationPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferEntry = (function () {
        function TransferEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Transfer(input.entry) : undefined;
            }
        }
        return TransferEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransfersApi = (function (_super) {
        __extends(TransfersApi, _super);
        function TransfersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TransfersApi.prototype.getTransfer = function (transferId, opts) {
            throwIfNotDefined(transferId, 'transferId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'transferId': transferId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/transfers/{transferId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TransferEntry);
        };
        TransfersApi.prototype.listTransfersChildren = function (transferId, opts) {
            throwIfNotDefined(transferId, 'transferId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'transferId': transferId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'includeSource': opts['includeSource'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/transfers/{transferId}/children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TransferAssociationPaging);
        };
        return TransfersApi;
    }(BaseApi$4));
    //# sourceMappingURL=transfers.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledContainer = (function () {
        function UnfiledContainer(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return UnfiledContainer;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledContainerChildAssociation = (function () {
        function UnfiledContainerChildAssociation(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.association = input.association ? new ChildAssociationInfo(input.association) : undefined;
            }
        }
        return UnfiledContainerChildAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledContainerChildAssociationEntry = (function () {
        function UnfiledContainerChildAssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new UnfiledContainerChildAssociation(input.entry) : undefined;
            }
        }
        return UnfiledContainerChildAssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledContainerAssociationPagingList = (function () {
        function UnfiledContainerAssociationPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new UnfiledContainerChildAssociationEntry(item);
                    });
                }
                this.source = input.source ? new UnfiledContainer(input.source) : undefined;
            }
        }
        return UnfiledContainerAssociationPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledContainerAssociationPaging = (function () {
        function UnfiledContainerAssociationPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new UnfiledContainerAssociationPagingList(input.list) : undefined;
            }
        }
        return UnfiledContainerAssociationPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledContainerEntry = (function () {
        function UnfiledContainerEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new UnfiledContainer(input.entry) : undefined;
            }
        }
        return UnfiledContainerEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledContainersApi = (function (_super) {
        __extends(UnfiledContainersApi, _super);
        function UnfiledContainersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UnfiledContainersApi.prototype.createUnfiledContainerChildren = function (unfiledContainerId, nodeBodyCreate, opts) {
            throwIfNotDefined(unfiledContainerId, 'unfiledContainerId');
            throwIfNotDefined(nodeBodyCreate, 'nodeBodyCreate');
            opts = opts || {};
            var postBody = nodeBodyCreate;
            var pathParams = {
                'unfiledContainerId': unfiledContainerId
            };
            var queryParams = {
                'autoRename': opts['autoRename'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json', 'multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-containers/{unfiledContainerId}/children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledContainerAssociationPaging);
        };
        UnfiledContainersApi.prototype.getUnfiledContainer = function (unfiledContainerId, opts) {
            throwIfNotDefined(unfiledContainerId, 'unfiledContainerId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'unfiledContainerId': unfiledContainerId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-containers/{unfiledContainerId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledContainerEntry);
        };
        UnfiledContainersApi.prototype.listUnfiledContainerChildren = function (unfiledContainerId, opts) {
            throwIfNotDefined(unfiledContainerId, 'unfiledContainerId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'unfiledContainerId': unfiledContainerId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'includeSource': opts['includeSource'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-containers/{unfiledContainerId}/children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledContainerAssociationPaging);
        };
        UnfiledContainersApi.prototype.updateUnfiledContainer = function (unfiledContainerId, unfiledContainerBodyUpdate, opts) {
            throwIfNotDefined(unfiledContainerId, 'unfiledContainerId');
            throwIfNotDefined(unfiledContainerBodyUpdate, 'unfiledContainerBodyUpdate');
            opts = opts || {};
            var postBody = unfiledContainerBodyUpdate;
            var pathParams = {
                'unfiledContainerId': unfiledContainerId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-containers/{unfiledContainerId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledContainerEntry);
        };
        return UnfiledContainersApi;
    }(BaseApi$4));
    //# sourceMappingURL=unfiledContainers.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFolder = (function () {
        function UnfiledRecordFolder(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return UnfiledRecordFolder;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFolderChildAssociation = (function () {
        function UnfiledRecordFolderChildAssociation(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.association = input.association ? new ChildAssociationInfo(input.association) : undefined;
            }
        }
        return UnfiledRecordFolderChildAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFolderChildAssociationEntry = (function () {
        function UnfiledRecordFolderChildAssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new UnfiledRecordFolderChildAssociation(input.entry) : undefined;
            }
        }
        return UnfiledRecordFolderChildAssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFolderAssociationPagingList = (function () {
        function UnfiledRecordFolderAssociationPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new UnfiledRecordFolderChildAssociationEntry(item);
                    });
                }
                this.source = input.source ? new UnfiledRecordFolder(input.source) : undefined;
            }
        }
        return UnfiledRecordFolderAssociationPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFolderAssociationPaging = (function () {
        function UnfiledRecordFolderAssociationPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new UnfiledRecordFolderAssociationPagingList(input.list) : undefined;
            }
        }
        return UnfiledRecordFolderAssociationPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFolderEntry = (function () {
        function UnfiledRecordFolderEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new UnfiledRecordFolder(input.entry) : undefined;
            }
        }
        return UnfiledRecordFolderEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFoldersApi = (function (_super) {
        __extends(UnfiledRecordFoldersApi, _super);
        function UnfiledRecordFoldersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UnfiledRecordFoldersApi.prototype.createUnfiledRecordFolderChildren = function (unfiledRecordFolderId, nodeBodyCreate, opts) {
            throwIfNotDefined(unfiledRecordFolderId, 'unfiledRecordFolderId');
            throwIfNotDefined(nodeBodyCreate, 'nodeBodyCreate');
            opts = opts || {};
            var postBody = nodeBodyCreate;
            var pathParams = {
                'unfiledRecordFolderId': unfiledRecordFolderId
            };
            var queryParams = {
                'autoRename': opts['autoRename'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json', 'multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}/children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledRecordFolderAssociationPaging);
        };
        UnfiledRecordFoldersApi.prototype.deleteUnfiledRecordFolder = function (unfiledRecordFolderId) {
            throwIfNotDefined(unfiledRecordFolderId, 'unfiledRecordFolderId');
            var postBody = null;
            var pathParams = {
                'unfiledRecordFolderId': unfiledRecordFolderId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UnfiledRecordFoldersApi.prototype.getUnfiledRecordFolder = function (unfiledRecordFolderId, opts) {
            throwIfNotDefined(unfiledRecordFolderId, 'unfiledRecordFolderId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'unfiledRecordFolderId': unfiledRecordFolderId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'relativePath': opts['relativePath'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledRecordFolderEntry);
        };
        UnfiledRecordFoldersApi.prototype.listUnfiledRecordFolderChildren = function (unfiledRecordFolderId, opts) {
            throwIfNotDefined(unfiledRecordFolderId, 'unfiledRecordFolderId');
            opts = opts || {};
            var postBody = null;
            var pathParams = {
                'unfiledRecordFolderId': unfiledRecordFolderId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'include': buildCollectionParam(opts['include'], 'csv'),
                'relativePath': opts['relativePath'],
                'includeSource': opts['includeSource'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}/children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledRecordFolderAssociationPaging);
        };
        UnfiledRecordFoldersApi.prototype.updateUnfiledRecordFolder = function (unfiledRecordFolderId, unfiledRecordFolderBodyUpdate, opts) {
            throwIfNotDefined(unfiledRecordFolderId, 'unfiledRecordFolderId');
            throwIfNotDefined(unfiledRecordFolderBodyUpdate, 'unfiledRecordFolderBodyUpdate');
            opts = opts || {};
            var postBody = unfiledRecordFolderBodyUpdate;
            var pathParams = {
                'unfiledRecordFolderId': unfiledRecordFolderId
            };
            var queryParams = {
                'include': buildCollectionParam(opts['include'], 'csv'),
                'includeSource': opts['includeSource'],
                'fields': buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledRecordFolderEntry);
        };
        return UnfiledRecordFoldersApi;
    }(BaseApi$4));
    //# sourceMappingURL=unfiledRecordFolders.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GS_CORE_APIS = {
        FilePlansApi: FilePlansApi,
        FilesApi: FilesApi,
        GsSitesApi: GsSitesApi,
        RecordCategoriesApi: RecordCategoriesApi,
        RecordFoldersApi: RecordFoldersApi,
        RecordsApi: RecordsApi,
        TransferContainersApi: TransferContainersApi,
        TransfersApi: TransfersApi,
        UnfiledContainersApi: UnfiledContainersApi,
        UnfiledRecordFoldersApi: UnfiledRecordFoldersApi
    };

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FilePlanBodyUpdate = (function () {
        function FilePlanBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FilePlanBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FilePlanComponentBodyUpdate = (function () {
        function FilePlanComponentBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FilePlanComponentBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RMNodeBodyCreate = (function () {
        function RMNodeBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RMNodeBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RMNodeBodyCreateWithRelativePath = (function () {
        function RMNodeBodyCreateWithRelativePath(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RMNodeBodyCreateWithRelativePath;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.RMSiteBodyCreate = (function () {
        function RMSiteBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RMSiteBodyCreate;
    }());
    (function (RMSiteBodyCreate) {
        RMSiteBodyCreate.ComplianceEnum = {
            STANDARD: 'STANDARD',
            DOD5015: 'DOD5015'
        };
    })(exports.RMSiteBodyCreate || (exports.RMSiteBodyCreate = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RMSiteBodyUpdate = (function () {
        function RMSiteBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RMSiteBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestBodyFile = (function () {
        function RequestBodyFile(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestBodyFile;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RootCategoryBodyCreate = (function () {
        function RootCategoryBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RootCategoryBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferChild = (function () {
        function TransferChild(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return TransferChild;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainerBodyUpdate = (function () {
        function TransferContainerBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return TransferContainerBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainerChild = (function () {
        function TransferContainerChild(input) {
            if (input) {
                Object.assign(this, input);
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
            }
        }
        return TransferContainerChild;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledContainerChild = (function () {
        function UnfiledContainerChild(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return UnfiledContainerChild;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordContainerBodyUpdate = (function () {
        function UnfiledRecordContainerBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return UnfiledRecordContainerBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFolderBodyUpdate = (function () {
        function UnfiledRecordFolderBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return UnfiledRecordFolderBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFolderChild = (function () {
        function UnfiledRecordFolderChild(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return UnfiledRecordFolderChild;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Ticket = (function () {
        function Ticket(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Ticket;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TicketEntry = (function () {
        function TicketEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Ticket(input.entry) : undefined;
            }
        }
        return TicketEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ValidTicket = (function () {
        function ValidTicket(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ValidTicket;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ValidTicketEntry = (function () {
        function ValidTicketEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ValidTicket(input.entry) : undefined;
            }
        }
        return ValidTicketEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BaseApi$5 = (function () {
        function BaseApi(alfrescoApi) {
            if (alfrescoApi) {
                this.apiClient = alfrescoApi.authClient;
            }
        }
        BaseApi.prototype.post = function (options) {
            return this.apiClient.post(options);
        };
        BaseApi.prototype.put = function (options) {
            return this.apiClient.put(options);
        };
        BaseApi.prototype.get = function (options) {
            return this.apiClient.get(options);
        };
        BaseApi.prototype.delete = function (options) {
            return this.apiClient.delete(options);
        };
        BaseApi.prototype.errorMessage = function (param, methodName) {
            return "Missing param " + param + " in " + methodName;
        };
        return BaseApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuthenticationApi = (function (_super) {
        __extends(AuthenticationApi, _super);
        function AuthenticationApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AuthenticationApi.prototype.createTicket = function (ticketBodyCreate) {
            throwIfNotDefined(ticketBodyCreate, 'ticketBodyCreate');
            var postBody = ticketBodyCreate;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/tickets', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TicketEntry);
        };
        AuthenticationApi.prototype.getTicket = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/tickets/-me-', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TicketEntry);
        };
        AuthenticationApi.prototype.deleteTicket = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/tickets/-me-', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AuthenticationApi.prototype.validateTicket = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/tickets/-me-', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ValidTicketEntry);
        };
        return AuthenticationApi;
    }(BaseApi$5));
    //# sourceMappingURL=authentication.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AUTH_APIS = { AuthenticationApi: AuthenticationApi };

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TicketBody = (function () {
        function TicketBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return TicketBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AddGroupCapabilitiesRepresentation = (function () {
        function AddGroupCapabilitiesRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AddGroupCapabilitiesRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppModelDefinition = (function () {
        function AppModelDefinition(input) {
            if (input) {
                Object.assign(this, input);
                this.lastUpdated = input.lastUpdated ? DateAlfresco.parseDate(input.lastUpdated) : undefined;
            }
        }
        return AppModelDefinition;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PublishIdentityInfoRepresentation = (function () {
        function PublishIdentityInfoRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.group = input.group ? new LightGroupRepresentation(input.group) : undefined;
                this.person = input.person ? new LightUserRepresentation(input.person) : undefined;
            }
        }
        return PublishIdentityInfoRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppDefinition = (function () {
        function AppDefinition(input) {
            if (input) {
                Object.assign(this, input);
                if (input.models) {
                    this.models = input.models.map(function (item) {
                        return new AppModelDefinition(item);
                    });
                }
                if (input.publishIdentityInfo) {
                    this.publishIdentityInfo = input.publishIdentityInfo.map(function (item) {
                        return new PublishIdentityInfoRepresentation(item);
                    });
                }
            }
        }
        return AppDefinition;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppDefinitionPublishRepresentation = (function () {
        function AppDefinitionPublishRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AppDefinitionPublishRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppDefinitionSaveRepresentation = (function () {
        function AppDefinitionSaveRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.appDefinition = input.appDefinition ? new AppDefinitionRepresentation(input.appDefinition) : undefined;
            }
        }
        return AppDefinitionSaveRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AssigneeIdentifierRepresentation = (function () {
        function AssigneeIdentifierRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AssigneeIdentifierRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BoxUserAccountCredentialsRepresentation = (function () {
        function BoxUserAccountCredentialsRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.expireDate = input.expireDate ? DateAlfresco.parseDate(input.expireDate) : undefined;
            }
        }
        return BoxUserAccountCredentialsRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BulkUserUpdateRepresentation = (function () {
        function BulkUserUpdateRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return BulkUserUpdateRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChangePasswordRepresentation = (function () {
        function ChangePasswordRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ChangePasswordRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChecklistOrderRepresentation = (function () {
        function ChecklistOrderRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ChecklistOrderRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CompleteFormRepresentation = (function () {
        function CompleteFormRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return CompleteFormRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CreateEndpointBasicAuthRepresentation = (function () {
        function CreateEndpointBasicAuthRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return CreateEndpointBasicAuthRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CreateProcessInstanceRepresentation = (function () {
        function CreateProcessInstanceRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.variables) {
                    this.variables = input.variables.map(function (item) {
                        return new RestVariable(item);
                    });
                }
            }
        }
        return CreateProcessInstanceRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CreateTenantRepresentation = (function () {
        function CreateTenantRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return CreateTenantRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DecisionTaskRepresentation = (function () {
        function DecisionTaskRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.decisionExecutionEnded = input.decisionExecutionEnded ? DateAlfresco.parseDate(input.decisionExecutionEnded) : undefined;
            }
        }
        return DecisionTaskRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EntityAttributeScopeRepresentation = (function () {
        function EntityAttributeScopeRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return EntityAttributeScopeRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EntityVariableScopeRepresentation = (function () {
        function EntityVariableScopeRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.attributes) {
                    this.attributes = input.attributes.map(function (item) {
                        return new EntityAttributeScopeRepresentation(item);
                    });
                }
            }
        }
        return EntityVariableScopeRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FieldValueInfo = (function () {
        function FieldValueInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FieldValueInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var File$1 = (function () {
        function File(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return File;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormIdentifierRepresentation = (function () {
        function FormIdentifierRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FormIdentifierRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessScopeIdentifierRepresentation = (function () {
        function ProcessScopeIdentifierRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ProcessScopeIdentifierRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormSaveRepresentation = (function () {
        function FormSaveRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.formRepresentation = input.formRepresentation ? new FormRepresentation(input.formRepresentation) : undefined;
                if (input.processScopeIdentifiers) {
                    this.processScopeIdentifiers = input.processScopeIdentifiers.map(function (item) {
                        return new ProcessScopeIdentifierRepresentation(item);
                    });
                }
            }
        }
        return FormSaveRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormScopeRepresentation = (function () {
        function FormScopeRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.fieldVariables) {
                    this.fieldVariables = input.fieldVariables.map(function (item) {
                        return new FormFieldRepresentation(item);
                    });
                }
                if (input.fields) {
                    this.fields = input.fields.map(function (item) {
                        return new FormFieldRepresentation(item);
                    });
                }
                if (input.outcomes) {
                    this.outcomes = input.outcomes.map(function (item) {
                        return new FormOutcomeRepresentation(item);
                    });
                }
            }
        }
        return FormScopeRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.QueryVariable = (function () {
        function QueryVariable(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return QueryVariable;
    }());
    (function (QueryVariable) {
        QueryVariable.VariableOperationEnum = {
            EQUALS: 'EQUALS',
            NOTEQUALS: 'NOT_EQUALS',
            EQUALSIGNORECASE: 'EQUALS_IGNORE_CASE',
            NOTEQUALSIGNORECASE: 'NOT_EQUALS_IGNORE_CASE',
            LIKE: 'LIKE',
            LIKEIGNORECASE: 'LIKE_IGNORE_CASE',
            GREATERTHAN: 'GREATER_THAN',
            GREATERTHANOREQUALS: 'GREATER_THAN_OR_EQUALS',
            LESSTHAN: 'LESS_THAN',
            LESSTHANOREQUALS: 'LESS_THAN_OR_EQUALS'
        };
    })(exports.QueryVariable || (exports.QueryVariable = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var HistoricProcessInstanceQueryRepresentation = (function () {
        function HistoricProcessInstanceQueryRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.finishedAfter = input.finishedAfter ? DateAlfresco.parseDate(input.finishedAfter) : undefined;
                this.finishedBefore = input.finishedBefore ? DateAlfresco.parseDate(input.finishedBefore) : undefined;
                this.startedAfter = input.startedAfter ? DateAlfresco.parseDate(input.startedAfter) : undefined;
                this.startedBefore = input.startedBefore ? DateAlfresco.parseDate(input.startedBefore) : undefined;
                if (input.variables) {
                    this.variables = input.variables.map(function (item) {
                        return new exports.QueryVariable(item);
                    });
                }
            }
        }
        return HistoricProcessInstanceQueryRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var HistoricTaskInstanceQueryRepresentation = (function () {
        function HistoricTaskInstanceQueryRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.dueDate = input.dueDate ? DateAlfresco.parseDate(input.dueDate) : undefined;
                this.dueDateAfter = input.dueDateAfter ? DateAlfresco.parseDate(input.dueDateAfter) : undefined;
                this.dueDateBefore = input.dueDateBefore ? DateAlfresco.parseDate(input.dueDateBefore) : undefined;
                if (input.processVariables) {
                    this.processVariables = input.processVariables.map(function (item) {
                        return new exports.QueryVariable(item);
                    });
                }
                this.taskCompletedAfter = input.taskCompletedAfter ? DateAlfresco.parseDate(input.taskCompletedAfter) : undefined;
                this.taskCompletedBefore = input.taskCompletedBefore ? DateAlfresco.parseDate(input.taskCompletedBefore) : undefined;
                this.taskCompletedOn = input.taskCompletedOn ? DateAlfresco.parseDate(input.taskCompletedOn) : undefined;
                this.taskCreatedAfter = input.taskCreatedAfter ? DateAlfresco.parseDate(input.taskCreatedAfter) : undefined;
                this.taskCreatedBefore = input.taskCreatedBefore ? DateAlfresco.parseDate(input.taskCreatedBefore) : undefined;
                this.taskCreatedOn = input.taskCreatedOn ? DateAlfresco.parseDate(input.taskCreatedOn) : undefined;
                if (input.taskVariables) {
                    this.taskVariables = input.taskVariables.map(function (item) {
                        return new exports.QueryVariable(item);
                    });
                }
            }
        }
        return HistoricTaskInstanceQueryRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstanceFilterRequestRepresentation = (function () {
        function ProcessInstanceFilterRequestRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.filter = input.filter ? new ProcessInstanceFilterRepresentation(input.filter) : undefined;
            }
        }
        return ProcessInstanceFilterRequestRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessScopesRequestRepresentation = (function () {
        function ProcessScopesRequestRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.identifiers) {
                    this.identifiers = input.identifiers.map(function (item) {
                        return new ProcessScopeIdentifierRepresentation(item);
                    });
                }
            }
        }
        return ProcessScopesRequestRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResetPasswordRepresentation = (function () {
        function ResetPasswordRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ResetPasswordRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationDecisionTaskRepresentation = (function () {
        function ResultListDataRepresentationDecisionTaskRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new DecisionTaskRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationDecisionTaskRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RuntimeAppDefinitionSaveRepresentation = (function () {
        function RuntimeAppDefinitionSaveRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.appDefinitions) {
                    this.appDefinitions = input.appDefinitions.map(function (item) {
                        return new AppDefinitionRepresentation(item);
                    });
                }
            }
        }
        return RuntimeAppDefinitionSaveRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SaveFormRepresentation = (function () {
        function SaveFormRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SaveFormRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskFilterRequestRepresentation = (function () {
        function TaskFilterRequestRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.filter = input.filter ? new exports.TaskFilterRepresentation(input.filter) : undefined;
            }
        }
        return TaskFilterRequestRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskUpdateRepresentation = (function () {
        function TaskUpdateRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.dueDate = input.dueDate ? DateAlfresco.parseDate(input.dueDate) : undefined;
            }
        }
        return TaskUpdateRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserAccountCredentialsRepresentation = (function () {
        function UserAccountCredentialsRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return UserAccountCredentialsRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserActionRepresentation = (function () {
        function UserActionRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return UserActionRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserFilterOrderRepresentation = (function () {
        function UserFilterOrderRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return UserFilterOrderRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserIdentifierRepresentation = (function () {
        function UserIdentifierRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return UserIdentifierRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var VariableMappingRepresentation = (function () {
        function VariableMappingRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return VariableMappingRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var VariableScopeRepresentation = (function () {
        function VariableScopeRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return VariableScopeRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GenericBucketBucketInfo = (function () {
        function GenericBucketBucketInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GenericBucketBucketInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GenericMetric = (function () {
        function GenericMetric(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GenericMetric;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GenericBucket = (function () {
        function GenericBucket(input) {
            if (input) {
                Object.assign(this, input);
                if (input.metrics) {
                    this.metrics = input.metrics.map(function (item) {
                        return new GenericMetric(item);
                    });
                }
                this.bucketInfo = input.bucketInfo ? new GenericBucketBucketInfo(input.bucketInfo) : undefined;
            }
        }
        return GenericBucket;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GenericFacetResponse = (function () {
        function GenericFacetResponse(input) {
            if (input) {
                Object.assign(this, input);
                if (input.buckets) {
                    this.buckets = input.buckets.map(function (item) {
                        return new GenericBucket(item);
                    });
                }
            }
        }
        return GenericFacetResponse;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResponseConsistency = (function () {
        function ResponseConsistency(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ResponseConsistency;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultBucketsBuckets = (function () {
        function ResultBucketsBuckets(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ResultBucketsBuckets;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultBuckets = (function () {
        function ResultBuckets(input) {
            if (input) {
                Object.assign(this, input);
                if (input.buckets) {
                    this.buckets = input.buckets.map(function (item) {
                        return new ResultBucketsBuckets(item);
                    });
                }
            }
        }
        return ResultBuckets;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultSetContextFacetQueries = (function () {
        function ResultSetContextFacetQueries(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ResultSetContextFacetQueries;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.ResultSetContextSpellcheck = (function () {
        function ResultSetContextSpellcheck(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ResultSetContextSpellcheck;
    }());
    (function (ResultSetContextSpellcheck) {
        ResultSetContextSpellcheck.TypeEnum = {
            SearchInsteadFor: 'searchInsteadFor',
            DidYouMean: 'didYouMean'
        };
    })(exports.ResultSetContextSpellcheck || (exports.ResultSetContextSpellcheck = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultSetContext = (function () {
        function ResultSetContext(input) {
            if (input) {
                Object.assign(this, input);
                this.consistency = input.consistency ? new ResponseConsistency(input.consistency) : undefined;
                this.request = input.request ? new SearchRequest(input.request) : undefined;
                if (input.facetQueries) {
                    this.facetQueries = input.facetQueries.map(function (item) {
                        return new ResultSetContextFacetQueries(item);
                    });
                }
                if (input.facetsFields) {
                    this.facetsFields = input.facetsFields.map(function (item) {
                        return new ResultBuckets(item);
                    });
                }
                if (input.facets) {
                    this.facets = input.facets.map(function (item) {
                        return new GenericFacetResponse(item);
                    });
                }
                if (input.spellcheck) {
                    this.spellcheck = input.spellcheck.map(function (item) {
                        return new exports.ResultSetContextSpellcheck(item);
                    });
                }
            }
        }
        return ResultSetContext;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SearchEntryHighlight = (function () {
        function SearchEntryHighlight(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SearchEntryHighlight;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SearchEntry = (function () {
        function SearchEntry(input) {
            if (input) {
                Object.assign(this, input);
                if (input.highlight) {
                    this.highlight = input.highlight.map(function (item) {
                        return new SearchEntryHighlight(item);
                    });
                }
            }
        }
        return SearchEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultNode = (function () {
        function ResultNode(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.search = input.search ? new SearchEntry(input.search) : undefined;
                this.archivedByUser = input.archivedByUser ? new UserInfo(input.archivedByUser) : undefined;
                this.archivedAt = input.archivedAt ? DateAlfresco.parseDate(input.archivedAt) : undefined;
            }
        }
        return ResultNode;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultSetRowEntry = (function () {
        function ResultSetRowEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ResultNode(input.entry) : undefined;
            }
        }
        return ResultSetRowEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultSetPagingList = (function () {
        function ResultSetPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                this.context = input.context ? new ResultSetContext(input.context) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new ResultSetRowEntry(item);
                    });
                }
            }
        }
        return ResultSetPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultSetPaging = (function () {
        function ResultSetPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new ResultSetPagingList(input.list) : undefined;
            }
        }
        return ResultSetPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BaseApi$6 = (function () {
        function BaseApi(alfrescoApi) {
            this.apiClient = alfrescoApi.searchClient;
        }
        BaseApi.prototype.errorMessage = function (param, methodName) {
            return "Missing param " + param + " in " + methodName;
        };
        return BaseApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SearchApi = (function (_super) {
        __extends(SearchApi, _super);
        function SearchApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SearchApi.prototype.search = function (queryBody) {
            throwIfNotDefined(queryBody, 'queryBody');
            var postBody = queryBody;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/search', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultSetPaging);
        };
        return SearchApi;
    }(BaseApi$6));
    //# sourceMappingURL=search.api.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SEARCH_APIS = { SearchApi: SearchApi };

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFacetQueriesInner = (function () {
        function RequestFacetQueriesInner(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestFacetQueriesInner;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFilterQueriesInner = (function () {
        function RequestFilterQueriesInner(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestFilterQueriesInner;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.RequestSortDefinitionInner = (function () {
        function RequestSortDefinitionInner(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestSortDefinitionInner;
    }());
    (function (RequestSortDefinitionInner) {
        RequestSortDefinitionInner.TypeEnum = {
            FIELD: 'FIELD',
            DOCUMENT: 'DOCUMENT',
            SCORE: 'SCORE'
        };
    })(exports.RequestSortDefinitionInner || (exports.RequestSortDefinitionInner = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestTemplatesInner = (function () {
        function RequestTemplatesInner(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestTemplatesInner;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AlfrescoUpload = (function (_super) {
        __extends(AlfrescoUpload, _super);
        function AlfrescoUpload() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AlfrescoUpload.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.contentClient;
        };
        return AlfrescoUpload;
    }(UploadApi));
    //# sourceMappingURL=alfrescoUpload.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Storage = (function () {
        function Storage() {
            if (this.supportsStorage()) {
                this._storage = window.localStorage;
            }
        }
        Storage.prototype.supportsStorage = function () {
            try {
                return 'sessionStorage' in window && window.sessionStorage !== null;
            }
            catch (e) {
                return false;
            }
        };
        Storage.prototype.setDomainPrefix = function (prefix) {
            this.prefix = prefix ? prefix + '_' : '';
        };
        Storage.prototype.setStorage = function (storage) {
            this._storage = storage;
        };
        Storage.prototype.setItem = function (key, value) {
            if (this.supportsStorage()) {
                this._storage.setItem(this.prefix + key, value);
            }
        };
        Storage.prototype.removeItem = function (key) {
            if (this.supportsStorage()) {
                this._storage.removeItem(this.prefix + key);
            }
        };
        Storage.prototype.getItem = function (key) {
            if (this.supportsStorage()) {
                return this._storage.getItem(this.prefix + key);
            }
        };
        return Storage;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EventEmitter$2 = EventEmitter;
    var ContentAuth = (function (_super) {
        __extends(ContentAuth, _super);
        function ContentAuth(config, alfrescoApi) {
            var _this = _super.call(this) || this;
            _this.className = 'ContentAuth';
            _this.storage = new Storage();
            _this.storage.setDomainPrefix(config.domainPrefix);
            _this.setConfig(config);
            _this.authApi = new AuthenticationApi(alfrescoApi);
            return _this;
        }
        ContentAuth.prototype.setConfig = function (config) {
            this.config = config;
            this.basePath = this.config.hostEcm + '/' + this.config.contextRoot + '/api/-default-/public/authentication/versions/1';
            this.ticketStorageLabel = 'ticket-ECM';
            if (this.config.ticketEcm) {
                this.setTicket(config.ticketEcm);
            }
            else if (this.storage.getItem(this.ticketStorageLabel)) {
                this.setTicket(this.storage.getItem(this.ticketStorageLabel));
            }
        };
        ContentAuth.prototype.changeHost = function () {
            this.basePath = this.config.hostEcm + '/' + this.config.contextRoot + '/api/-default-/public/authentication/versions/1';
            this.ticket = undefined;
        };
        ContentAuth.prototype.saveUsername = function (username) {
            if (this.storage.supportsStorage()) {
                this.storage.setItem('ACS_USERNAME', username);
            }
        };
        ContentAuth.prototype.login = function (username, password) {
            var _this = this;
            this.authentications.basicAuth.username = username;
            this.authentications.basicAuth.password = password;
            var loginRequest = {};
            loginRequest.userId = this.authentications.basicAuth.username;
            loginRequest.password = this.authentications.basicAuth.password;
            var promise = new Promise(function (resolve, reject) {
                _this.authApi.createTicket(loginRequest)
                    .then(function (data) {
                    _this.saveUsername(username);
                    _this.setTicket(data.entry.id);
                    promise.emit('success');
                    resolve(data.entry.id);
                })
                    .catch(function (error) {
                    _this.saveUsername('');
                    if (error.status === 401) {
                        promise.emit('unauthorized');
                    }
                    else if (error.status === 403) {
                        promise.emit('forbidden');
                    }
                    else {
                        promise.emit('error');
                    }
                    reject(error);
                });
            });
            EventEmitter$2(promise);
            return promise;
        };
        ContentAuth.prototype.validateTicket = function () {
            var _this = this;
            this.setTicket(this.config.ticketEcm);
            var promise = new Promise(function (resolve, reject) {
                _this.authApi.validateTicket().then(function (data) {
                    _this.setTicket(data.entry.id);
                    promise.emit('success');
                    resolve(data.entry.id);
                }, function (error) {
                    if (error.status === 401) {
                        promise.emit('unauthorized');
                    }
                    promise.emit('error');
                    reject(error);
                });
            });
            EventEmitter$2(promise);
            return promise;
        };
        ContentAuth.prototype.logout = function () {
            var _this = this;
            this.saveUsername('');
            var promise = new Promise(function (resolve, reject) {
                _this.authApi.deleteTicket().then(function () {
                    promise.emit('logout');
                    _this.invalidateSession();
                    resolve('logout');
                }, function (error) {
                    if (error.status === 401) {
                        promise.emit('unauthorized');
                    }
                    promise.emit('error');
                    reject(error);
                });
            });
            EventEmitter$2(promise);
            return promise;
        };
        ContentAuth.prototype.setTicket = function (ticket) {
            this.authentications.basicAuth.username = 'ROLE_TICKET';
            this.authentications.basicAuth.password = ticket;
            this.config.ticketEcm = ticket;
            this.storage.setItem(this.ticketStorageLabel, ticket);
            this.ticket = ticket;
        };
        ContentAuth.prototype.getTicket = function () {
            return this.ticket;
        };
        ContentAuth.prototype.invalidateSession = function () {
            this.storage.removeItem(this.ticketStorageLabel);
            this.authentications.basicAuth.username = null;
            this.authentications.basicAuth.password = null;
            this.config.ticketEcm = null;
            this.ticket = null;
        };
        ContentAuth.prototype.isLoggedIn = function () {
            return !!this.ticket;
        };
        ContentAuth.prototype.getAuthentication = function () {
            return this.authentications;
        };
        return ContentAuth;
    }(AlfrescoApiClient));
    //# sourceMappingURL=contentAuth.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EventEmitter$3 = EventEmitter;
    var ProcessAuth = (function (_super) {
        __extends(ProcessAuth, _super);
        function ProcessAuth(config) {
            var _this = _super.call(this) || this;
            _this.authentications = {
                'basicAuth': { ticket: '' }, type: 'activiti'
            };
            _this.storage = new Storage();
            _this.storage.setDomainPrefix(config.domainPrefix);
            _this.className = 'ProcessAuth';
            if (!_this.isBrowser()) {
                _this.defaultHeaders = {
                    'user-agent': 'alfresco-js-api'
                };
            }
            _this.setConfig(config);
            return _this;
        }
        ProcessAuth.prototype.setConfig = function (config) {
            this.config = config;
            this.ticket = undefined;
            this.basePath = config.hostBpm + '/' + this.config.contextRootBpm;
            if (this.config.ticketBpm) {
                this.setTicket(config.ticketBpm);
            }
            else if (this.storage.getItem('ticket-BPM')) {
                this.setTicket(this.storage.getItem('ticket-BPM'));
            }
        };
        ProcessAuth.prototype.changeHost = function () {
            this.basePath = this.config.hostBpm + '/' + this.config.contextRootBpm;
            this.ticket = undefined;
        };
        ProcessAuth.prototype.changeCsrfConfig = function (disableCsrf) {
            this.config.disableCsrf = disableCsrf;
        };
        ProcessAuth.prototype.saveUsername = function (username) {
            if (this.storage.supportsStorage()) {
                this.storage.setItem('APS_USERNAME', username);
            }
        };
        ProcessAuth.prototype.login = function (username, password) {
            var _this = this;
            this.authentications.basicAuth.username = username;
            this.authentications.basicAuth.password = password;
            var postBody = {}, pathParams = {}, queryParams = {};
            var headerParams = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Cache-Control': 'no-cache'
            };
            var formParams = {
                j_username: this.authentications.basicAuth.username,
                j_password: this.authentications.basicAuth.password,
                _spring_security_remember_me: true,
                submit: 'Login'
            };
            var contentTypes = ['application/x-www-form-urlencoded'];
            var accepts = ['application/json'];
            var promise = new Promise(function (resolve, reject) {
                _this.callApi('/app/authentication', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts).then(function () {
                    _this.saveUsername(username);
                    var ticket = _this.basicAuth(_this.authentications.basicAuth.username, _this.authentications.basicAuth.password);
                    _this.setTicket(ticket);
                    promise.emit('success');
                    resolve(ticket);
                }, function (error) {
                    _this.saveUsername('');
                    if (error.status === 401) {
                        promise.emit('unauthorized');
                    }
                    else if (error.status === 403) {
                        promise.emit('forbidden');
                    }
                    else {
                        promise.emit('error');
                    }
                    reject(error);
                });
            });
            EventEmitter$3(promise);
            return promise;
        };
        ProcessAuth.prototype.logout = function () {
            var _this = this;
            this.saveUsername('');
            var postBody = {}, pathParams = {}, queryParams = {}, headerParams = {}, formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            var promise = new Promise(function (resolve, reject) {
                _this.callApi('/app/logout', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts).then(function () {
                    _this.invalidateSession();
                    promise.emit('logout');
                    resolve('logout');
                }, function (error) {
                    if (error.status === 401) {
                        promise.emit('unauthorized');
                    }
                    promise.emit('error');
                    reject(error);
                });
            });
            EventEmitter$3(promise);
            return promise;
        };
        ProcessAuth.prototype.setTicket = function (ticket) {
            this.authentications.basicAuth.ticket = ticket;
            this.authentications.basicAuth.password = null;
            this.config.ticketBpm = ticket;
            this.storage.setItem('ticket-BPM', ticket);
            this.ticket = ticket;
        };
        ProcessAuth.prototype.invalidateSession = function () {
            this.storage.removeItem('ticket-BPM');
            this.authentications.basicAuth.ticket = null;
            this.authentications.basicAuth.password = null;
            this.authentications.basicAuth.username = null;
            this.config.ticketBpm = null;
            this.ticket = null;
        };
        ProcessAuth.prototype.getTicket = function () {
            return this.ticket;
        };
        ProcessAuth.prototype.isLoggedIn = function () {
            return !!this.ticket;
        };
        ProcessAuth.prototype.getAuthentication = function () {
            return this.authentications;
        };
        return ProcessAuth;
    }(AlfrescoApiClient));
    //# sourceMappingURL=processAuth.js.map

    module.exports = minimatch;
    minimatch.Minimatch = Minimatch;

    var path = { sep: '/' };
    try {
      path = require('path');
    } catch (er) {}

    var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};
    var expand = require('brace-expansion');

    var plTypes = {
      '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
      '?': { open: '(?:', close: ')?' },
      '+': { open: '(?:', close: ')+' },
      '*': { open: '(?:', close: ')*' },
      '@': { open: '(?:', close: ')' }
    };

    // any single thing other than /
    // don't need to escape / when using new RegExp()
    var qmark = '[^/]';

    // * => any number of characters
    var star = qmark + '*?';

    // ** when dots are allowed.  Anything goes, except .. and .
    // not (^ or / followed by one or two dots followed by $ or /),
    // followed by anything, any number of times.
    var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?';

    // not a ^ or / followed by a dot,
    // followed by anything, any number of times.
    var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?';

    // characters that need to be escaped in RegExp.
    var reSpecials = charSet('().*{}+?[]^$\\!');

    // "abc" -> { a:true, b:true, c:true }
    function charSet (s) {
      return s.split('').reduce(function (set, c) {
        set[c] = true;
        return set
      }, {})
    }

    // normalizes slashes.
    var slashSplit = /\/+/;

    minimatch.filter = filter;
    function filter (pattern, options) {
      options = options || {};
      return function (p, i, list) {
        return minimatch(p, pattern, options)
      }
    }

    function ext (a, b) {
      a = a || {};
      b = b || {};
      var t = {};
      Object.keys(b).forEach(function (k) {
        t[k] = b[k];
      });
      Object.keys(a).forEach(function (k) {
        t[k] = a[k];
      });
      return t
    }

    minimatch.defaults = function (def) {
      if (!def || !Object.keys(def).length) return minimatch

      var orig = minimatch;

      var m = function minimatch (p, pattern, options) {
        return orig.minimatch(p, pattern, ext(def, options))
      };

      m.Minimatch = function Minimatch (pattern, options) {
        return new orig.Minimatch(pattern, ext(def, options))
      };

      return m
    };

    Minimatch.defaults = function (def) {
      if (!def || !Object.keys(def).length) return Minimatch
      return minimatch.defaults(def).Minimatch
    };

    function minimatch (p, pattern, options) {
      if (typeof pattern !== 'string') {
        throw new TypeError('glob pattern string required')
      }

      if (!options) options = {};

      // shortcut: comments match nothing.
      if (!options.nocomment && pattern.charAt(0) === '#') {
        return false
      }

      // "" only matches ""
      if (pattern.trim() === '') return p === ''

      return new Minimatch(pattern, options).match(p)
    }

    function Minimatch (pattern, options) {
      if (!(this instanceof Minimatch)) {
        return new Minimatch(pattern, options)
      }

      if (typeof pattern !== 'string') {
        throw new TypeError('glob pattern string required')
      }

      if (!options) options = {};
      pattern = pattern.trim();

      // windows support: need to use /, not \
      if (path.sep !== '/') {
        pattern = pattern.split(path.sep).join('/');
      }

      this.options = options;
      this.set = [];
      this.pattern = pattern;
      this.regexp = null;
      this.negate = false;
      this.comment = false;
      this.empty = false;

      // make the set of regexps etc.
      this.make();
    }

    Minimatch.prototype.debug = function () {};

    Minimatch.prototype.make = make;
    function make () {
      // don't do it more than once.
      if (this._made) return

      var pattern = this.pattern;
      var options = this.options;

      // empty patterns and comments match nothing.
      if (!options.nocomment && pattern.charAt(0) === '#') {
        this.comment = true;
        return
      }
      if (!pattern) {
        this.empty = true;
        return
      }

      // step 1: figure out negation, etc.
      this.parseNegate();

      // step 2: expand braces
      var set = this.globSet = this.braceExpand();

      if (options.debug) this.debug = console.error;

      this.debug(this.pattern, set);

      // step 3: now we have a set, so turn each one into a series of path-portion
      // matching patterns.
      // These will be regexps, except in the case of "**", which is
      // set to the GLOBSTAR object for globstar behavior,
      // and will not contain any / characters
      set = this.globParts = set.map(function (s) {
        return s.split(slashSplit)
      });

      this.debug(this.pattern, set);

      // glob --> regexps
      set = set.map(function (s, si, set) {
        return s.map(this.parse, this)
      }, this);

      this.debug(this.pattern, set);

      // filter out everything that didn't compile properly.
      set = set.filter(function (s) {
        return s.indexOf(false) === -1
      });

      this.debug(this.pattern, set);

      this.set = set;
    }

    Minimatch.prototype.parseNegate = parseNegate;
    function parseNegate () {
      var pattern = this.pattern;
      var negate = false;
      var options = this.options;
      var negateOffset = 0;

      if (options.nonegate) return

      for (var i = 0, l = pattern.length
        ; i < l && pattern.charAt(i) === '!'
        ; i++) {
        negate = !negate;
        negateOffset++;
      }

      if (negateOffset) this.pattern = pattern.substr(negateOffset);
      this.negate = negate;
    }

    // Brace expansion:
    // a{b,c}d -> abd acd
    // a{b,}c -> abc ac
    // a{0..3}d -> a0d a1d a2d a3d
    // a{b,c{d,e}f}g -> abg acdfg acefg
    // a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
    //
    // Invalid sets are not expanded.
    // a{2..}b -> a{2..}b
    // a{b}c -> a{b}c
    minimatch.braceExpand = function (pattern, options) {
      return braceExpand(pattern, options)
    };

    Minimatch.prototype.braceExpand = braceExpand;

    function braceExpand (pattern, options) {
      if (!options) {
        if (this instanceof Minimatch) {
          options = this.options;
        } else {
          options = {};
        }
      }

      pattern = typeof pattern === 'undefined'
        ? this.pattern : pattern;

      if (typeof pattern === 'undefined') {
        throw new TypeError('undefined pattern')
      }

      if (options.nobrace ||
        !pattern.match(/\{.*\}/)) {
        // shortcut. no need to expand.
        return [pattern]
      }

      return expand(pattern)
    }

    // parse a component of the expanded set.
    // At this point, no pattern may contain "/" in it
    // so we're going to return a 2d array, where each entry is the full
    // pattern, split on '/', and then turned into a regular expression.
    // A regexp is made at the end which joins each array with an
    // escaped /, and another full one which joins each regexp with |.
    //
    // Following the lead of Bash 4.1, note that "**" only has special meaning
    // when it is the *only* thing in a path portion.  Otherwise, any series
    // of * is equivalent to a single *.  Globstar behavior is enabled by
    // default, and can be disabled by setting options.noglobstar.
    Minimatch.prototype.parse = parse$1;
    var SUBPARSE = {};
    function parse$1 (pattern, isSub) {
      if (pattern.length > 1024 * 64) {
        throw new TypeError('pattern is too long')
      }

      var options = this.options;

      // shortcuts
      if (!options.noglobstar && pattern === '**') return GLOBSTAR
      if (pattern === '') return ''

      var re = '';
      var hasMagic = !!options.nocase;
      var escaping = false;
      // ? => one single character
      var patternListStack = [];
      var negativeLists = [];
      var stateChar;
      var inClass = false;
      var reClassStart = -1;
      var classStart = -1;
      // . and .. never match anything that doesn't start with .,
      // even when options.dot is set.
      var patternStart = pattern.charAt(0) === '.' ? '' // anything
      // not (start or / followed by . or .. followed by / or end)
      : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
      : '(?!\\.)';
      var self = this;

      function clearStateChar () {
        if (stateChar) {
          // we had some state-tracking character
          // that wasn't consumed by this pass.
          switch (stateChar) {
            case '*':
              re += star;
              hasMagic = true;
            break
            case '?':
              re += qmark;
              hasMagic = true;
            break
            default:
              re += '\\' + stateChar;
            break
          }
          self.debug('clearStateChar %j %j', stateChar, re);
          stateChar = false;
        }
      }

      for (var i = 0, len = pattern.length, c
        ; (i < len) && (c = pattern.charAt(i))
        ; i++) {
        this.debug('%s\t%s %s %j', pattern, i, re, c);

        // skip over any that are escaped.
        if (escaping && reSpecials[c]) {
          re += '\\' + c;
          escaping = false;
          continue
        }

        switch (c) {
          case '/':
            // completely not allowed, even escaped.
            // Should already be path-split by now.
            return false

          case '\\':
            clearStateChar();
            escaping = true;
          continue

          // the various stateChar values
          // for the "extglob" stuff.
          case '?':
          case '*':
          case '+':
          case '@':
          case '!':
            this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c);

            // all of those are literals inside a class, except that
            // the glob [!a] means [^a] in regexp
            if (inClass) {
              this.debug('  in class');
              if (c === '!' && i === classStart + 1) c = '^';
              re += c;
              continue
            }

            // if we already have a stateChar, then it means
            // that there was something like ** or +? in there.
            // Handle the stateChar, then proceed with this one.
            self.debug('call clearStateChar %j', stateChar);
            clearStateChar();
            stateChar = c;
            // if extglob is disabled, then +(asdf|foo) isn't a thing.
            // just clear the statechar *now*, rather than even diving into
            // the patternList stuff.
            if (options.noext) clearStateChar();
          continue

          case '(':
            if (inClass) {
              re += '(';
              continue
            }

            if (!stateChar) {
              re += '\\(';
              continue
            }

            patternListStack.push({
              type: stateChar,
              start: i - 1,
              reStart: re.length,
              open: plTypes[stateChar].open,
              close: plTypes[stateChar].close
            });
            // negation is (?:(?!js)[^/]*)
            re += stateChar === '!' ? '(?:(?!(?:' : '(?:';
            this.debug('plType %j %j', stateChar, re);
            stateChar = false;
          continue

          case ')':
            if (inClass || !patternListStack.length) {
              re += '\\)';
              continue
            }

            clearStateChar();
            hasMagic = true;
            var pl = patternListStack.pop();
            // negation is (?:(?!js)[^/]*)
            // The others are (?:<pattern>)<type>
            re += pl.close;
            if (pl.type === '!') {
              negativeLists.push(pl);
            }
            pl.reEnd = re.length;
          continue

          case '|':
            if (inClass || !patternListStack.length || escaping) {
              re += '\\|';
              escaping = false;
              continue
            }

            clearStateChar();
            re += '|';
          continue

          // these are mostly the same in regexp and glob
          case '[':
            // swallow any state-tracking char before the [
            clearStateChar();

            if (inClass) {
              re += '\\' + c;
              continue
            }

            inClass = true;
            classStart = i;
            reClassStart = re.length;
            re += c;
          continue

          case ']':
            //  a right bracket shall lose its special
            //  meaning and represent itself in
            //  a bracket expression if it occurs
            //  first in the list.  -- POSIX.2 2.8.3.2
            if (i === classStart + 1 || !inClass) {
              re += '\\' + c;
              escaping = false;
              continue
            }

            // handle the case where we left a class open.
            // "[z-a]" is valid, equivalent to "\[z-a\]"
            if (inClass) {
              // split where the last [ was, make sure we don't have
              // an invalid re. if so, re-walk the contents of the
              // would-be class to re-translate any characters that
              // were passed through as-is
              // TODO: It would probably be faster to determine this
              // without a try/catch and a new RegExp, but it's tricky
              // to do safely.  For now, this is safe and works.
              var cs = pattern.substring(classStart + 1, i);
              try {
                RegExp('[' + cs + ']');
              } catch (er) {
                // not a valid class!
                var sp = this.parse(cs, SUBPARSE);
                re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]';
                hasMagic = hasMagic || sp[1];
                inClass = false;
                continue
              }
            }

            // finish up the class.
            hasMagic = true;
            inClass = false;
            re += c;
          continue

          default:
            // swallow any state char that wasn't consumed
            clearStateChar();

            if (escaping) {
              // no need
              escaping = false;
            } else if (reSpecials[c]
              && !(c === '^' && inClass)) {
              re += '\\';
            }

            re += c;

        } // switch
      } // for

      // handle the case where we left a class open.
      // "[abc" is valid, equivalent to "\[abc"
      if (inClass) {
        // split where the last [ was, and escape it
        // this is a huge pita.  We now have to re-walk
        // the contents of the would-be class to re-translate
        // any characters that were passed through as-is
        cs = pattern.substr(classStart + 1);
        sp = this.parse(cs, SUBPARSE);
        re = re.substr(0, reClassStart) + '\\[' + sp[0];
        hasMagic = hasMagic || sp[1];
      }

      // handle the case where we had a +( thing at the *end*
      // of the pattern.
      // each pattern list stack adds 3 chars, and we need to go through
      // and escape any | chars that were passed through as-is for the regexp.
      // Go through and escape them, taking care not to double-escape any
      // | chars that were already escaped.
      for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
        var tail = re.slice(pl.reStart + pl.open.length);
        this.debug('setting tail', re, pl);
        // maybe some even number of \, then maybe 1 \, followed by a |
        tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
          if (!$2) {
            // the | isn't already escaped, so escape it.
            $2 = '\\';
          }

          // need to escape all those slashes *again*, without escaping the
          // one that we need for escaping the | character.  As it works out,
          // escaping an even number of slashes can be done by simply repeating
          // it exactly after itself.  That's why this trick works.
          //
          // I am sorry that you have to see this.
          return $1 + $1 + $2 + '|'
        });

        this.debug('tail=%j\n   %s', tail, tail, pl, re);
        var t = pl.type === '*' ? star
          : pl.type === '?' ? qmark
          : '\\' + pl.type;

        hasMagic = true;
        re = re.slice(0, pl.reStart) + t + '\\(' + tail;
      }

      // handle trailing things that only matter at the very end.
      clearStateChar();
      if (escaping) {
        // trailing \\
        re += '\\\\';
      }

      // only need to apply the nodot start if the re starts with
      // something that could conceivably capture a dot
      var addPatternStart = false;
      switch (re.charAt(0)) {
        case '.':
        case '[':
        case '(': addPatternStart = true;
      }

      // Hack to work around lack of negative lookbehind in JS
      // A pattern like: *.!(x).!(y|z) needs to ensure that a name
      // like 'a.xyz.yz' doesn't match.  So, the first negative
      // lookahead, has to look ALL the way ahead, to the end of
      // the pattern.
      for (var n = negativeLists.length - 1; n > -1; n--) {
        var nl = negativeLists[n];

        var nlBefore = re.slice(0, nl.reStart);
        var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
        var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
        var nlAfter = re.slice(nl.reEnd);

        nlLast += nlAfter;

        // Handle nested stuff like *(*.js|!(*.json)), where open parens
        // mean that we should *not* include the ) in the bit that is considered
        // "after" the negated section.
        var openParensBefore = nlBefore.split('(').length - 1;
        var cleanAfter = nlAfter;
        for (i = 0; i < openParensBefore; i++) {
          cleanAfter = cleanAfter.replace(/\)[+*?]?/, '');
        }
        nlAfter = cleanAfter;

        var dollar = '';
        if (nlAfter === '' && isSub !== SUBPARSE) {
          dollar = '$';
        }
        var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
        re = newRe;
      }

      // if the re is not "" at this point, then we need to make sure
      // it doesn't match against an empty path part.
      // Otherwise a/* will match a/, which it should not.
      if (re !== '' && hasMagic) {
        re = '(?=.)' + re;
      }

      if (addPatternStart) {
        re = patternStart + re;
      }

      // parsing just a piece of a larger pattern.
      if (isSub === SUBPARSE) {
        return [re, hasMagic]
      }

      // skip the regexp for non-magical patterns
      // unescape anything in it, though, so that it'll be
      // an exact match against a file etc.
      if (!hasMagic) {
        return globUnescape(pattern)
      }

      var flags = options.nocase ? 'i' : '';
      try {
        var regExp = new RegExp('^' + re + '$', flags);
      } catch (er) {
        // If it was an invalid regular expression, then it can't match
        // anything.  This trick looks for a character after the end of
        // the string, which is of course impossible, except in multi-line
        // mode, but it's not a /m regex.
        return new RegExp('$.')
      }

      regExp._glob = pattern;
      regExp._src = re;

      return regExp
    }

    minimatch.makeRe = function (pattern, options) {
      return new Minimatch(pattern, options || {}).makeRe()
    };

    Minimatch.prototype.makeRe = makeRe;
    function makeRe () {
      if (this.regexp || this.regexp === false) return this.regexp

      // at this point, this.set is a 2d array of partial
      // pattern strings, or "**".
      //
      // It's better to use .match().  This function shouldn't
      // be used, really, but it's pretty convenient sometimes,
      // when you just want to work with a regex.
      var set = this.set;

      if (!set.length) {
        this.regexp = false;
        return this.regexp
      }
      var options = this.options;

      var twoStar = options.noglobstar ? star
        : options.dot ? twoStarDot
        : twoStarNoDot;
      var flags = options.nocase ? 'i' : '';

      var re = set.map(function (pattern) {
        return pattern.map(function (p) {
          return (p === GLOBSTAR) ? twoStar
          : (typeof p === 'string') ? regExpEscape(p)
          : p._src
        }).join('\\\/')
      }).join('|');

      // must match entire pattern
      // ending in a * or ** will make it less strict.
      re = '^(?:' + re + ')$';

      // can match anything, as long as it's not this.
      if (this.negate) re = '^(?!' + re + ').*$';

      try {
        this.regexp = new RegExp(re, flags);
      } catch (ex) {
        this.regexp = false;
      }
      return this.regexp
    }

    minimatch.match = function (list, pattern, options) {
      options = options || {};
      var mm = new Minimatch(pattern, options);
      list = list.filter(function (f) {
        return mm.match(f)
      });
      if (mm.options.nonull && !list.length) {
        list.push(pattern);
      }
      return list
    };

    Minimatch.prototype.match = match;
    function match (f, partial) {
      this.debug('match', f, this.pattern);
      // short-circuit in the case of busted things.
      // comments, etc.
      if (this.comment) return false
      if (this.empty) return f === ''

      if (f === '/' && partial) return true

      var options = this.options;

      // windows: need to use /, not \
      if (path.sep !== '/') {
        f = f.split(path.sep).join('/');
      }

      // treat the test path as a set of pathparts.
      f = f.split(slashSplit);
      this.debug(this.pattern, 'split', f);

      // just ONE of the pattern sets in this.set needs to match
      // in order for it to be valid.  If negating, then just one
      // match means that we have failed.
      // Either way, return on the first hit.

      var set = this.set;
      this.debug(this.pattern, 'set', set);

      // Find the basename of the path by looking for the last non-empty segment
      var filename;
      var i;
      for (i = f.length - 1; i >= 0; i--) {
        filename = f[i];
        if (filename) break
      }

      for (i = 0; i < set.length; i++) {
        var pattern = set[i];
        var file = f;
        if (options.matchBase && pattern.length === 1) {
          file = [filename];
        }
        var hit = this.matchOne(file, pattern, partial);
        if (hit) {
          if (options.flipNegate) return true
          return !this.negate
        }
      }

      // didn't get any hits.  this is success if it's a negative
      // pattern, failure otherwise.
      if (options.flipNegate) return false
      return this.negate
    }

    // set partial to true to test if, for example,
    // "/a/b" matches the start of "/*/b/*/d"
    // Partial means, if you run out of file before you run
    // out of pattern, then that's fine, as long as all
    // the parts match.
    Minimatch.prototype.matchOne = function (file, pattern, partial) {
      var options = this.options;

      this.debug('matchOne',
        { 'this': this, file: file, pattern: pattern });

      this.debug('matchOne', file.length, pattern.length);

      for (var fi = 0,
          pi = 0,
          fl = file.length,
          pl = pattern.length
          ; (fi < fl) && (pi < pl)
          ; fi++, pi++) {
        this.debug('matchOne loop');
        var p = pattern[pi];
        var f = file[fi];

        this.debug(pattern, p, f);

        // should be impossible.
        // some invalid regexp stuff in the set.
        if (p === false) return false

        if (p === GLOBSTAR) {
          this.debug('GLOBSTAR', [pattern, p, f]);

          // "**"
          // a/**/b/**/c would match the following:
          // a/b/x/y/z/c
          // a/x/y/z/b/c
          // a/b/x/b/x/c
          // a/b/c
          // To do this, take the rest of the pattern after
          // the **, and see if it would match the file remainder.
          // If so, return success.
          // If not, the ** "swallows" a segment, and try again.
          // This is recursively awful.
          //
          // a/**/b/**/c matching a/b/x/y/z/c
          // - a matches a
          // - doublestar
          //   - matchOne(b/x/y/z/c, b/**/c)
          //     - b matches b
          //     - doublestar
          //       - matchOne(x/y/z/c, c) -> no
          //       - matchOne(y/z/c, c) -> no
          //       - matchOne(z/c, c) -> no
          //       - matchOne(c, c) yes, hit
          var fr = fi;
          var pr = pi + 1;
          if (pr === pl) {
            this.debug('** at the end');
            // a ** at the end will just swallow the rest.
            // We have found a match.
            // however, it will not swallow /.x, unless
            // options.dot is set.
            // . and .. are *never* matched by **, for explosively
            // exponential reasons.
            for (; fi < fl; fi++) {
              if (file[fi] === '.' || file[fi] === '..' ||
                (!options.dot && file[fi].charAt(0) === '.')) return false
            }
            return true
          }

          // ok, let's see if we can swallow whatever we can.
          while (fr < fl) {
            var swallowee = file[fr];

            this.debug('\nglobstar while', file, fr, pattern, pr, swallowee);

            // XXX remove this slice.  Just pass the start index.
            if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
              this.debug('globstar found match!', fr, fl, swallowee);
              // found a match.
              return true
            } else {
              // can't swallow "." or ".." ever.
              // can only swallow ".foo" when explicitly asked.
              if (swallowee === '.' || swallowee === '..' ||
                (!options.dot && swallowee.charAt(0) === '.')) {
                this.debug('dot detected!', file, fr, pattern, pr);
                break
              }

              // ** swallows a segment, and continue.
              this.debug('globstar swallow a segment, and continue');
              fr++;
            }
          }

          // no match was found.
          // However, in partial mode, we can't say this is necessarily over.
          // If there's more *pattern* left, then
          if (partial) {
            // ran out of file
            this.debug('\n>>> no match, partial?', file, fr, pattern, pr);
            if (fr === fl) return true
          }
          return false
        }

        // something other than **
        // non-magic patterns just have to match exactly
        // patterns with magic have been turned into regexps.
        var hit;
        if (typeof p === 'string') {
          if (options.nocase) {
            hit = f.toLowerCase() === p.toLowerCase();
          } else {
            hit = f === p;
          }
          this.debug('string match', p, f, hit);
        } else {
          hit = f.match(p);
          this.debug('pattern match', p, f, hit);
        }

        if (!hit) return false
      }

      // Note: ending in / means that we'll get a final ""
      // at the end of the pattern.  This can only match a
      // corresponding "" at the end of the file.
      // If the file ends in /, then it can only match a
      // a pattern that ends in /, unless the pattern just
      // doesn't have any more for it. But, a/b/ should *not*
      // match "a/b/*", even though "" matches against the
      // [^/]*? pattern, except in partial mode, where it might
      // simply not be reached yet.
      // However, a/b/ should still satisfy a/*

      // now either we fell off the end of the pattern, or we're done.
      if (fi === fl && pi === pl) {
        // ran out of pattern and filename at the same time.
        // an exact hit!
        return true
      } else if (fi === fl) {
        // ran out of file, but still had pattern left.
        // this is ok if we're doing the match as part of
        // a glob fs traversal.
        return partial
      } else if (pi === pl) {
        // ran out of pattern, still have file left.
        // this is only acceptable if we're on the very last
        // empty segment of a file with a trailing slash.
        // a/* should match a/b/
        var emptyFileEnd = (fi === fl - 1) && (file[fi] === '');
        return emptyFileEnd
      }

      // should be unreachable.
      throw new Error('wtf?')
    };

    // replace stuff like \* with *
    function globUnescape (s) {
      return s.replace(/\\(.)/g, '$1')
    }

    function regExpEscape (s) {
      return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
    }

    var _minimatch = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var minimatch$1 = _minimatch;
    var EventEmitter$4 = EventEmitter;
    var Oauth2Auth = (function (_super) {
        __extends(Oauth2Auth, _super);
        function Oauth2Auth(config, alfrescoApi) {
            var _this = _super.call(this) || this;
            _this.checkAccessToken = true;
            _this.discovery = {};
            _this.authentications = {
                'oauth2': { accessToken: '' }, type: 'oauth2', 'basicAuth': {}
            };
            _this.storage = new Storage();
            _this.storage.setDomainPrefix(config.domainPrefix);
            _this.className = 'Oauth2Auth';
            if (config) {
                _this.setConfig(config, alfrescoApi);
            }
            return _this;
        }
        Oauth2Auth.prototype.setConfig = function (config, alfrescoApi) {
            this.config = config;
            if (this.config.oauth2) {
                if (this.config.oauth2.host === undefined || this.config.oauth2.host === null) {
                    throw 'Missing the required oauth2 host parameter';
                }
                if (this.config.oauth2.clientId === undefined || this.config.oauth2.clientId === null) {
                    throw 'Missing the required oauth2 clientId parameter';
                }
                if (this.config.oauth2.scope === undefined || this.config.oauth2.scope === null) {
                    throw 'Missing the required oauth2 scope parameter';
                }
                if (this.config.oauth2.secret === undefined || this.config.oauth2.secret === null) {
                    this.config.oauth2.secret = '';
                }
                if ((this.config.oauth2.redirectUri === undefined || this.config.oauth2.redirectUri === null) && this.config.oauth2.implicitFlow) {
                    throw 'Missing redirectUri required parameter';
                }
                if (!this.config.oauth2.refreshTokenTimeout) {
                    this.config.oauth2.refreshTokenTimeout = 30000;
                }
                if (!this.config.oauth2.redirectSilentIframeUri) {
                    var context_1 = '';
                    if (typeof window !== 'undefined') {
                        context_1 = window.location.origin;
                    }
                    this.config.oauth2.redirectSilentIframeUri = context_1 + '/assets/silent-refresh.html';
                }
                this.basePath = this.config.oauth2.host;
                this.host = this.config.oauth2.host;
                this.discoveryUrls();
                if (this.hasContentProvider()) {
                    this.exchangeTicketListener(alfrescoApi);
                }
                this.initOauth();
            }
        };
        Oauth2Auth.prototype.initOauth = function () {
            return __awaiter(this, void 0, void 0, function () {
                var accessToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.config.oauth2.implicitFlow && this.isValidAccessToken()) {
                                accessToken = this.storage.getItem('access_token');
                                this.setToken(accessToken, null);
                            }
                            if (!this.config.oauth2.implicitFlow) return [3, 2];
                            return [4, this.checkFragment()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2];
                    }
                });
            });
        };
        Oauth2Auth.prototype.discoveryUrls = function () {
            this.discovery.loginUrl = this.host + "/protocol/openid-connect/auth";
            this.discovery.logoutUrl = this.host + "/protocol/openid-connect/logout";
            this.discovery.tokenEndpoint = this.host + "/protocol/openid-connect/token";
        };
        Oauth2Auth.prototype.hasContentProvider = function () {
            return this.config.provider === 'ECM' || this.config.provider === 'ALL';
        };
        Oauth2Auth.prototype.checkFragment = function (externalHash) {
            this.hashFragmentParams = this.getHashFragmentParams(externalHash);
            if (externalHash === undefined && this.isValidAccessToken()) {
                var accessToken = this.storage.getItem('access_token');
                this.setToken(accessToken, null);
                this.silentRefresh();
                return accessToken;
            }
            if (this.hashFragmentParams) {
                var accessToken = this.hashFragmentParams.access_token;
                var idToken = this.hashFragmentParams.id_token;
                var sessionState = this.hashFragmentParams.session_state;
                var expiresIn = this.hashFragmentParams.expires_in;
                if (!sessionState) {
                    throw ('session state not present');
                }
                var jwt = this.processJWTToken(idToken);
                try {
                    if (jwt) {
                        this.storeIdToken(idToken, jwt.payload.exp);
                        this.storeAccessToken(accessToken, expiresIn);
                        this.authentications.basicAuth.username = jwt.payload.preferred_username;
                        this.saveUsername(jwt.payload.preferred_username);
                        this.silentRefresh();
                        return accessToken;
                    }
                }
                catch (error) {
                    throw ('Validation JWT error' + error);
                }
            }
            else {
                if (this.config.oauth2.silentLogin && !this.isPublicUrl()) {
                    this.implicitLogin();
                }
            }
        };
        Oauth2Auth.prototype.isPublicUrl = function () {
            var publicUrls = this.config.oauth2.publicUrls || [];
            if (Array.isArray(publicUrls)) {
                return publicUrls.length &&
                    publicUrls.some(function (urlPattern) { return minimatch$1(window.location.href, urlPattern); });
            }
            return false;
        };
        Oauth2Auth.prototype.padBase64 = function (base64data) {
            while (base64data.length % 4 !== 0) {
                base64data += '=';
            }
            return base64data;
        };
        Oauth2Auth.prototype.processJWTToken = function (jwt) {
            if (jwt) {
                var jwtArray = jwt.split('.');
                var headerBase64 = this.padBase64(jwtArray[0]);
                var headerJson = this.b64DecodeUnicode(headerBase64);
                var header = JSON.parse(headerJson);
                var payloadBase64 = this.padBase64(jwtArray[1]);
                var payloadJson = this.b64DecodeUnicode(payloadBase64);
                var payload = JSON.parse(payloadJson);
                var savedNonce = this.storage.getItem('nonce');
                if (!payload.sub) {
                    throw ('Missing sub in JWT');
                }
                if (payload.nonce !== savedNonce) {
                    throw ('Failing nonce JWT is not corrisponding' + payload.nonce);
                }
                return {
                    idToken: jwt,
                    payload: payload,
                    header: header
                };
            }
        };
        Oauth2Auth.prototype.b64DecodeUnicode = function (b64string) {
            var base64 = b64string.replace(/\-/g, '+').replace(/\_/g, '/');
            return decodeURIComponent(atob(base64)
                .split('')
                .map(function (c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            })
                .join(''));
        };
        Oauth2Auth.prototype.storeIdToken = function (idToken, exp) {
            this.storage.setItem('id_token', idToken);
            this.storage.setItem('id_token_expires_at', Number(exp * 1000).toString());
            this.storage.setItem('id_token_stored_at', Date.now().toString());
        };
        Oauth2Auth.prototype.storeAccessToken = function (accessToken, expiresIn, refreshToken) {
            this.storage.setItem('access_token', accessToken);
            var expiresInMilliSeconds = expiresIn * 1000;
            var now = new Date();
            var expiresAt = now.getTime() + expiresInMilliSeconds;
            this.storage.setItem('access_token_expires_in', expiresAt);
            this.storage.setItem('access_token_stored_at', Date.now().toString());
            this.setToken(accessToken, refreshToken);
        };
        Oauth2Auth.prototype.saveUsername = function (username) {
            if (this.storage.supportsStorage()) {
                this.storage.setItem('USERNAME', username);
            }
        };
        Oauth2Auth.prototype.implicitLogin = function () {
            if (!this.isValidToken() || !this.isValidAccessToken()) {
                this.redirectLogin();
            }
            else {
                var accessToken = this.storage.getItem('access_token');
                this.setToken(accessToken, null);
            }
        };
        Oauth2Auth.prototype.isValidToken = function () {
            var validToken = false;
            if (this.getIdToken()) {
                var expiresAt = this.storage.getItem('id_token_expires_at'), now = new Date();
                if (expiresAt && parseInt(expiresAt, 10) >= now.getTime()) {
                    validToken = true;
                }
            }
            return validToken;
        };
        Oauth2Auth.prototype.isValidAccessToken = function () {
            var validAccessToken = false;
            if (this.getAccessToken()) {
                var expiresAt = this.storage.getItem('access_token_expires_in');
                var now = new Date();
                if (expiresAt && parseInt(expiresAt, 10) >= now.getTime()) {
                    validAccessToken = true;
                }
            }
            return validAccessToken;
        };
        Oauth2Auth.prototype.getIdToken = function () {
            return this.storage.getItem('id_token');
        };
        Oauth2Auth.prototype.getAccessToken = function () {
            return this.storage.getItem('access_token');
        };
        Oauth2Auth.prototype.redirectLogin = function () {
            if (this.config.oauth2.implicitFlow && typeof window !== 'undefined') {
                var href = this.composeImplicitLoginUrl();
                window.location.href = href;
                this.emit('implicit_redirect', href);
            }
        };
        Oauth2Auth.prototype.genNonce = function () {
            var text = '';
            var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            for (var i = 0; i < 40; i++) {
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            }
            return text;
        };
        Oauth2Auth.prototype.composeImplicitLoginUrl = function () {
            var nonce = this.genNonce();
            this.storage.setItem('nonce', nonce);
            var separation = this.discovery.loginUrl.indexOf('?') > -1 ? '&' : '?';
            return this.discovery.loginUrl +
                separation +
                'client_id=' +
                encodeURIComponent(this.config.oauth2.clientId) +
                '&redirect_uri=' +
                encodeURIComponent(this.config.oauth2.redirectUri) +
                '&scope=' +
                encodeURIComponent(this.config.oauth2.scope) +
                '&response_type=' +
                encodeURIComponent('id_token token') +
                '&nonce=' +
                encodeURIComponent(nonce);
        };
        Oauth2Auth.prototype.composeIframeLoginUrl = function () {
            var nonce = this.genNonce();
            this.storage.setItem('nonce', nonce);
            var separation = this.discovery.loginUrl.indexOf('?') > -1 ? '&' : '?';
            return this.discovery.loginUrl +
                separation +
                'client_id=' +
                encodeURIComponent(this.config.oauth2.clientId) +
                '&redirect_uri=' +
                encodeURIComponent(this.config.oauth2.redirectSilentIframeUri) +
                '&scope=' +
                encodeURIComponent(this.config.oauth2.scope) +
                '&response_type=' +
                encodeURIComponent('id_token token') +
                '&nonce=' +
                encodeURIComponent(nonce) +
                '&prompt=none';
        };
        Oauth2Auth.prototype.hasHashCharacter = function (hash) {
            return hash.indexOf('#') === 0;
        };
        Oauth2Auth.prototype.startWithHashRoute = function (hash) {
            return hash.startsWith('#/');
        };
        Oauth2Auth.prototype.getHashFragmentParams = function (externalHash) {
            var hashFragmentParams = null;
            if (typeof window !== 'undefined') {
                var hash = void 0;
                if (!externalHash) {
                    hash = decodeURIComponent(window.location.hash);
                    if (!this.startWithHashRoute(hash)) {
                        window.location.hash = '';
                    }
                }
                else {
                    hash = decodeURIComponent(externalHash);
                    this.removeHashFromSilentIframe();
                    this.destroyIframe();
                }
                if (this.hasHashCharacter(hash) && !this.startWithHashRoute(hash)) {
                    var questionMarkPosition = hash.indexOf('?');
                    if (questionMarkPosition > -1) {
                        hash = hash.substr(questionMarkPosition + 1);
                    }
                    else {
                        hash = hash.substr(1);
                    }
                    hashFragmentParams = this.parseQueryString(hash);
                }
            }
            return hashFragmentParams;
        };
        Oauth2Auth.prototype.parseQueryString = function (queryString) {
            var data = {};
            var pairs, pair, separatorIndex, escapedKey, escapedValue, key, value;
            if (queryString !== null) {
                pairs = queryString.split('&');
                for (var i = 0; i < pairs.length; i++) {
                    pair = pairs[i];
                    separatorIndex = pair.indexOf('=');
                    if (separatorIndex === -1) {
                        escapedKey = pair;
                        escapedValue = null;
                    }
                    else {
                        escapedKey = pair.substr(0, separatorIndex);
                        escapedValue = pair.substr(separatorIndex + 1);
                    }
                    key = decodeURIComponent(escapedKey);
                    value = decodeURIComponent(escapedValue);
                    if (key.substr(0, 1) === '/') {
                        key = key.substr(1);
                    }
                    data[key] = value;
                }
            }
            return data;
        };
        Oauth2Auth.prototype.silentRefresh = function () {
            var _this = this;
            if (typeof document === 'undefined') {
                return;
            }
            if (this.checkAccessToken) {
                this.destroyIframe();
                this.createIframe();
                this.checkAccessToken = false;
                return;
            }
            this.iFrameTimeOut = setTimeout(function () {
                _this.destroyIframe();
                _this.createIframe();
            }, this.config.oauth2.refreshTokenTimeout);
        };
        Oauth2Auth.prototype.removeHashFromSilentIframe = function () {
            var iframe = document.getElementById('silent_refresh_token_iframe');
            if (iframe && iframe.contentWindow.location.hash) {
                iframe.contentWindow.location.hash = '';
            }
        };
        Oauth2Auth.prototype.createIframe = function () {
            var _this = this;
            var iframe = document.createElement('iframe');
            iframe.id = 'silent_refresh_token_iframe';
            var loginUrl = this.composeIframeLoginUrl();
            iframe.setAttribute('src', loginUrl);
            iframe.style.display = 'none';
            document.body.appendChild(iframe);
            this.iFrameHashListener = function () {
                var silentRefreshTokenIframe = document.getElementById('silent_refresh_token_iframe');
                var hash = silentRefreshTokenIframe.contentWindow.location.hash;
                try {
                    _this.checkFragment(hash);
                }
                catch (e) {
                    _this.logOut();
                }
            };
            iframe.addEventListener('load', this.iFrameHashListener);
        };
        Oauth2Auth.prototype.destroyIframe = function () {
            var iframe = document.getElementById('silent_refresh_token_iframe');
            if (iframe) {
                iframe.removeEventListener('load', this.iFrameHashListener);
                document.body.removeChild(iframe);
            }
        };
        Oauth2Auth.prototype.login = function (username, password) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.grantPasswordLogin(username, password, resolve, reject);
            });
        };
        Oauth2Auth.prototype.grantPasswordLogin = function (username, password, resolve, reject) {
            var _this = this;
            var postBody = {}, pathParams = {}, queryParams = {};
            var headerParams = {
                'Content-Type': 'application/x-www-form-urlencoded'
            };
            var formParams = {
                username: username,
                password: password,
                grant_type: 'password',
                client_id: this.config.oauth2.clientId
            };
            var contentTypes = ['application/x-www-form-urlencoded'];
            var accepts = ['application/json'];
            var promise = this.callCustomApi(this.discovery.tokenEndpoint, 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts).then(function (data) {
                _this.saveUsername(username);
                _this.storeAccessToken(data.access_token, data.expires_in, data.refresh_token);
                _this.silentRefresh();
                resolve(data);
            }, function (error) {
                if (error.error && error.error.status === 401) {
                    _this.emit('unauthorized');
                }
                _this.emit('error');
                reject(error.error);
            });
            EventEmitter$4(promise);
        };
        Oauth2Auth.prototype.refreshToken = function () {
            var _this = this;
            var postBody = {}, pathParams = {}, queryParams = {}, formParams = {};
            var auth = 'Basic ' + btoa(this.config.oauth2.clientId + ':' + this.config.oauth2.secret);
            var headerParams = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Cache-Control': 'no-cache',
                'Authorization': auth
            };
            queryParams = {
                refresh_token: this.authentications.oauth2.refreshToken,
                grant_type: 'refresh_token'
            };
            var contentTypes = ['application/x-www-form-urlencoded'];
            var accepts = ['application/json'];
            var promise = new Promise(function (resolve, reject) {
                _this.callCustomApi(_this.discovery.tokenEndpoint, 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts).then(function (data) {
                    _this.setToken(data.access_token, data.refresh_token);
                    resolve(data);
                }, function (error) {
                    if (error.error.status === 401) {
                        _this.emit('unauthorized');
                    }
                    _this.emit('error');
                    reject(error.error);
                });
            });
            EventEmitter$4(promise);
            return promise;
        };
        Oauth2Auth.prototype.setToken = function (token, refreshToken) {
            this.authentications.oauth2.accessToken = token;
            this.authentications.oauth2.refreshToken = refreshToken;
            this.authentications.basicAuth.password = null;
            this.token = token;
            this.emit('token_issued');
        };
        Oauth2Auth.prototype.getToken = function () {
            return this.token;
        };
        Oauth2Auth.prototype.getAuthentication = function () {
            return this.authentications;
        };
        Oauth2Auth.prototype.changeHost = function (host) {
            this.config.hostOauth2 = host;
        };
        Oauth2Auth.prototype.isLoggedIn = function () {
            return !!this.authentications.oauth2.accessToken;
        };
        Oauth2Auth.prototype.logOut = function () {
            return __awaiter(this, void 0, void 0, function () {
                var id_token, separation, redirectLogout, logoutUrl;
                return __generator(this, function (_a) {
                    this.checkAccessToken = true;
                    clearTimeout(this.iFrameTimeOut);
                    id_token = this.getIdToken();
                    this.invalidateSession();
                    this.setToken(null, null);
                    separation = this.discovery.logoutUrl.indexOf('?') > -1 ? '&' : '?';
                    redirectLogout = this.config.oauth2.redirectUriLogout || this.config.oauth2.redirectUri;
                    logoutUrl = this.discovery.logoutUrl +
                        separation +
                        'post_logout_redirect_uri=' +
                        encodeURIComponent(redirectLogout) +
                        '&id_token_hint=' +
                        encodeURIComponent(id_token);
                    if (id_token != null && this.config.oauth2.implicitFlow && typeof window !== 'undefined') {
                        window.location.href = logoutUrl;
                    }
                    return [2];
                });
            });
        };
        Oauth2Auth.prototype.invalidateSession = function () {
            this.storage.removeItem('access_token');
            this.storage.removeItem('access_token_expires_in');
            this.storage.removeItem('access_token_stored_at');
            this.storage.removeItem('id_token');
            this.storage.removeItem('id_token');
            this.storage.removeItem('id_token_claims_obj');
            this.storage.removeItem('id_token_expires_at');
            this.storage.removeItem('id_token_stored_at');
            this.storage.removeItem('nonce');
        };
        Oauth2Auth.prototype.exchangeTicketListener = function (alfrescoApi) {
            var _this = this;
            this.once('token_issued', function () { return __awaiter(_this, void 0, void 0, function () {
                var authContentApi, ticketEntry;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            authContentApi = new AuthenticationApi(alfrescoApi);
                            authContentApi.apiClient.authentications = this.authentications;
                            return [4, authContentApi.getTicket()];
                        case 1:
                            ticketEntry = _a.sent();
                            this.config.ticketEcm = ticketEntry.entry.id;
                            this.emit('ticket_exchanged');
                            return [2];
                    }
                });
            }); });
        };
        return Oauth2Auth;
    }(AlfrescoApiClient));
    //# sourceMappingURL=oauth2Auth.js.map

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AlfrescoApiConfig = (function () {
        function AlfrescoApiConfig(input) {
            this.hostEcm = 'http://127.0.0.1:8080';
            this.hostBpm = 'http://127.0.0.1:9999';
            this.authType = 'BASIC';
            this.contextRoot = 'alfresco';
            this.contextRootBpm = 'activiti-app';
            this.domainPrefix = '';
            this.provider = 'ECM';
            this.disableCsrf = false;
            this.withCredentials = false;
            Object.assign(this, input);
            this.hostEcm = input.hostEcm ? input.hostEcm : 'http://127.0.0.1:8080';
            this.hostBpm = input.hostBpm ? input.hostBpm : 'http://127.0.0.1:9999';
            this.authType = input.authType ? input.authType : 'BASIC';
            this.contextRoot = input.contextRoot ? input.contextRoot : 'alfresco';
            this.contextRootBpm = input.contextRootBpm ? input.contextRootBpm : 'activiti-app';
            this.provider = input.provider ? input.provider : 'ECM';
            this.disableCsrf = input.disableCsrf ? input.disableCsrf : false;
            this.domainPrefix = input.domainPrefix ? input.domainPrefix : '';
            this.withCredentials = input.withCredentials ? input.withCredentials : false;
            this.oauth2 = input.oauth2;
        }
        return AlfrescoApiConfig;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Emitter = EventEmitter;
    var AlfrescoApi = (function () {
        function AlfrescoApi(config) {
            Emitter(this);
            if (config) {
                this.setConfig(config);
            }
        }
        AlfrescoApi.prototype.setConfig = function (config) {
            if (!config) {
                config = {};
            }
            this.storage = new Storage();
            this.storage.setDomainPrefix(config.domainPrefix);
            this.config = new AlfrescoApiConfig(config);
            this.clientsFactory();
            this.processClient = new ProcessClient(this.config);
            this.errorListeners();
            if (this.isOauthConfiguration()) {
                if (!this.oauth2Auth) {
                    this.oauth2Auth = new Oauth2Auth(this.config, this);
                }
                else {
                    this.oauth2Auth.setConfig(this.config, this);
                }
                this.setAuthenticationClientECMBPM(this.oauth2Auth.getAuthentication(), this.oauth2Auth.getAuthentication());
            }
            else {
                if (!this.processAuth) {
                    this.processAuth = new ProcessAuth(this.config);
                }
                else {
                    this.processAuth.setConfig(this.config);
                }
                if (!this.contentAuth) {
                    this.contentAuth = new ContentAuth(this.config, this);
                }
                else {
                    this.contentAuth.setConfig(config);
                }
                this.setAuthenticationClientECMBPM(this.contentAuth.getAuthentication(), this.processAuth.getAuthentication());
            }
            return config;
        };
        AlfrescoApi.prototype.clientsFactory = function () {
            if (!this.contentPrivateClient) {
                this.contentPrivateClient = new ContentClient(this.config, '/api/-default-/private/alfresco/versions/1');
            }
            else {
                this.contentPrivateClient.setConfig(this.config, '/api/-default-/private/alfresco/versions/1');
            }
            if (!this.contentClient) {
                this.contentClient = new ContentClient(this.config, '/api/-default-/public/alfresco/versions/1');
            }
            else {
                this.contentClient.setConfig(this.config, '/api/-default-/public/alfresco/versions/1');
            }
            if (!this.authClient) {
                this.authClient = new ContentClient(this.config, '/api/-default-/public/authentication/versions/1');
            }
            else {
                this.authClient.setConfig(this.config, '/api/-default-/public/authentication/versions/1');
            }
            if (!this.searchClient) {
                this.searchClient = new ContentClient(this.config, '/api/-default-/public/search/versions/1');
            }
            else {
                this.searchClient.setConfig(this.config, '/api/-default-/public/search/versions/1');
            }
            if (!this.discoveryClient) {
                this.discoveryClient = new ContentClient(this.config, '/api');
            }
            else {
                this.discoveryClient.setConfig(this.config, '/api');
            }
            if (!this.gsClient) {
                this.gsClient = new ContentClient(this.config, '/api/-default-/public/gs/versions/1');
            }
            else {
                this.gsClient.setConfig(this.config, '/api/-default-/public/gs/versions/1');
            }
            if (!this.processClient) {
                this.processClient = new ProcessClient(this.config);
            }
            else {
                this.processClient.setConfig(this.config);
            }
        };
        AlfrescoApi.prototype.errorListeners = function () {
            var _this = this;
            this.contentClient.off('error', function () {
            });
            this.authClient.off('error', function () {
            });
            this.contentPrivateClient.off('error', function () {
            });
            this.processClient.off('error', function () {
            });
            this.searchClient.off('error', function () {
            });
            this.discoveryClient.off('error', function () {
            });
            this.gsClient.off('error', function () {
            });
            this.contentClient.on('error', function (error) {
                _this.errorHandler(error);
            });
            this.authClient.on('error', function (error) {
                _this.errorHandler(error);
            });
            this.contentPrivateClient.on('error', function (error) {
                _this.errorHandler(error);
            });
            this.processClient.on('error', function (error) {
                _this.errorHandler(error);
            });
            this.searchClient.on('error', function (error) {
                _this.errorHandler(error);
            });
            this.discoveryClient.on('error', function (error) {
                _this.errorHandler(error);
            });
            this.gsClient.on('error', function (error) {
                _this.errorHandler(error);
            });
        };
        AlfrescoApi.prototype.errorHandler = function (error) {
            if (error.status === 401) {
                this.invalidateSession();
            }
            this.emit('error', error);
        };
        AlfrescoApi.prototype.changeWithCredentialsConfig = function (withCredentials) {
            this.config.withCredentials = withCredentials;
        };
        AlfrescoApi.prototype.changeCsrfConfig = function (disableCsrf) {
            this.config.disableCsrf = disableCsrf;
            this.processAuth.changeCsrfConfig(disableCsrf);
        };
        AlfrescoApi.prototype.changeEcmHost = function (hostEcm) {
            this.config.hostEcm = hostEcm;
            this.contentAuth.changeHost();
            this.contentClient.changeHost();
            this.authClient.changeHost();
        };
        AlfrescoApi.prototype.changeBpmHost = function (hostBpm) {
            this.config.hostBpm = hostBpm;
            this.processAuth.changeHost();
            this.processClient.changeHost();
        };
        AlfrescoApi.prototype.login = function (username, password) {
            var _this = this;
            if (username) {
                username = username.trim();
            }
            if (this.isOauthConfiguration()) {
                var oauth2AuthPromise = void 0;
                oauth2AuthPromise = this.oauth2Auth.login(username, password);
                oauth2AuthPromise.then(function (accessToken) {
                    _this.config.accessToken = accessToken;
                }, function () {
                    console.log('login OAUTH error');
                });
                return oauth2AuthPromise;
            }
            else {
                if (this.isBpmConfiguration()) {
                    var processPromise = this.processAuth.login(username, password);
                    processPromise.then(function (ticketBpm) {
                        _this.config.ticketBpm = ticketBpm;
                    }, function () {
                        console.log('login BPM error');
                    });
                    return processPromise;
                }
                else if (this.isEcmConfiguration()) {
                    var contentPromise = this.contentAuth.login(username, password);
                    contentPromise.then(function (ticketEcm) {
                        _this.setAuthenticationClientECMBPM(_this.contentAuth.getAuthentication(), null);
                        _this.config.ticketEcm = ticketEcm;
                    }, function () {
                        console.log('login ECM error');
                    });
                    return contentPromise;
                }
                else if (this.isEcmBpmConfiguration()) {
                    var contentProcessPromise = this._loginBPMECM(username, password);
                    contentProcessPromise.then(function (data) {
                        _this.config.ticketEcm = data[0];
                        _this.config.ticketBpm = data[1];
                    });
                    return contentProcessPromise;
                }
                else {
                    return Promise.reject('Unknown configuration');
                }
            }
        };
        AlfrescoApi.prototype.implicitLogin = function () {
            var _this = this;
            if (!this.isOauthConfiguration()) {
                return Promise.reject('Missing the required oauth2 configuration');
            }
            return new Promise(function () {
                _this.oauth2Auth.implicitLogin();
            });
        };
        AlfrescoApi.prototype.setAuthenticationClientECMBPM = function (authECM, authBPM) {
            this.contentClient.setAuthentications(authECM);
            this.authClient.setAuthentications(authECM);
            this.searchClient.setAuthentications(authECM);
            this.contentPrivateClient.setAuthentications(authECM);
            this.processClient.setAuthentications(authBPM);
            this.searchClient.setAuthentications(authECM);
            this.discoveryClient.setAuthentications(authECM);
            this.gsClient.setAuthentications(authECM);
        };
        AlfrescoApi.prototype.loginTicket = function (ticketEcm, ticketBpm) {
            this.config.ticketEcm = ticketEcm;
            this.config.ticketBpm = ticketBpm;
            return this.contentAuth.validateTicket();
        };
        AlfrescoApi.prototype._loginBPMECM = function (username, password) {
            var _this = this;
            var contentPromise = this.contentAuth.login(username, password);
            var processPromise = this.processAuth.login(username, password);
            var promise = new Promise(function (resolve, reject) {
                Promise.all([contentPromise, processPromise]).then(function (data) {
                    promise.emit('success');
                    resolve(data);
                }, function (error) {
                    _this.contentAuth.invalidateSession();
                    _this.processAuth.invalidateSession();
                    if (error.status === 401) {
                        promise.emit('unauthorized');
                    }
                    promise.emit('error');
                    reject(error);
                });
            });
            Emitter(promise);
            return promise;
        };
        AlfrescoApi.prototype.logout = function () {
            var _this = this;
            if (this.isOauthConfiguration()) {
                return this.oauth2Auth.logOut();
            }
            else {
                if (this.isBpmConfiguration()) {
                    return this.processAuth.logout();
                }
                else if (this.isEcmConfiguration()) {
                    var contentPromise = this.contentAuth.logout();
                    contentPromise.then(function () { return _this.config.ticket = undefined; }, function () {
                    });
                    return contentPromise;
                }
                else if (this.isEcmBpmConfiguration()) {
                    return this._logoutBPMECM();
                }
                return Promise.resolve();
            }
        };
        AlfrescoApi.prototype._logoutBPMECM = function () {
            var _this = this;
            var contentPromise = this.contentAuth.logout();
            var processPromise = this.processAuth.logout();
            var promise = new Promise(function (resolve, reject) {
                Promise.all([contentPromise, processPromise]).then(function () {
                    _this.config.ticket = undefined;
                    promise.emit('logout');
                    resolve('logout');
                }, function (error) {
                    if (error.status === 401) {
                        promise.emit('unauthorized');
                    }
                    promise.emit('error');
                    reject(error);
                });
            });
            Emitter(promise);
            return promise;
        };
        AlfrescoApi.prototype.isLoggedIn = function () {
            if (this.isOauthConfiguration()) {
                return this.oauth2Auth.isLoggedIn();
            }
            else {
                if (this.isBpmConfiguration()) {
                    return this.processAuth.isLoggedIn();
                }
                else if (this.isEcmConfiguration()) {
                    return this.contentAuth.isLoggedIn();
                }
                else if (this.isEcmBpmConfiguration()) {
                    return this.contentAuth.isLoggedIn() && this.processAuth.isLoggedIn();
                }
                else {
                    return false;
                }
            }
        };
        AlfrescoApi.prototype.isBpmLoggedIn = function () {
            if (this.isBpmConfiguration() || this.isEcmBpmConfiguration()) {
                if (this.isOauthConfiguration()) {
                    return this.oauth2Auth.isLoggedIn();
                }
                else {
                    return this.processAuth.isLoggedIn();
                }
            }
            return false;
        };
        AlfrescoApi.prototype.isEcmLoggedIn = function () {
            if (this.isEcmConfiguration() || this.isEcmBpmConfiguration()) {
                if (this.isOauthConfiguration()) {
                    return this.oauth2Auth.isLoggedIn();
                }
                else {
                    return this.contentAuth.isLoggedIn();
                }
            }
            return false;
        };
        AlfrescoApi.prototype.getBpmUsername = function () {
            if (this.isOauthConfiguration()) {
                return this.oauth2Auth.storage.getItem('USERNAME');
            }
            else {
                return this.processAuth.storage.getItem('APS_USERNAME');
            }
        };
        AlfrescoApi.prototype.getEcmUsername = function () {
            if (this.isOauthConfiguration()) {
                return this.oauth2Auth.storage.getItem('USERNAME');
            }
            else {
                return this.contentAuth.storage.getItem('ACS_USERNAME');
            }
        };
        AlfrescoApi.prototype.refreshToken = function () {
            if (!this.isOauthConfiguration()) {
                return Promise.reject('Missing the required oauth2 configuration');
            }
            if (this.config.oauth2.implicitFlow) {
                return Promise.reject('Manual refresh token not possible in implicit flow');
            }
            return this.oauth2Auth.refreshToken();
        };
        AlfrescoApi.prototype.getTicketAuth = function () {
            return this.oauth2Auth && this.oauth2Auth.getToken();
        };
        AlfrescoApi.prototype.setTicket = function (ticketEcm, TicketBpm) {
            if (this.contentAuth) {
                this.contentAuth.setTicket(ticketEcm);
            }
            if (this.processAuth) {
                this.processAuth.setTicket(TicketBpm);
            }
        };
        AlfrescoApi.prototype.invalidateSession = function () {
            if (this.oauth2Auth) {
                this.oauth2Auth.invalidateSession();
            }
            else {
                this.contentAuth.invalidateSession();
                this.processAuth.invalidateSession();
            }
        };
        AlfrescoApi.prototype.getTicketBpm = function () {
            return this.processAuth && this.processAuth.getTicket();
        };
        AlfrescoApi.prototype.getTicketEcm = function () {
            return this.contentAuth && this.contentAuth.getTicket();
        };
        AlfrescoApi.prototype.getTicket = function () {
            return [this.contentAuth.getTicket(), this.processAuth.getTicket()];
        };
        AlfrescoApi.prototype.isBpmConfiguration = function () {
            return this.config.provider && this.config.provider.toUpperCase() === 'BPM';
        };
        AlfrescoApi.prototype.isEcmConfiguration = function () {
            return this.config.provider && this.config.provider.toUpperCase() === 'ECM';
        };
        AlfrescoApi.prototype.isOauthConfiguration = function () {
            return this.config.authType === 'OAUTH';
        };
        AlfrescoApi.prototype.isPublicUrl = function () {
            if (this.isOauthConfiguration()) {
                return this.oauth2Auth.isPublicUrl();
            }
            return false;
        };
        AlfrescoApi.prototype.isEcmBpmConfiguration = function () {
            return this.config.provider && this.config.provider.toUpperCase() === 'ALL';
        };
        return AlfrescoApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AlfrescoApiCompatibility = (function (_super) {
        __extends(AlfrescoApiCompatibility, _super);
        function AlfrescoApiCompatibility(config) {
            var _this = _super.call(this, config) || this;
            _this.core = {};
            _this.activiti = {};
            _this.auth = {};
            _this.search = {};
            _this.gsCore = {};
            _this.gsClassification = {};
            _this.discovery = {};
            _this.initObjects();
            return _this;
        }
        AlfrescoApiCompatibility.prototype.configureJsApi = function (config) {
            this.setConfig(config);
        };
        AlfrescoApiCompatibility.prototype.initObjects = function () {
            this._instantiateOldObjects(CONTENT_LEGACY_APIS, this.core);
            this._instantiateOldObjects(APS_LEGACY_APIS, this.activiti);
            this._instantiateNewObjects(AUTH_APIS, this.auth);
            this._instantiateNewObjects(SEARCH_APIS, this.search);
            this._instantiateNewObjects(DISCOVERY_APIS, this.discovery);
            this._instantiateNewObjects(GS_CORE_APIS, this.gsCore);
            this._instantiateNewObjects(GS_CLASSIFICATION_APIS, this.gsClassification);
            this.nodes = this.node = this.core.nodesApi;
            this.content = new ContentApi(this);
            this.upload = new AlfrescoUpload(this);
            this.webScript = this.core.webscriptApi;
            this.bpmClient = this.processClient;
            this.ecmClient = this.contentClient;
        };
        AlfrescoApiCompatibility.prototype._instantiateOldObjects = function (module, moduleCopy) {
            var _this = this;
            var classArray = Object.keys(module);
            classArray.forEach(function (currentClass) {
                moduleCopy[currentClass] = module[currentClass];
                var obj = _this._stringToObject(currentClass, module);
                var nameObj = _this._lowerFirst(currentClass);
                obj.init(_this);
                moduleCopy[nameObj] = obj;
            });
        };
        AlfrescoApiCompatibility.prototype._stringToObject = function (nameClass, module) {
            try {
                if (typeof module[nameClass] === 'function') {
                    return new module[nameClass]();
                }
            }
            catch (error) {
                console.log(nameClass + '  ' + error);
            }
        };
        AlfrescoApiCompatibility.prototype._instantiateNewObjects = function (module, moduleCopy) {
            var _this = this;
            var classArray = Object.keys(module);
            classArray.forEach(function (currentClass) {
                moduleCopy[currentClass] = module[currentClass];
                var nameObj = _this._lowerFirst(currentClass);
                moduleCopy[nameObj] = new module[currentClass](_this);
            });
        };
        AlfrescoApiCompatibility.prototype._lowerFirst = function (text) {
            return text.charAt(0).toLowerCase() + text.slice(1);
        };
        return AlfrescoApiCompatibility;
    }(AlfrescoApi));
    //# sourceMappingURL=alfrescoApiCompatibility.js.map

    exports.APS_APIS = APS_APIS;
    exports.APS_LEGACY_APIS = APS_LEGACY_APIS;
    exports.AUTH_APIS = AUTH_APIS;
    exports.AboutApi = AboutApi;
    exports.AbstractGroupRepresentation = AbstractGroupRepresentation;
    exports.AbstractUserRepresentation = AbstractUserRepresentation;
    exports.AccountIntegrationApi = AccountIntegrationApi;
    exports.AccountRepresentation = AccountRepresentation;
    exports.ActionBodyExec = ActionBodyExec;
    exports.ActionDefinition = ActionDefinition;
    exports.ActionDefinitionEntry = ActionDefinitionEntry;
    exports.ActionDefinitionList = ActionDefinitionList;
    exports.ActionDefinitionListList = ActionDefinitionListList;
    exports.ActionExecResult = ActionExecResult;
    exports.ActionExecResultEntry = ActionExecResultEntry;
    exports.ActionParameterDefinition = ActionParameterDefinition;
    exports.ActionsApi = ActionsApi;
    exports.ActivitiCommentsApi = ActivitiCommentsApi;
    exports.ActivitiGroupsApi = ActivitiGroupsApi;
    exports.ActivitiesApi = ActivitiesApi;
    exports.Activity = Activity;
    exports.ActivityEntry = ActivityEntry;
    exports.ActivityPaging = ActivityPaging;
    exports.ActivityPagingList = ActivityPagingList;
    exports.AddGroupCapabilitiesRepresentation = AddGroupCapabilitiesRepresentation;
    exports.AdminEndpointsApi = AdminEndpointsApi;
    exports.AdminGroupsApi = AdminGroupsApi;
    exports.AdminTenantsApi = AdminTenantsApi;
    exports.AdminUsersApi = AdminUsersApi;
    exports.AlfrescoApi = AlfrescoApi;
    exports.AlfrescoApiClient = AlfrescoApiClient;
    exports.AlfrescoApiCompatibility = AlfrescoApiCompatibility;
    exports.AlfrescoApiConfig = AlfrescoApiConfig;
    exports.AlfrescoContentRepresentation = AlfrescoContentRepresentation;
    exports.AlfrescoEndpointRepresentation = AlfrescoEndpointRepresentation;
    exports.AlfrescoNetworkRepresenation = AlfrescoNetworkRepresenation;
    exports.AlfrescoSiteRepresenation = AlfrescoSiteRepresenation;
    exports.AlfrescoUpload = AlfrescoUpload;
    exports.AppDefinition = AppDefinition;
    exports.AppDefinitionPublishRepresentation = AppDefinitionPublishRepresentation;
    exports.AppDefinitionRepresentation = AppDefinitionRepresentation;
    exports.AppDefinitionSaveRepresentation = AppDefinitionSaveRepresentation;
    exports.AppDefinitionUpdateResultRepresentation = AppDefinitionUpdateResultRepresentation;
    exports.AppDefinitionsApi = AppDefinitionsApi;
    exports.AppDeploymentRepresentation = AppDeploymentRepresentation;
    exports.AppModelDefinition = AppModelDefinition;
    exports.AssigneeIdentifierRepresentation = AssigneeIdentifierRepresentation;
    exports.AssocChildBody = ChildAssociationBody;
    exports.AssocTargetBody = AssociationBody;
    exports.Association = Association;
    exports.AssociationBody = AssociationBody;
    exports.AssociationEntry = AssociationEntry;
    exports.AssociationInfo = AssociationInfo;
    exports.AuditApi = AuditApi;
    exports.AuditApp = AuditApp;
    exports.AuditAppEntry = AuditAppEntry;
    exports.AuditAppPaging = AuditAppPaging;
    exports.AuditAppPagingList = AuditAppPagingList;
    exports.AuditBodyUpdate = AuditBodyUpdate;
    exports.AuditCalculatedValueRepresentation = AuditCalculatedValueRepresentation;
    exports.AuditDecisionExpressionInfoRepresentation = AuditDecisionExpressionInfoRepresentation;
    exports.AuditDecisionInfoRepresentation = AuditDecisionInfoRepresentation;
    exports.AuditDecisionRuleInfoRepresentation = AuditDecisionRuleInfoRepresentation;
    exports.AuditEntry = AuditEntry;
    exports.AuditEntryEntry = AuditEntryEntry;
    exports.AuditEntryPaging = AuditEntryPaging;
    exports.AuditEntryPagingList = AuditEntryPagingList;
    exports.AuditLogEntryRepresentation = AuditLogEntryRepresentation;
    exports.AuditLogFormDataRepresentation = AuditLogFormDataRepresentation;
    exports.AuthenticationApi = AuthenticationApi;
    exports.BoxContent = BoxContent;
    exports.BoxUserAccountCredentialsRepresentation = BoxUserAccountCredentialsRepresentation;
    exports.BpmClient = ProcessClient;
    exports.BulkUserUpdateRepresentation = BulkUserUpdateRepresentation;
    exports.CONTENT_APIS = CONTENT_APIS;
    exports.CONTENT_LEGACY_APIS = CONTENT_LEGACY_APIS;
    exports.Capabilities = Capabilities;
    exports.ChangePasswordRepresentation = ChangePasswordRepresentation;
    exports.ChecklistOrderRepresentation = ChecklistOrderRepresentation;
    exports.ChecklistsApi = ChecklistsApi;
    exports.ChildAssociation = ChildAssociation;
    exports.ChildAssociationBody = ChildAssociationBody;
    exports.ChildAssociationEntry = ChildAssociationEntry;
    exports.ChildAssociationInfo = ChildAssociationInfo;
    exports.ClassDescription = ClassDescription;
    exports.ClassPropertyDescription = ClassPropertyDescription;
    exports.ClassesApi = ClassesApi;
    exports.ClassificationGuide = ClassificationGuide;
    exports.ClassificationGuideBody = ClassificationGuideBody;
    exports.ClassificationGuideEntry = ClassificationGuideEntry;
    exports.ClassificationGuideInTopic = ClassificationGuideInTopic;
    exports.ClassificationGuidePaging = ClassificationGuidePaging;
    exports.ClassificationGuidePagingList = ClassificationGuidePagingList;
    exports.ClassificationGuides = ClassificationGuides;
    exports.ClassificationGuidesApi = ClassificationGuidesApi;
    exports.ClassificationGuidesBody = ClassificationGuidesBody;
    exports.ClassificationGuidesEntry = ClassificationGuidesEntry;
    exports.ClassificationGuidesInTopic = ClassificationGuidesInTopic;
    exports.ClassificationInformation = ClassificationInformation;
    exports.ClassificationReason = ClassificationReason;
    exports.ClassificationReasonBody = ClassificationReasonBody;
    exports.ClassificationReasonEntry = ClassificationReasonEntry;
    exports.ClassificationReasonsApi = ClassificationReasonsApi;
    exports.ClassificationReasonsPaging = ClassificationReasonsPaging;
    exports.ClassificationReasonsPagingList = ClassificationReasonsPagingList;
    exports.ClientBody = ClientBody;
    exports.CombinedInstructionBody = CombinedInstructionBody;
    exports.Comment = Comment;
    exports.CommentAuditInfo = CommentAuditInfo;
    exports.CommentBody = CommentBody;
    exports.CommentEntry = CommentEntry;
    exports.CommentPaging = CommentPaging;
    exports.CommentPagingList = CommentPagingList;
    exports.CommentRepresentation = CommentRepresentation;
    exports.CommentsApi = CommentsApi;
    exports.Company = Company;
    exports.CompleteFormRepresentation = CompleteFormRepresentation;
    exports.ConditionRepresentation = ConditionRepresentation;
    exports.ContentApi = ContentApi;
    exports.ContentAuth = ContentAuth;
    exports.ContentClient = ContentClient;
    exports.ContentInfo = ContentInfo;
    exports.CopyBody = NodeBodyCopy;
    exports.CreateEndpointBasicAuthRepresentation = CreateEndpointBasicAuthRepresentation;
    exports.CreateProcessInstanceRepresentation = CreateProcessInstanceRepresentation;
    exports.CreateTenantRepresentation = CreateTenantRepresentation;
    exports.CustomModelApi = CustomModelApi;
    exports.DISCOVERY_APIS = DISCOVERY_APIS;
    exports.DataSourceConfigRepresentation = DataSourceConfigRepresentation;
    exports.DataSourceRepresentation = DataSourceRepresentation;
    exports.DataSourcesApi = DataSourcesApi;
    exports.DateAlfresco = DateAlfresco;
    exports.DecisionAuditRepresentation = DecisionAuditRepresentation;
    exports.DecisionAuditsApi = DecisionAuditsApi;
    exports.DecisionTablesApi = DecisionTablesApi;
    exports.DecisionTaskRepresentation = DecisionTaskRepresentation;
    exports.DeclassificationExemption = DeclassificationExemption;
    exports.DeclassificationExemptionBody = DeclassificationExemptionBody;
    exports.DeclassificationExemptionEntry = DeclassificationExemptionEntry;
    exports.DeclassificationExemptionsApi = DeclassificationExemptionsApi;
    exports.DeclassificationExemptionsPaging = DeclassificationExemptionsPaging;
    exports.DeclassificationExemptionsPagingList = DeclassificationExemptionsPagingList;
    exports.DefaultClassificationValuesApi = DefaultClassificationValuesApi;
    exports.DeletedNode = DeletedNode;
    exports.DeletedNodeBodyRestore = DeletedNodeBodyRestore;
    exports.DeletedNodeEntity = DeletedNodeEntry;
    exports.DeletedNodeEntry = DeletedNodeEntry;
    exports.DeletedNodesPaging = DeletedNodesPaging;
    exports.DeletedNodesPagingList = DeletedNodesPagingList;
    exports.DiscoveryApi = DiscoveryApi;
    exports.DiscoveryEntry = DiscoveryEntry;
    exports.DownloadBodyCreate = DownloadBodyCreate;
    exports.DownloadEntry = DownloadEntry;
    exports.DownloadsApi = DownloadsApi;
    exports.EcmClient = ContentClient;
    exports.EmailSharedLinkBody = SharedLinkBodyEmail;
    exports.EndpointBasicAuthRepresentation = EndpointBasicAuthRepresentation;
    exports.EndpointConfigurationRepresentation = EndpointConfigurationRepresentation;
    exports.EndpointRequestHeaderRepresentation = EndpointRequestHeaderRepresentation;
    exports.EndpointsApi = EndpointsApi;
    exports.EntitlementsInfo = EntitlementsInfo;
    exports.EntityAttributeScopeRepresentation = EntityAttributeScopeRepresentation;
    exports.EntityVariableScopeRepresentation = EntityVariableScopeRepresentation;
    exports.ErrorError = ErrorError;
    exports.Favorite = Favorite;
    exports.FavoriteBody = FavoriteBodyCreate;
    exports.FavoriteBodyCreate = FavoriteBodyCreate;
    exports.FavoriteEntry = FavoriteEntry;
    exports.FavoritePaging = FavoritePaging;
    exports.FavoritePagingList = FavoritePagingList;
    exports.FavoriteSite = FavoriteSite;
    exports.FavoriteSiteBody = FavoriteSiteBodyCreate;
    exports.FavoriteSiteBodyCreate = FavoriteSiteBodyCreate;
    exports.FavoriteSiteEntry = FavoriteSiteEntry;
    exports.FavoritesApi = FavoritesApi;
    exports.FieldValueInfo = FieldValueInfo;
    exports.File = File$1;
    exports.FilePlan = FilePlan;
    exports.FilePlanBodyUpdate = FilePlanBodyUpdate;
    exports.FilePlanComponentBodyUpdate = FilePlanComponentBodyUpdate;
    exports.FilePlanEntry = FilePlanEntry;
    exports.FilePlansApi = FilePlansApi;
    exports.FilesApi = FilesApi;
    exports.FormDefinitionRepresentation = FormDefinitionRepresentation;
    exports.FormFieldRepresentation = FormFieldRepresentation;
    exports.FormIdentifierRepresentation = FormIdentifierRepresentation;
    exports.FormJavascriptEventRepresentation = FormJavascriptEventRepresentation;
    exports.FormModelsApi = FormModelsApi;
    exports.FormOutcomeRepresentation = FormOutcomeRepresentation;
    exports.FormRepresentation = FormRepresentation;
    exports.FormSaveRepresentation = FormSaveRepresentation;
    exports.FormScopeRepresentation = FormScopeRepresentation;
    exports.FormTabRepresentation = FormTabRepresentation;
    exports.FormValueRepresentation = FormValueRepresentation;
    exports.FormVariableRepresentation = FormVariableRepresentation;
    exports.GS_CLASSIFICATION_APIS = GS_CLASSIFICATION_APIS;
    exports.GS_CORE_APIS = GS_CORE_APIS;
    exports.GenericBucket = GenericBucket;
    exports.GenericBucketBucketInfo = GenericBucketBucketInfo;
    exports.GenericFacetResponse = GenericFacetResponse;
    exports.GenericMetric = GenericMetric;
    exports.GlobalDateFormatRepresentation = GlobalDateFormatRepresentation;
    exports.GoogleDriveContent = GoogleDriveContent;
    exports.Group = Group;
    exports.GroupBody = GroupBodyCreate;
    exports.GroupBodyCreate = GroupBodyCreate;
    exports.GroupBodyUpdate = GroupBodyUpdate;
    exports.GroupCapabilityRepresentation = GroupCapabilityRepresentation;
    exports.GroupEntry = GroupEntry;
    exports.GroupMemberEntry = GroupMemberEntry;
    exports.GroupMemberPaging = GroupMemberPaging;
    exports.GroupMemberPagingList = GroupMemberPagingList;
    exports.GroupPaging = GroupPaging;
    exports.GroupPagingList = GroupPagingList;
    exports.GroupRepresentation = GroupRepresentation;
    exports.GroupsApi = GroupsApi;
    exports.GroupsPaging = GroupPaging;
    exports.GsSitesApi = GsSitesApi;
    exports.HistoricProcessInstanceQueryRepresentation = HistoricProcessInstanceQueryRepresentation;
    exports.HistoricTaskInstanceQueryRepresentation = HistoricTaskInstanceQueryRepresentation;
    exports.IDMSyncApi = IDMSyncApi;
    exports.IdentityLinkRepresentation = IdentityLinkRepresentation;
    exports.ImageUploadRepresentation = ImageUploadRepresentation;
    exports.Instruction = Instruction;
    exports.InstructionBody = InstructionBody;
    exports.InstructionEntry = InstructionEntry;
    exports.IntegrationAlfrescoCloudApi = IntegrationAlfrescoCloudApi;
    exports.IntegrationAlfrescoOnPremiseApi = IntegrationAlfrescoOnPremiseApi;
    exports.IntegrationBoxApi = IntegrationBoxApi;
    exports.IntegrationDriveApi = IntegrationDriveApi;
    exports.LayoutRepresentation = LayoutRepresentation;
    exports.LicenseInfo = LicenseInfo;
    exports.LightAppRepresentation = LightAppRepresentation;
    exports.LightGroupRepresentation = LightGroupRepresentation;
    exports.LightTenantRepresentation = LightTenantRepresentation;
    exports.LightUserRepresentation = LightUserRepresentation;
    exports.MinimalNode = Node;
    exports.MinimalNodeEntity = NodeEntry;
    exports.MinimalNodeEntryEntity = Node;
    exports.ModelError = ModelError;
    exports.ModelJsonBpmnApi = ModelJsonBpmnApi;
    exports.ModelRepresentation = ModelRepresentation;
    exports.ModelsApi = ModelsApi;
    exports.ModelsBpmnApi = ModelsBpmnApi;
    exports.ModelsHistoryApi = ModelsHistoryApi;
    exports.ModuleInfo = ModuleInfo;
    exports.MoveBody = NodeBodyMove;
    exports.NamedObject = NamedObject;
    exports.NetworkQuota = NetworkQuota;
    exports.NetworksApi = NetworksApi;
    exports.Node = Node;
    exports.NodeAssociation = NodeAssociation;
    exports.NodeAssociationEntry = NodeAssociationEntry;
    exports.NodeAssociationPaging = NodeAssociationPaging;
    exports.NodeAssociationPagingList = NodeAssociationPagingList;
    exports.NodeBody = NodeBodyCreate;
    exports.NodeBodyCopy = NodeBodyCopy;
    exports.NodeBodyCreate = NodeBodyCreate;
    exports.NodeBodyCreateAssociation = NodeBodyCreateAssociation;
    exports.NodeBodyMove = NodeBodyMove;
    exports.NodeBodyUpdate = NodeBodyUpdate;
    exports.NodeChildAssociation = NodeChildAssociation;
    exports.NodeChildAssociationEntry = NodeChildAssociationEntry;
    exports.NodeChildAssociationPaging = NodeChildAssociationPaging;
    exports.NodeChildAssociationPagingList = NodeChildAssociationPagingList;
    exports.NodeEntry = NodeEntry;
    exports.NodePaging = NodePaging;
    exports.NodePagingList = NodePagingList;
    exports.NodesApi = NodesApi;
    exports.Oauth2Auth = Oauth2Auth;
    exports.OptionRepresentation = OptionRepresentation;
    exports.Pagination = Pagination;
    exports.PasswordResetBody = PasswordResetBody;
    exports.PasswordValidationConstraints = PasswordValidationConstraints;
    exports.Path = Path;
    exports.PathElement = PathElement;
    exports.PathElementEntity = PathElement;
    exports.PathInfo = PathInfo;
    exports.PathInfoEntity = PathInfo;
    exports.PeopleApi = PeopleApi;
    exports.PermissionsBodyUpdate = PermissionsBodyUpdate;
    exports.PermissionsInfo = PermissionsInfo;
    exports.Person = Person;
    exports.PersonBodyCreate = PersonBodyCreate;
    exports.PersonBodyUpdate = PersonBodyUpdate;
    exports.PersonEntry = PersonEntry;
    exports.PersonNetworkEntry = PersonNetworkEntry;
    exports.PersonNetworkPaging = PersonNetworkPaging;
    exports.PersonNetworkPagingList = PersonNetworkPagingList;
    exports.PersonPaging = PersonPaging;
    exports.PersonPagingList = PersonPagingList;
    exports.Preference = Preference;
    exports.PreferenceEntry = PreferenceEntry;
    exports.PreferencePaging = PreferencePaging;
    exports.PreferencePagingList = PreferencePagingList;
    exports.PreferencesApi = PreferencesApi;
    exports.ProbeEntry = ProbeEntry;
    exports.ProbeEntryEntry = ProbeEntryEntry;
    exports.ProbesApi = ProbesApi;
    exports.ProcessAuth = ProcessAuth;
    exports.ProcessClient = ProcessClient;
    exports.ProcessContentRepresentation = ProcessContentRepresentation;
    exports.ProcessDefinitionMetaDataRepresentation = ProcessDefinitionMetaDataRepresentation;
    exports.ProcessDefinitionRepresentation = ProcessDefinitionRepresentation;
    exports.ProcessDefinitionsApi = ProcessDefinitionsApi;
    exports.ProcessFilterRequestRepresentation = exports.ProcessInstanceQueryRepresentation;
    exports.ProcessInstanceAuditInfoRepresentation = ProcessInstanceAuditInfoRepresentation;
    exports.ProcessInstanceFilterRepresentation = ProcessInstanceFilterRepresentation;
    exports.ProcessInstanceFilterRequestRepresentation = ProcessInstanceFilterRequestRepresentation;
    exports.ProcessInstanceRepresentation = ProcessInstanceRepresentation;
    exports.ProcessInstanceVariableRepresentation = ProcessInstanceVariableRepresentation;
    exports.ProcessInstanceVariablesApi = ProcessInstanceVariablesApi;
    exports.ProcessInstancesApi = ProcessInstancesApi;
    exports.ProcessScopeIdentifierRepresentation = ProcessScopeIdentifierRepresentation;
    exports.ProcessScopeRepresentation = ProcessScopeRepresentation;
    exports.ProcessScopesApi = ProcessScopesApi;
    exports.ProcessScopesRequestRepresentation = ProcessScopesRequestRepresentation;
    exports.PublishIdentityInfoRepresentation = PublishIdentityInfoRepresentation;
    exports.QueriesApi = QueriesApi;
    exports.QueryBody = SearchRequest;
    exports.RMNodeBodyCreate = RMNodeBodyCreate;
    exports.RMNodeBodyCreateWithRelativePath = RMNodeBodyCreateWithRelativePath;
    exports.RMSiteBodyUpdate = RMSiteBodyUpdate;
    exports.RMSiteEntry = RMSiteEntry;
    exports.Rating = Rating;
    exports.RatingAggregate = RatingAggregate;
    exports.RatingEntry = RatingEntry;
    exports.RatingPaging = RatingPaging;
    exports.RatingPagingList = RatingPagingList;
    exports.RatingsApi = RatingsApi;
    exports.Record = Record;
    exports.RecordCategoriesApi = RecordCategoriesApi;
    exports.RecordCategory = RecordCategory;
    exports.RecordCategoryChild = RecordCategoryChild;
    exports.RecordCategoryChildEntry = RecordCategoryChildEntry;
    exports.RecordCategoryChildPaging = RecordCategoryChildPaging;
    exports.RecordCategoryChildPagingList = RecordCategoryChildPagingList;
    exports.RecordCategoryEntry = RecordCategoryEntry;
    exports.RecordCategoryPaging = RecordCategoryPaging;
    exports.RecordCategoryPagingList = RecordCategoryPagingList;
    exports.RecordEntry = RecordEntry;
    exports.RecordFolder = RecordFolder;
    exports.RecordFolderAssociationPaging = RecordFolderAssociationPaging;
    exports.RecordFolderAssociationPagingList = RecordFolderAssociationPagingList;
    exports.RecordFolderChildAssociation = RecordFolderChildAssociation;
    exports.RecordFolderChildAssociationEntry = RecordFolderChildAssociationEntry;
    exports.RecordFolderEntry = RecordFolderEntry;
    exports.RecordFoldersApi = RecordFoldersApi;
    exports.RecordsApi = RecordsApi;
    exports.RelatedContentRepresentation = RelatedContentRepresentation;
    exports.RenditionBody = RenditionBodyCreate;
    exports.RenditionBodyCreate = RenditionBodyCreate;
    exports.RenditionEntry = RenditionEntry;
    exports.RenditionPaging = RenditionPaging;
    exports.RenditionPagingList = RenditionPagingList;
    exports.RenditionsApi = RenditionsApi;
    exports.ReportApi = ReportApi;
    exports.RepositoryEntry = RepositoryEntry;
    exports.RepositoryInfo = RepositoryInfo;
    exports.RequestBodyFile = RequestBodyFile;
    exports.RequestFacetFields = RequestFacetFields;
    exports.RequestFacetIntervals = RequestFacetIntervals;
    exports.RequestFacetIntervalsIntervals = RequestFacetIntervalsIntervals;
    exports.RequestFacetQueries = RequestFacetQueries;
    exports.RequestFacetQueriesInner = RequestFacetQueriesInner;
    exports.RequestFacetSet = RequestFacetSet;
    exports.RequestFields = RequestFields;
    exports.RequestFilterQueries = RequestFilterQueries;
    exports.RequestFilterQueriesInner = RequestFilterQueriesInner;
    exports.RequestHighlight = RequestHighlight;
    exports.RequestHighlightFields = RequestHighlightFields;
    exports.RequestInclude = RequestInclude;
    exports.RequestLimits = RequestLimits;
    exports.RequestLocalization = RequestLocalization;
    exports.RequestPagination = RequestPagination;
    exports.RequestPivot = RequestPivot;
    exports.RequestRange = RequestRange;
    exports.RequestSortDefinition = RequestSortDefinition;
    exports.RequestSpellcheck = RequestSpellcheck;
    exports.RequestStats = RequestStats;
    exports.RequestTemplates = RequestTemplates;
    exports.RequestTemplatesInner = RequestTemplatesInner;
    exports.ResetPasswordRepresentation = ResetPasswordRepresentation;
    exports.ResponseConsistency = ResponseConsistency;
    exports.RestVariable = RestVariable;
    exports.ResultBuckets = ResultBuckets;
    exports.ResultBucketsBuckets = ResultBucketsBuckets;
    exports.ResultListDataRepresentationAbstractUserRepresentation = ResultListDataRepresentationAbstractUserRepresentation;
    exports.ResultListDataRepresentationAccountRepresentation = ResultListDataRepresentationAccountRepresentation;
    exports.ResultListDataRepresentationAlfrescoContentRepresentation = ResultListDataRepresentationAlfrescoContentRepresentation;
    exports.ResultListDataRepresentationAlfrescoEndpointRepresentation = ResultListDataRepresentationAlfrescoEndpointRepresentation;
    exports.ResultListDataRepresentationAlfrescoNetworkRepresenation = ResultListDataRepresentationAlfrescoNetworkRepresenation;
    exports.ResultListDataRepresentationAlfrescoSiteRepresenation = ResultListDataRepresentationAlfrescoSiteRepresenation;
    exports.ResultListDataRepresentationAppDefinitionRepresentation = ResultListDataRepresentationAppDefinitionRepresentation;
    exports.ResultListDataRepresentationAppDeploymentRepresentation = ResultListDataRepresentationAppDeploymentRepresentation;
    exports.ResultListDataRepresentationBoxContent = ResultListDataRepresentationBoxContent;
    exports.ResultListDataRepresentationCommentRepresentation = ResultListDataRepresentationCommentRepresentation;
    exports.ResultListDataRepresentationDataSourceRepresentation = ResultListDataRepresentationDataSourceRepresentation;
    exports.ResultListDataRepresentationDecisionAuditRepresentation = ResultListDataRepresentationDecisionAuditRepresentation;
    exports.ResultListDataRepresentationDecisionTaskRepresentation = ResultListDataRepresentationDecisionTaskRepresentation;
    exports.ResultListDataRepresentationFormRepresentation = ResultListDataRepresentationFormRepresentation;
    exports.ResultListDataRepresentationGoogleDriveContent = ResultListDataRepresentationGoogleDriveContent;
    exports.ResultListDataRepresentationLightGroupRepresentation = ResultListDataRepresentationLightGroupRepresentation;
    exports.ResultListDataRepresentationLightUserRepresentation = ResultListDataRepresentationLightUserRepresentation;
    exports.ResultListDataRepresentationModelRepresentation = ResultListDataRepresentationModelRepresentation;
    exports.ResultListDataRepresentationProcessContentRepresentation = ResultListDataRepresentationProcessContentRepresentation;
    exports.ResultListDataRepresentationProcessDefinitionRepresentation = ResultListDataRepresentationProcessDefinitionRepresentation;
    exports.ResultListDataRepresentationProcessInstanceRepresentation = ResultListDataRepresentationProcessInstanceRepresentation;
    exports.ResultListDataRepresentationRelatedContentRepresentation = ResultListDataRepresentationRelatedContentRepresentation;
    exports.ResultListDataRepresentationRuntimeDecisionTableRepresentation = ResultListDataRepresentationRuntimeDecisionTableRepresentation;
    exports.ResultListDataRepresentationRuntimeFormRepresentation = ResultListDataRepresentationRuntimeFormRepresentation;
    exports.ResultListDataRepresentationSubmittedFormRepresentation = ResultListDataRepresentationSubmittedFormRepresentation;
    exports.ResultListDataRepresentationTaskRepresentation = ResultListDataRepresentationTaskRepresentation;
    exports.ResultListDataRepresentationUserProcessInstanceFilterRepresentation = ResultListDataRepresentationUserProcessInstanceFilterRepresentation;
    exports.ResultListDataRepresentationUserTaskFilterRepresentation = ResultListDataRepresentationUserTaskFilterRepresentation;
    exports.ResultNode = ResultNode;
    exports.ResultSetContext = ResultSetContext;
    exports.ResultSetContextFacetQueries = ResultSetContextFacetQueries;
    exports.ResultSetPaging = ResultSetPaging;
    exports.ResultSetPagingList = ResultSetPagingList;
    exports.ResultSetRowEntry = ResultSetRowEntry;
    exports.RevertBody = RevertBody;
    exports.RootCategoryBodyCreate = RootCategoryBodyCreate;
    exports.RuntimeAppDefinitionSaveRepresentation = RuntimeAppDefinitionSaveRepresentation;
    exports.RuntimeAppDefinitionsApi = RuntimeAppDefinitionsApi;
    exports.RuntimeAppDeploymentsApi = RuntimeAppDeploymentsApi;
    exports.RuntimeDecisionTableRepresentation = RuntimeDecisionTableRepresentation;
    exports.RuntimeFormRepresentation = RuntimeFormRepresentation;
    exports.SEARCH_APIS = SEARCH_APIS;
    exports.SaveFormRepresentation = SaveFormRepresentation;
    exports.ScriptFilesApi = ScriptFilesApi;
    exports.SearchApi = SearchApi;
    exports.SearchEntry = SearchEntry;
    exports.SearchEntryHighlight = SearchEntryHighlight;
    exports.SearchRequest = SearchRequest;
    exports.SecurityControlSetting = SecurityControlSetting;
    exports.SecurityControlSettingBody = SecurityControlSettingBody;
    exports.SecurityControlSettingEntry = SecurityControlSettingEntry;
    exports.SecurityControlSettingsApi = SecurityControlSettingsApi;
    exports.SecurityMark = SecurityMark;
    exports.SecurityMarkBody = SecurityMarkBody;
    exports.SecurityMarkInformation = SecurityMarkInformation;
    exports.SecurityMarkInformationBody = SecurityMarkInformationBody;
    exports.SecurityMarks = SecurityMarks;
    exports.SecurityMarksBody = SecurityMarksBody;
    exports.SharedLink = SharedLink;
    exports.SharedLinkBody = SharedLinkBodyCreate;
    exports.SharedLinkBodyCreate = SharedLinkBodyCreate;
    exports.SharedLinkBodyEmail = SharedLinkBodyEmail;
    exports.SharedLinkEntry = SharedLinkEntry;
    exports.SharedLinkPaging = SharedLinkPaging;
    exports.SharedLinkPagingList = SharedLinkPagingList;
    exports.SharedlinksApi = SharedlinksApi;
    exports.SiteBody = exports.SiteBodyCreate;
    exports.SiteContainer = SiteContainer;
    exports.SiteContainerEntry = SiteContainerEntry;
    exports.SiteContainerPaging = SiteContainerPaging;
    exports.SiteContainerPagingList = SiteContainerPagingList;
    exports.SiteEntry = SiteEntry;
    exports.SiteMemberBody = exports.SiteMembershipBodyCreate;
    exports.SiteMemberEntry = SiteMemberEntry;
    exports.SiteMemberPaging = SiteMemberPaging;
    exports.SiteMemberPagingList = SiteMemberPagingList;
    exports.SiteMemberRoleBody = exports.SiteMembershipBodyUpdate;
    exports.SiteMembershipApprovalBody = SiteMembershipApprovalBody;
    exports.SiteMembershipBody = SiteMembershipRequestBodyUpdate;
    exports.SiteMembershipRejectionBody = SiteMembershipRejectionBody;
    exports.SiteMembershipRequest = SiteMembershipRequest;
    exports.SiteMembershipRequestBody = SiteMembershipRequestBodyCreate;
    exports.SiteMembershipRequestBodyCreate = SiteMembershipRequestBodyCreate;
    exports.SiteMembershipRequestBodyUpdate = SiteMembershipRequestBodyUpdate;
    exports.SiteMembershipRequestEntry = SiteMembershipRequestEntry;
    exports.SiteMembershipRequestPaging = SiteMembershipRequestPaging;
    exports.SiteMembershipRequestPagingList = SiteMembershipRequestPagingList;
    exports.SiteMembershipRequestWithPerson = SiteMembershipRequestWithPerson;
    exports.SiteMembershipRequestWithPersonEntry = SiteMembershipRequestWithPersonEntry;
    exports.SiteMembershipRequestWithPersonPaging = SiteMembershipRequestWithPersonPaging;
    exports.SiteMembershipRequestWithPersonPagingList = SiteMembershipRequestWithPersonPagingList;
    exports.SitePaging = SitePaging;
    exports.SitePagingList = SitePagingList;
    exports.SiteRoleEntry = SiteRoleEntry;
    exports.SiteRolePaging = SiteRolePaging;
    exports.SiteRolePagingList = SiteRolePagingList;
    exports.SitesApi = SitesApi;
    exports.StatusInfo = StatusInfo;
    exports.Storage = Storage;
    exports.SubmittedFormRepresentation = SubmittedFormRepresentation;
    exports.SubmittedFormsApi = SubmittedFormsApi;
    exports.SubtopicPaging = SubtopicPaging;
    exports.SyncLogEntryRepresentation = SyncLogEntryRepresentation;
    exports.SystemPropertiesApi = SystemPropertiesApi;
    exports.SystemPropertiesRepresentation = SystemPropertiesRepresentation;
    exports.Tag = Tag;
    exports.TagBody = TagBody;
    exports.TagEntry = TagEntry;
    exports.TagPaging = TagPaging;
    exports.TagPagingList = TagPagingList;
    exports.TagsApi = TagsApi;
    exports.TaskActionsApi = TaskActionsApi;
    exports.TaskAuditInfoRepresentation = TaskAuditInfoRepresentation;
    exports.TaskFilterRequestRepresentation = TaskFilterRequestRepresentation;
    exports.TaskFormsApi = TaskFormsApi;
    exports.TaskQueryRepresentation = exports.TaskQueryRequestRepresentation;
    exports.TaskRepresentation = TaskRepresentation;
    exports.TaskUpdateRepresentation = TaskUpdateRepresentation;
    exports.TaskVariablesApi = TaskVariablesApi;
    exports.TasksApi = TasksApi;
    exports.TemporaryApi = TemporaryApi;
    exports.TenantEvent = TenantEvent;
    exports.TenantRepresentation = TenantRepresentation;
    exports.Ticket = Ticket;
    exports.TicketBody = TicketBody;
    exports.TicketEntry = TicketEntry;
    exports.Topic = Topic;
    exports.TopicBody = TopicBody;
    exports.TopicEntry = TopicEntry;
    exports.TopicPaging = TopicPaging;
    exports.TopicPagingList = TopicPagingList;
    exports.Transfer = Transfer;
    exports.TransferAssociationPaging = TransferAssociationPaging;
    exports.TransferAssociationPagingList = TransferAssociationPagingList;
    exports.TransferChild = TransferChild;
    exports.TransferChildAssociation = TransferChildAssociation;
    exports.TransferChildAssociationEntry = TransferChildAssociationEntry;
    exports.TransferContainer = TransferContainer;
    exports.TransferContainerAssociationPaging = TransferContainerAssociationPaging;
    exports.TransferContainerAssociationPagingList = TransferContainerAssociationPagingList;
    exports.TransferContainerBodyUpdate = TransferContainerBodyUpdate;
    exports.TransferContainerChild = TransferContainerChild;
    exports.TransferContainerChildAssociation = TransferContainerChildAssociation;
    exports.TransferContainerChildAssociationEntry = TransferContainerChildAssociationEntry;
    exports.TransferContainerEntry = TransferContainerEntry;
    exports.TransferContainersApi = TransferContainersApi;
    exports.TransferEntry = TransferEntry;
    exports.TransfersApi = TransfersApi;
    exports.TrashcanApi = TrashcanApi;
    exports.UnfiledContainer = UnfiledContainer;
    exports.UnfiledContainerAssociationPaging = UnfiledContainerAssociationPaging;
    exports.UnfiledContainerAssociationPagingList = UnfiledContainerAssociationPagingList;
    exports.UnfiledContainerChild = UnfiledContainerChild;
    exports.UnfiledContainerChildAssociation = UnfiledContainerChildAssociation;
    exports.UnfiledContainerChildAssociationEntry = UnfiledContainerChildAssociationEntry;
    exports.UnfiledContainerEntry = UnfiledContainerEntry;
    exports.UnfiledContainersApi = UnfiledContainersApi;
    exports.UnfiledRecordContainerBodyUpdate = UnfiledRecordContainerBodyUpdate;
    exports.UnfiledRecordFolder = UnfiledRecordFolder;
    exports.UnfiledRecordFolderAssociationPaging = UnfiledRecordFolderAssociationPaging;
    exports.UnfiledRecordFolderAssociationPagingList = UnfiledRecordFolderAssociationPagingList;
    exports.UnfiledRecordFolderBodyUpdate = UnfiledRecordFolderBodyUpdate;
    exports.UnfiledRecordFolderChild = UnfiledRecordFolderChild;
    exports.UnfiledRecordFolderChildAssociation = UnfiledRecordFolderChildAssociation;
    exports.UnfiledRecordFolderChildAssociationEntry = UnfiledRecordFolderChildAssociationEntry;
    exports.UnfiledRecordFolderEntry = UnfiledRecordFolderEntry;
    exports.UnfiledRecordFoldersApi = UnfiledRecordFoldersApi;
    exports.UploadApi = UploadApi;
    exports.UserAccountCredentialsRepresentation = UserAccountCredentialsRepresentation;
    exports.UserActionRepresentation = UserActionRepresentation;
    exports.UserFilterOrderRepresentation = UserFilterOrderRepresentation;
    exports.UserFiltersApi = UserFiltersApi;
    exports.UserIdentifierRepresentation = UserIdentifierRepresentation;
    exports.UserInfo = UserInfo;
    exports.UserProcessInstanceFilterRepresentation = UserProcessInstanceFilterRepresentation;
    exports.UserProfileApi = UserProfileApi;
    exports.UserRepresentation = UserRepresentation;
    exports.UserTaskFilterRepresentation = UserTaskFilterRepresentation;
    exports.UsersApi = UsersApi;
    exports.ValidTicket = ValidTicket;
    exports.ValidTicketEntry = ValidTicketEntry;
    exports.ValidationErrorRepresentation = ValidationErrorRepresentation;
    exports.VariableMappingRepresentation = VariableMappingRepresentation;
    exports.VariableScopeRepresentation = VariableScopeRepresentation;
    exports.Version = Version;
    exports.VersionEntry = VersionEntry;
    exports.VersionInfo = VersionInfo;
    exports.VersionPaging = VersionPaging;
    exports.VersionPagingList = VersionPagingList;
    exports.VersionsApi = VersionsApi;
    exports.WebscriptApi = WebscriptApi;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=alfresco-js-api.umd.js.map
