/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { RenditionEntry } from '../model/renditionEntry';
import { RenditionPaging } from '../model/renditionPaging';
import { SharedLinkEntry } from '../model/sharedLinkEntry';
import { SharedLinkPaging } from '../model/sharedLinkPaging';
import { BaseApi } from './base.api';
import { buildCollectionParam } from '../../../alfrescoApiClient';
import { throwIfNotDefined } from '../../../assert';
export class SharedlinksApi extends BaseApi {
    createSharedLink(sharedLinkBodyCreate, opts) {
        throwIfNotDefined(sharedLinkBodyCreate, 'sharedLinkBodyCreate');
        opts = opts || {};
        let postBody = sharedLinkBodyCreate;
        let pathParams = {};
        let queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SharedLinkEntry);
    }
    deleteSharedLink(sharedId) {
        throwIfNotDefined(sharedId, 'sharedId');
        let postBody = null;
        let pathParams = {
            'sharedId': sharedId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links/{sharedId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    emailSharedLink(sharedId, sharedLinkBodyEmail) {
        throwIfNotDefined(sharedId, 'sharedId');
        throwIfNotDefined(sharedLinkBodyEmail, 'sharedLinkBodyEmail');
        let postBody = sharedLinkBodyEmail;
        let pathParams = {
            'sharedId': sharedId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links/{sharedId}/email', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getSharedLink(sharedId, opts) {
        throwIfNotDefined(sharedId, 'sharedId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'sharedId': sharedId
        };
        let queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links/{sharedId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SharedLinkEntry);
    }
    getSharedLinkContent(sharedId, opts) {
        throwIfNotDefined(sharedId, 'sharedId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'sharedId': sharedId
        };
        let queryParams = {
            'attachment': opts['attachment']
        };
        let headerParams = {
            'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
        };
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links/{sharedId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getSharedLinkRendition(sharedId, renditionId) {
        throwIfNotDefined(sharedId, 'sharedId');
        throwIfNotDefined(renditionId, 'renditionId');
        let postBody = null;
        let pathParams = {
            'sharedId': sharedId, 'renditionId': renditionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links/{sharedId}/renditions/{renditionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionEntry);
    }
    getSharedLinkRenditionContent(sharedId, renditionId, opts) {
        throwIfNotDefined(sharedId, 'sharedId');
        throwIfNotDefined(renditionId, 'renditionId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'sharedId': sharedId, 'renditionId': renditionId
        };
        let queryParams = {
            'attachment': opts['attachment']
        };
        let headerParams = {
            'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
        };
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links/{sharedId}/renditions/{renditionId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    listSharedLinkRenditions(sharedId) {
        throwIfNotDefined(sharedId, 'sharedId');
        let postBody = null;
        let pathParams = {
            'sharedId': sharedId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links/{sharedId}/renditions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionPaging);
    }
    listSharedLinks(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SharedLinkPaging);
    }
}
//# sourceMappingURL=sharedlinks.api.js.map