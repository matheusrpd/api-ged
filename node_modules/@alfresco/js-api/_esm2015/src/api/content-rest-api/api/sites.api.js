/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { SiteContainerEntry } from '../model/siteContainerEntry';
import { SiteContainerPaging } from '../model/siteContainerPaging';
import { SiteEntry } from '../model/siteEntry';
import { SiteMemberEntry } from '../model/siteMemberEntry';
import { SiteMemberPaging } from '../model/siteMemberPaging';
import { SiteMembershipRequestEntry } from '../model/siteMembershipRequestEntry';
import { SiteMembershipRequestPaging } from '../model/siteMembershipRequestPaging';
import { SiteMembershipRequestWithPersonPaging } from '../model/siteMembershipRequestWithPersonPaging';
import { SitePaging } from '../model/sitePaging';
import { SiteRoleEntry } from '../model/siteRoleEntry';
import { SiteRolePaging } from '../model/siteRolePaging';
import { BaseApi } from './base.api';
import { buildCollectionParam } from '../../../alfrescoApiClient';
import { throwIfNotDefined } from '../../../assert';
export class SitesApi extends BaseApi {
    approveSiteMembershipRequest(siteId, inviteeId, opts) {
        throwIfNotDefined(siteId, 'siteId');
        throwIfNotDefined(inviteeId, 'inviteeId');
        opts = opts || {};
        let postBody = opts['siteMembershipApprovalBody'];
        let pathParams = {
            'siteId': siteId, 'inviteeId': inviteeId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/site-membership-requests/{inviteeId}/approve', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    createSite(siteBodyCreate, opts) {
        throwIfNotDefined(siteBodyCreate, 'siteBodyCreate');
        opts = opts || {};
        let postBody = siteBodyCreate;
        let pathParams = {};
        let queryParams = {
            'skipConfiguration': opts['skipConfiguration'],
            'skipAddToFavorites': opts['skipAddToFavorites'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteEntry);
    }
    createSiteMembership(siteId, siteMembershipBodyCreate, opts) {
        throwIfNotDefined(siteId, 'siteId');
        throwIfNotDefined(siteMembershipBodyCreate, 'siteMembershipBodyCreate');
        opts = opts || {};
        let postBody = siteMembershipBodyCreate;
        let pathParams = {
            'siteId': siteId
        };
        let queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/members', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMemberEntry);
    }
    createSiteMembershipRequestForPerson(personId, siteMembershipRequestBodyCreate, opts) {
        throwIfNotDefined(personId, 'personId');
        throwIfNotDefined(siteMembershipRequestBodyCreate, 'siteMembershipRequestBodyCreate');
        opts = opts || {};
        let postBody = siteMembershipRequestBodyCreate;
        let pathParams = {
            'personId': personId
        };
        let queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/site-membership-requests', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestEntry);
    }
    deleteSite(siteId, opts) {
        throwIfNotDefined(siteId, 'siteId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'siteId': siteId
        };
        let queryParams = {
            'permanent': opts['permanent']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteSiteMembership(siteId, personId) {
        throwIfNotDefined(siteId, 'siteId');
        throwIfNotDefined(personId, 'personId');
        let postBody = null;
        let pathParams = {
            'siteId': siteId, 'personId': personId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/members/{personId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteSiteMembershipForPerson(personId, siteId) {
        throwIfNotDefined(personId, 'personId');
        throwIfNotDefined(siteId, 'siteId');
        let postBody = null;
        let pathParams = {
            'personId': personId, 'siteId': siteId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/sites/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteSiteMembershipRequestForPerson(personId, siteId) {
        throwIfNotDefined(personId, 'personId');
        throwIfNotDefined(siteId, 'siteId');
        let postBody = null;
        let pathParams = {
            'personId': personId, 'siteId': siteId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/site-membership-requests/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getSite(siteId, opts) {
        throwIfNotDefined(siteId, 'siteId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'siteId': siteId
        };
        let queryParams = {
            'relations': buildCollectionParam(opts['relations'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteEntry);
    }
    getSiteContainer(siteId, containerId, opts) {
        throwIfNotDefined(siteId, 'siteId');
        throwIfNotDefined(containerId, 'containerId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'siteId': siteId, 'containerId': containerId
        };
        let queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/containers/{containerId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteContainerEntry);
    }
    getSiteMembership(siteId, personId, opts) {
        throwIfNotDefined(siteId, 'siteId');
        throwIfNotDefined(personId, 'personId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'siteId': siteId, 'personId': personId
        };
        let queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/members/{personId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMemberEntry);
    }
    getSiteMembershipForPerson(personId, siteId) {
        throwIfNotDefined(personId, 'personId');
        throwIfNotDefined(siteId, 'siteId');
        let postBody = null;
        let pathParams = {
            'personId': personId, 'siteId': siteId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/sites/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteRoleEntry);
    }
    getSiteMembershipRequestForPerson(personId, siteId, opts) {
        throwIfNotDefined(personId, 'personId');
        throwIfNotDefined(siteId, 'siteId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'personId': personId, 'siteId': siteId
        };
        let queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/site-membership-requests/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestEntry);
    }
    getSiteMembershipRequests(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/site-membership-requests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestWithPersonPaging);
    }
    listSiteContainers(siteId, opts) {
        throwIfNotDefined(siteId, 'siteId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'siteId': siteId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/containers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteContainerPaging);
    }
    listSiteMembershipRequestsForPerson(personId, opts) {
        throwIfNotDefined(personId, 'personId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'personId': personId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/site-membership-requests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestPaging);
    }
    listSiteMemberships(siteId, opts) {
        throwIfNotDefined(siteId, 'siteId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'siteId': siteId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/members', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMemberPaging);
    }
    listSiteMembershipsForPerson(personId, opts) {
        throwIfNotDefined(personId, 'personId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'personId': personId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
            'relations': buildCollectionParam(opts['relations'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv'),
            'where': opts['where']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteRolePaging);
    }
    listSites(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
            'relations': buildCollectionParam(opts['relations'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv'),
            'where': opts['where']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SitePaging);
    }
    rejectSiteMembershipRequest(siteId, inviteeId, opts) {
        throwIfNotDefined(siteId, 'siteId');
        throwIfNotDefined(inviteeId, 'inviteeId');
        opts = opts || {};
        let postBody = opts['siteMembershipRejectionBody'];
        let pathParams = {
            'siteId': siteId, 'inviteeId': inviteeId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/site-membership-requests/{inviteeId}/reject', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    updateSite(siteId, siteBodyUpdate, opts) {
        throwIfNotDefined(siteId, 'siteId');
        throwIfNotDefined(siteBodyUpdate, 'siteBodyUpdate');
        opts = opts || {};
        let postBody = siteBodyUpdate;
        let pathParams = {
            'siteId': siteId
        };
        let queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteEntry);
    }
    updateSiteMembership(siteId, personId, siteMembershipBodyUpdate, opts) {
        throwIfNotDefined(siteId, 'siteId');
        throwIfNotDefined(personId, 'personId');
        throwIfNotDefined(siteMembershipBodyUpdate, 'siteMembershipBodyUpdate');
        opts = opts || {};
        let postBody = siteMembershipBodyUpdate;
        let pathParams = {
            'siteId': siteId, 'personId': personId
        };
        let queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/members/{personId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMemberEntry);
    }
    updateSiteMembershipRequestForPerson(personId, siteId, siteMembershipRequestBodyUpdate, opts) {
        throwIfNotDefined(personId, 'personId');
        throwIfNotDefined(siteId, 'siteId');
        throwIfNotDefined(siteMembershipRequestBodyUpdate, 'siteMembershipRequestBodyUpdate');
        opts = opts || {};
        let postBody = siteMembershipRequestBodyUpdate;
        let pathParams = {
            'personId': personId, 'siteId': siteId
        };
        let queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/site-membership-requests/{siteId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestEntry);
    }
}
//# sourceMappingURL=sites.api.js.map