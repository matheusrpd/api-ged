/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { AuditApp } from '../model/auditApp';
import { AuditAppPaging } from '../model/auditAppPaging';
import { AuditEntryEntry } from '../model/auditEntryEntry';
import { AuditEntryPaging } from '../model/auditEntryPaging';
import { BaseApi } from './base.api';
import { buildCollectionParam } from '../../../alfrescoApiClient';
import { throwIfNotDefined } from '../../../assert';
export class AuditApi extends BaseApi {
    deleteAuditEntriesForAuditApp(auditApplicationId, where) {
        throwIfNotDefined(auditApplicationId, 'auditApplicationId');
        throwIfNotDefined(where, 'where');
        let postBody = null;
        let pathParams = {
            'auditApplicationId': auditApplicationId
        };
        let queryParams = {
            'where': where
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteAuditEntry(auditApplicationId, auditEntryId) {
        throwIfNotDefined(auditApplicationId, 'auditApplicationId');
        throwIfNotDefined(auditEntryId, 'auditEntryId');
        let postBody = null;
        let pathParams = {
            'auditApplicationId': auditApplicationId, 'auditEntryId': auditEntryId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getAuditApp(auditApplicationId, opts) {
        throwIfNotDefined(auditApplicationId, 'auditApplicationId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'auditApplicationId': auditApplicationId
        };
        let queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditApp);
    }
    getAuditEntry(auditApplicationId, auditEntryId, opts) {
        throwIfNotDefined(auditApplicationId, 'auditApplicationId');
        throwIfNotDefined(auditEntryId, 'auditEntryId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'auditApplicationId': auditApplicationId, 'auditEntryId': auditEntryId
        };
        let queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditEntryEntry);
    }
    listAuditApps(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditAppPaging);
    }
    listAuditEntriesForAuditApp(auditApplicationId, opts) {
        throwIfNotDefined(auditApplicationId, 'auditApplicationId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'auditApplicationId': auditApplicationId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditEntryPaging);
    }
    listAuditEntriesForNode(nodeId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/audit-entries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditEntryPaging);
    }
    updateAuditApp(auditApplicationId, auditAppBodyUpdate, opts) {
        throwIfNotDefined(auditApplicationId, 'auditApplicationId');
        throwIfNotDefined(auditAppBodyUpdate, 'auditAppBodyUpdate');
        opts = opts || {};
        let postBody = auditAppBodyUpdate;
        let pathParams = {
            'auditApplicationId': auditApplicationId
        };
        let queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditApp);
    }
}
//# sourceMappingURL=audit.api.js.map