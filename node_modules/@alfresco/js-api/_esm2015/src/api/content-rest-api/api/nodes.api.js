/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { AssociationEntry } from '../model/associationEntry';
import { ChildAssociationEntry } from '../model/childAssociationEntry';
import { NodeAssociationPaging } from '../model/nodeAssociationPaging';
import { NodeChildAssociationPaging } from '../model/nodeChildAssociationPaging';
import { NodeEntry } from '../model/nodeEntry';
import { BaseApi } from './base.api';
import { buildCollectionParam } from '../../../alfrescoApiClient';
import { throwIfNotDefined } from '../../../assert';
export class NodesApi extends BaseApi {
    copyNode(nodeId, nodeBodyCopy, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(nodeBodyCopy, 'nodeBodyCopy');
        opts = opts || {};
        let postBody = nodeBodyCopy;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/copy', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
    }
    createAssociation(nodeId, associationBodyCreate, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(associationBodyCreate, 'associationBodyCreate');
        opts = opts || {};
        let postBody = associationBodyCreate;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/targets', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AssociationEntry);
    }
    createNode(nodeId, nodeBodyCreate, opts, formParams) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(nodeBodyCreate, 'nodeBodyCreate');
        opts = opts || {};
        let postBody = nodeBodyCreate;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'autoRename': opts['autoRename'],
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        formParams = formParams || {};
        let contentTypes, returnType = null;
        if (formParams.filedata) {
            contentTypes = ['multipart/form-data'];
        }
        else {
            contentTypes = ['application/json'];
            returnType = NodeEntry;
        }
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, returnType);
    }
    createSecondaryChildAssociation(nodeId, secondaryChildAssociationBodyCreate, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(secondaryChildAssociationBodyCreate, 'secondaryChildAssociationBodyCreate');
        opts = opts || {};
        let postBody = secondaryChildAssociationBodyCreate;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/secondary-children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ChildAssociationEntry);
    }
    deleteAssociation(nodeId, targetId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(targetId, 'targetId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId, 'targetId': targetId
        };
        let queryParams = {
            'assocType': opts['assocType']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/targets/{targetId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteNode(nodeId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'permanent': opts['permanent']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteSecondaryChildAssociation(nodeId, childId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(childId, 'childId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId, 'childId': childId
        };
        let queryParams = {
            'assocType': opts['assocType']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/secondary-children/{childId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getNode(nodeId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv'),
            'relativePath': opts['relativePath'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
    }
    getNodeContent(nodeId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'attachment': opts['attachment']
        };
        let headerParams = {
            'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
        };
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    listNodeChildren(nodeId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
            'where': opts['where'],
            'include': buildCollectionParam(opts['include'], 'csv'),
            'relativePath': opts['relativePath'],
            'includeSource': opts['includeSource'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeChildAssociationPaging);
    }
    listParents(nodeId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'where': opts['where'],
            'include': buildCollectionParam(opts['include'], 'csv'),
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'includeSource': opts['includeSource'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/parents', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeAssociationPaging);
    }
    listSecondaryChildren(nodeId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'where': opts['where'],
            'include': buildCollectionParam(opts['include'], 'csv'),
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'includeSource': opts['includeSource'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/secondary-children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeChildAssociationPaging);
    }
    listSourceAssociations(nodeId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'where': opts['where'],
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/sources', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeAssociationPaging);
    }
    listTargetAssociations(nodeId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'where': opts['where'],
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/targets', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeAssociationPaging);
    }
    lockNode(nodeId, nodeBodyLock, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(nodeBodyLock, 'nodeBodyLock');
        opts = opts || {};
        let postBody = nodeBodyLock;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/lock', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
    }
    moveNode(nodeId, nodeBodyMove, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(nodeBodyMove, 'nodeBodyMove');
        opts = opts || {};
        let postBody = nodeBodyMove;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/move', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
    }
    unlockNode(nodeId, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/unlock', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
    }
    updateNode(nodeId, nodeBodyUpdate, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(nodeBodyUpdate, 'nodeBodyUpdate');
        opts = opts || {};
        let postBody = nodeBodyUpdate;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
    }
    updateNodeContent(nodeId, contentBodyUpdate, opts) {
        throwIfNotDefined(nodeId, 'nodeId');
        throwIfNotDefined(contentBodyUpdate, 'contentBodyUpdate');
        opts = opts || {};
        let postBody = contentBodyUpdate;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'majorVersion': opts['majorVersion'],
            'comment': opts['comment'],
            'name': opts['name'],
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/octet-stream'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/content', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
    }
}
//# sourceMappingURL=nodes.api.js.map