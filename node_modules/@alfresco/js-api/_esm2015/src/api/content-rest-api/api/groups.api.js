/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { GroupEntry } from '../model/groupEntry';
import { GroupMemberEntry } from '../model/groupMemberEntry';
import { GroupMemberPaging } from '../model/groupMemberPaging';
import { GroupPaging } from '../model/groupPaging';
import { BaseApi } from './base.api';
import { buildCollectionParam } from '../../../alfrescoApiClient';
import { throwIfNotDefined } from '../../../assert';
export class GroupsApi extends BaseApi {
    createGroup(groupBodyCreate, opts) {
        throwIfNotDefined(groupBodyCreate, 'groupBodyCreate');
        opts = opts || {};
        let postBody = groupBodyCreate;
        let pathParams = {};
        let queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/groups', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupEntry);
    }
    createGroupMembership(groupId, groupMembershipBodyCreate, opts) {
        throwIfNotDefined(groupId, 'groupId');
        throwIfNotDefined(groupMembershipBodyCreate, 'groupMembershipBodyCreate');
        opts = opts || {};
        let postBody = groupMembershipBodyCreate;
        let pathParams = {
            'groupId': groupId
        };
        let queryParams = {
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/groups/{groupId}/members', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupMemberEntry);
    }
    deleteGroup(groupId, opts) {
        throwIfNotDefined(groupId, 'groupId');
        opts = opts || {};
        let postBody = null;
        let cascadeDelete = opts['cascade'] ? opts['cascade'] : false;
        let pathParams = {
            'groupId': groupId
        };
        let queryParams = {
            'cascade': cascadeDelete
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/groups/{groupId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteGroupMembership(groupId, groupMemberId) {
        throwIfNotDefined(groupId, 'groupId');
        throwIfNotDefined(groupMemberId, 'groupMemberId');
        let postBody = null;
        let pathParams = {
            'groupId': groupId, 'groupMemberId': groupMemberId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/groups/{groupId}/members/{groupMemberId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getGroup(groupId, opts) {
        throwIfNotDefined(groupId, 'groupId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'groupId': groupId
        };
        let queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/groups/{groupId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupEntry);
    }
    listGroupMemberships(groupId, opts) {
        throwIfNotDefined(groupId, 'groupId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'groupId': groupId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
            'where': opts['where'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/groups/{groupId}/members', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupMemberPaging);
    }
    listGroupMembershipsForPerson(personId, opts) {
        throwIfNotDefined(personId, 'personId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'personId': personId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
            'include': buildCollectionParam(opts['include'], 'csv'),
            'where': opts['where'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupPaging);
    }
    listGroups(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': buildCollectionParam(opts['orderBy'], 'csv'),
            'include': buildCollectionParam(opts['include'], 'csv'),
            'where': opts['where'],
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupPaging);
    }
    updateGroup(groupId, groupBodyUpdate, opts) {
        throwIfNotDefined(groupId, 'groupId');
        throwIfNotDefined(groupBodyUpdate, 'groupBodyUpdate');
        opts = opts || {};
        let postBody = groupBodyUpdate;
        let pathParams = {
            'groupId': groupId
        };
        let queryParams = {
            'include': buildCollectionParam(opts['include'], 'csv'),
            'fields': buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/groups/{groupId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupEntry);
    }
}
//# sourceMappingURL=groups.api.js.map