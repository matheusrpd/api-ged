/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { AlfrescoApiClient } from '../alfrescoApiClient';
import { AlfrescoApiConfig } from '../alfrescoApiConfig';
import { Authentication } from './authentication';
import { AlfrescoApi } from '../alfrescoApi';
import { Storage } from '../storage';
export declare class Oauth2Auth extends AlfrescoApiClient {
    private iFrameTimeOut;
    private checkAccessToken;
    storage: Storage;
    hashFragmentParams: any;
    token: string;
    discovery: any;
    authentications: Authentication;
    iFrameHashListener: any;
    constructor(config: AlfrescoApiConfig, alfrescoApi: AlfrescoApi);
    setConfig(config: AlfrescoApiConfig, alfrescoApi: AlfrescoApi): void;
    initOauth(): Promise<void>;
    discoveryUrls(): void;
    hasContentProvider(): boolean;
    checkFragment(externalHash?: any): any;
    isPublicUrl(): boolean;
    padBase64(base64data: any): any;
    processJWTToken(jwt: any): any;
    b64DecodeUnicode(b64string: string): string;
    storeIdToken(idToken: string, exp: number): void;
    storeAccessToken(accessToken: string, expiresIn: number, refreshToken?: string): void;
    saveUsername(username: string): void;
    implicitLogin(): void;
    isValidToken(): boolean;
    isValidAccessToken(): boolean;
    getIdToken(): string;
    getAccessToken(): string;
    redirectLogin(): void;
    genNonce(): string;
    composeImplicitLoginUrl(): string;
    composeIframeLoginUrl(): string;
    hasHashCharacter(hash: string): boolean;
    startWithHashRoute(hash: string): boolean;
    getHashFragmentParams(externalHash: string): string;
    parseQueryString(queryString: string): any;
    silentRefresh(): void;
    removeHashFromSilentIframe(): void;
    createIframe(): void;
    destroyIframe(): void;
    /**
     * login Alfresco API
     * @returns {Promise} A promise that returns {new authentication token} if resolved and {error} if rejected.
     * */
    login(username: string, password: string): Promise<any>;
    grantPasswordLogin(username: string, password: string, resolve: any, reject: any): void;
    /**
     * Refresh the  Token
     * */
    refreshToken(): Promise<any>;
    /**
     * Set the current Token
     * */
    setToken(token: string, refreshToken: string): void;
    /**
     * Get the current Token
     *
     * */
    getToken(): string;
    /**
     * return the Authentication
     *
     * @returns {Object} authentications
     * */
    getAuthentication(): Authentication;
    /**
     * Change the Host
     * */
    changeHost(host: string): void;
    /**
     * If the client is logged in return true
     *
     * @returns {Boolean} is logged in
     */
    isLoggedIn(): boolean;
    /**
     * Logout
     **/
    logOut(): Promise<void>;
    invalidateSession(): void;
    exchangeTicketListener(alfrescoApi: AlfrescoApi): void;
}
