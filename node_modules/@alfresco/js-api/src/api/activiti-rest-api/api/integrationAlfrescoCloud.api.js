"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const resultListDataRepresentationAlfrescoContentRepresentation_1 = require("../model/resultListDataRepresentationAlfrescoContentRepresentation");
const resultListDataRepresentationAlfrescoNetworkRepresenation_1 = require("../model/resultListDataRepresentationAlfrescoNetworkRepresenation");
const resultListDataRepresentationAlfrescoSiteRepresenation_1 = require("../model/resultListDataRepresentationAlfrescoSiteRepresenation");
const base_api_1 = require("./base.api");
const assert_1 = require("../../../assert");
class IntegrationAlfrescoCloudApi extends base_api_1.BaseApi {
    confirmAuthorisation(code) {
        assert_1.throwIfNotDefined(code, 'code');
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'code': code
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['text/html'];
        return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/confirm-auth-request', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getAllNetworks() {
        let postBody = null;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/networks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationAlfrescoNetworkRepresenation_1.ResultListDataRepresentationAlfrescoNetworkRepresenation);
    }
    getAllSites(networkId) {
        assert_1.throwIfNotDefined(networkId, 'networkId');
        let postBody = null;
        let pathParams = {
            'networkId': networkId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/networks/{networkId}/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationAlfrescoSiteRepresenation_1.ResultListDataRepresentationAlfrescoSiteRepresenation);
    }
    getContentInFolderPath(networkId, opts) {
        assert_1.throwIfNotDefined(networkId, 'networkId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'networkId': networkId
        };
        let queryParams = {
            'siteId': opts['siteId'],
            'path': opts['path']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/networks/{networkId}/sites/{siteId}/folderpath/{folderPath}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationAlfrescoContentRepresentation_1.ResultListDataRepresentationAlfrescoContentRepresentation);
    }
    getContentInFolder(networkId, folderId) {
        assert_1.throwIfNotDefined(networkId, 'networkId');
        assert_1.throwIfNotDefined(folderId, 'folderId');
        let postBody = null;
        let pathParams = {
            'networkId': networkId, 'folderId': folderId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/networks/{networkId}/folders/{folderId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationAlfrescoContentRepresentation_1.ResultListDataRepresentationAlfrescoContentRepresentation);
    }
    getContentInSite(networkId, siteId) {
        assert_1.throwIfNotDefined(networkId, 'networkId');
        assert_1.throwIfNotDefined(siteId, 'siteId');
        let postBody = null;
        let pathParams = {
            'networkId': networkId, 'siteId': siteId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/networks/{networkId}/sites/{siteId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationAlfrescoContentRepresentation_1.ResultListDataRepresentationAlfrescoContentRepresentation);
    }
}
exports.IntegrationAlfrescoCloudApi = IntegrationAlfrescoCloudApi;
//# sourceMappingURL=integrationAlfrescoCloud.api.js.map