"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const tagEntry_1 = require("../model/tagEntry");
const tagPaging_1 = require("../model/tagPaging");
const base_api_1 = require("./base.api");
const alfrescoApiClient_1 = require("../../../alfrescoApiClient");
const assert_1 = require("../../../assert");
class TagsApi extends base_api_1.BaseApi {
    createTagForNode(nodeId, tagBodyCreate, opts) {
        assert_1.throwIfNotDefined(nodeId, 'nodeId');
        assert_1.throwIfNotDefined(tagBodyCreate, 'tagBodyCreate');
        opts = opts || {};
        let postBody = tagBodyCreate;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/tags', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, tagEntry_1.TagEntry);
    }
    deleteTagFromNode(nodeId, tagId) {
        assert_1.throwIfNotDefined(nodeId, 'nodeId');
        assert_1.throwIfNotDefined(tagId, 'tagId');
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId, 'tagId': tagId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/tags/{tagId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getTag(tagId, opts) {
        assert_1.throwIfNotDefined(tagId, 'tagId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'tagId': tagId
        };
        let queryParams = {
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/tags/{tagId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, tagEntry_1.TagEntry);
    }
    listTags(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv'),
            'include': alfrescoApiClient_1.buildCollectionParam(opts['include'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, tagPaging_1.TagPaging);
    }
    listTagsForNode(nodeId, opts) {
        assert_1.throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, tagPaging_1.TagPaging);
    }
    updateTag(tagId, tagBodyUpdate, opts) {
        assert_1.throwIfNotDefined(tagId, 'tagId');
        assert_1.throwIfNotDefined(tagBodyUpdate, 'tagBodyUpdate');
        opts = opts || {};
        let postBody = tagBodyUpdate;
        let pathParams = {
            'tagId': tagId
        };
        let queryParams = {
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/tags/{tagId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, tagEntry_1.TagEntry);
    }
}
exports.TagsApi = TagsApi;
//# sourceMappingURL=tags.api.js.map