"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const actionDefinitionEntry_1 = require("../model/actionDefinitionEntry");
const actionDefinitionList_1 = require("../model/actionDefinitionList");
const actionExecResultEntry_1 = require("../model/actionExecResultEntry");
const base_api_1 = require("./base.api");
const alfrescoApiClient_1 = require("../../../alfrescoApiClient");
const assert_1 = require("../../../assert");
class ActionsApi extends base_api_1.BaseApi {
    actionDetails(actionDefinitionId) {
        assert_1.throwIfNotDefined(actionDefinitionId, 'actionDefinitionId');
        let postBody = null;
        let pathParams = {
            'actionDefinitionId': actionDefinitionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/action-definitions/{actionDefinitionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, actionDefinitionEntry_1.ActionDefinitionEntry);
    }
    actionExec(actionBodyExec) {
        assert_1.throwIfNotDefined(actionBodyExec, 'actionBodyExec');
        let postBody = actionBodyExec;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/action-executions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, actionExecResultEntry_1.ActionExecResultEntry);
    }
    listActions(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': alfrescoApiClient_1.buildCollectionParam(opts['orderBy'], 'csv'),
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/action-definitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, actionDefinitionList_1.ActionDefinitionList);
    }
    nodeActions(nodeId, opts) {
        assert_1.throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': alfrescoApiClient_1.buildCollectionParam(opts['orderBy'], 'csv'),
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/action-definitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, actionDefinitionList_1.ActionDefinitionList);
    }
}
exports.ActionsApi = ActionsApi;
//# sourceMappingURL=actions.api.js.map