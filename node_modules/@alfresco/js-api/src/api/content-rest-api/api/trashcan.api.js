"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const deletedNodeEntry_1 = require("../model/deletedNodeEntry");
const deletedNodesPaging_1 = require("../model/deletedNodesPaging");
const nodeEntry_1 = require("../model/nodeEntry");
const renditionEntry_1 = require("../model/renditionEntry");
const renditionPaging_1 = require("../model/renditionPaging");
const base_api_1 = require("./base.api");
const alfrescoApiClient_1 = require("../../../alfrescoApiClient");
const assert_1 = require("../../../assert");
class TrashcanApi extends base_api_1.BaseApi {
    deleteDeletedNode(nodeId) {
        assert_1.throwIfNotDefined(nodeId, 'nodeId');
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getArchivedNodeRendition(nodeId, renditionId) {
        assert_1.throwIfNotDefined(nodeId, 'nodeId');
        assert_1.throwIfNotDefined(renditionId, 'renditionId');
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId, 'renditionId': renditionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}/renditions/{renditionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, renditionEntry_1.RenditionEntry);
    }
    getArchivedNodeRenditionContent(nodeId, renditionId, opts) {
        assert_1.throwIfNotDefined(nodeId, 'nodeId');
        assert_1.throwIfNotDefined(renditionId, 'renditionId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId, 'renditionId': renditionId
        };
        let queryParams = {
            'attachment': opts['attachment'],
            'placeholder': opts['placeholder']
        };
        let headerParams = {
            'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
        };
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}/renditions/{renditionId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getDeletedNode(nodeId, opts) {
        assert_1.throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'include': alfrescoApiClient_1.buildCollectionParam(opts['include'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, deletedNodeEntry_1.DeletedNodeEntry);
    }
    getDeletedNodeContent(nodeId, opts) {
        assert_1.throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'attachment': opts['attachment']
        };
        let headerParams = {
            'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
        };
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    listDeletedNodeRenditions(nodeId, opts) {
        assert_1.throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'where': opts['where']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}/renditions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, renditionPaging_1.RenditionPaging);
    }
    listDeletedNodes(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'include': alfrescoApiClient_1.buildCollectionParam(opts['include'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, deletedNodesPaging_1.DeletedNodesPaging);
    }
    restoreDeletedNode(nodeId, opts) {
        assert_1.throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        let postBody = opts['deletedNodeBodyRestore'];
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}/restore', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, nodeEntry_1.NodeEntry);
    }
}
exports.TrashcanApi = TrashcanApi;
//# sourceMappingURL=trashcan.api.js.map