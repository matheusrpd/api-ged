"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const versionEntry_1 = require("../model/versionEntry");
const versionPaging_1 = require("../model/versionPaging");
const base_api_1 = require("./base.api");
const alfrescoApiClient_1 = require("../../../alfrescoApiClient");
const assert_1 = require("../../../assert");
class VersionsApi extends base_api_1.BaseApi {
    deleteVersion(nodeId, versionId) {
        assert_1.throwIfNotDefined(nodeId, 'nodeId');
        assert_1.throwIfNotDefined(versionId, 'versionId');
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId, 'versionId': versionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/versions/{versionId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getVersion(nodeId, versionId) {
        assert_1.throwIfNotDefined(nodeId, 'nodeId');
        assert_1.throwIfNotDefined(versionId, 'versionId');
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId, 'versionId': versionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/versions/{versionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, versionEntry_1.VersionEntry);
    }
    getVersionContent(nodeId, versionId, opts) {
        assert_1.throwIfNotDefined(nodeId, 'nodeId');
        assert_1.throwIfNotDefined(versionId, 'versionId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId, 'versionId': versionId
        };
        let queryParams = {
            'attachment': opts['attachment']
        };
        let headerParams = {
            'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
        };
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/versions/{versionId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    listVersionHistory(nodeId, opts) {
        assert_1.throwIfNotDefined(nodeId, 'nodeId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'include': alfrescoApiClient_1.buildCollectionParam(opts['include'], 'csv'),
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv'),
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/versions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, versionPaging_1.VersionPaging);
    }
    revertVersion(nodeId, versionId, revertBody, opts) {
        assert_1.throwIfNotDefined(nodeId, 'nodeId');
        assert_1.throwIfNotDefined(versionId, 'versionId');
        assert_1.throwIfNotDefined(revertBody, 'revertBody');
        opts = opts || {};
        let postBody = revertBody;
        let pathParams = {
            'nodeId': nodeId, 'versionId': versionId
        };
        let queryParams = {
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/versions/{versionId}/revert', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, versionEntry_1.VersionEntry);
    }
}
exports.VersionsApi = VersionsApi;
//# sourceMappingURL=versions.api.js.map