"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const siteContainerEntry_1 = require("../model/siteContainerEntry");
const siteContainerPaging_1 = require("../model/siteContainerPaging");
const siteEntry_1 = require("../model/siteEntry");
const siteMemberEntry_1 = require("../model/siteMemberEntry");
const siteMemberPaging_1 = require("../model/siteMemberPaging");
const siteMembershipRequestEntry_1 = require("../model/siteMembershipRequestEntry");
const siteMembershipRequestPaging_1 = require("../model/siteMembershipRequestPaging");
const siteMembershipRequestWithPersonPaging_1 = require("../model/siteMembershipRequestWithPersonPaging");
const sitePaging_1 = require("../model/sitePaging");
const siteRoleEntry_1 = require("../model/siteRoleEntry");
const siteRolePaging_1 = require("../model/siteRolePaging");
const base_api_1 = require("./base.api");
const alfrescoApiClient_1 = require("../../../alfrescoApiClient");
const assert_1 = require("../../../assert");
class SitesApi extends base_api_1.BaseApi {
    approveSiteMembershipRequest(siteId, inviteeId, opts) {
        assert_1.throwIfNotDefined(siteId, 'siteId');
        assert_1.throwIfNotDefined(inviteeId, 'inviteeId');
        opts = opts || {};
        let postBody = opts['siteMembershipApprovalBody'];
        let pathParams = {
            'siteId': siteId, 'inviteeId': inviteeId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/site-membership-requests/{inviteeId}/approve', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    createSite(siteBodyCreate, opts) {
        assert_1.throwIfNotDefined(siteBodyCreate, 'siteBodyCreate');
        opts = opts || {};
        let postBody = siteBodyCreate;
        let pathParams = {};
        let queryParams = {
            'skipConfiguration': opts['skipConfiguration'],
            'skipAddToFavorites': opts['skipAddToFavorites'],
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, siteEntry_1.SiteEntry);
    }
    createSiteMembership(siteId, siteMembershipBodyCreate, opts) {
        assert_1.throwIfNotDefined(siteId, 'siteId');
        assert_1.throwIfNotDefined(siteMembershipBodyCreate, 'siteMembershipBodyCreate');
        opts = opts || {};
        let postBody = siteMembershipBodyCreate;
        let pathParams = {
            'siteId': siteId
        };
        let queryParams = {
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/members', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, siteMemberEntry_1.SiteMemberEntry);
    }
    createSiteMembershipRequestForPerson(personId, siteMembershipRequestBodyCreate, opts) {
        assert_1.throwIfNotDefined(personId, 'personId');
        assert_1.throwIfNotDefined(siteMembershipRequestBodyCreate, 'siteMembershipRequestBodyCreate');
        opts = opts || {};
        let postBody = siteMembershipRequestBodyCreate;
        let pathParams = {
            'personId': personId
        };
        let queryParams = {
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/site-membership-requests', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, siteMembershipRequestEntry_1.SiteMembershipRequestEntry);
    }
    deleteSite(siteId, opts) {
        assert_1.throwIfNotDefined(siteId, 'siteId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'siteId': siteId
        };
        let queryParams = {
            'permanent': opts['permanent']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteSiteMembership(siteId, personId) {
        assert_1.throwIfNotDefined(siteId, 'siteId');
        assert_1.throwIfNotDefined(personId, 'personId');
        let postBody = null;
        let pathParams = {
            'siteId': siteId, 'personId': personId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/members/{personId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteSiteMembershipForPerson(personId, siteId) {
        assert_1.throwIfNotDefined(personId, 'personId');
        assert_1.throwIfNotDefined(siteId, 'siteId');
        let postBody = null;
        let pathParams = {
            'personId': personId, 'siteId': siteId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/sites/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteSiteMembershipRequestForPerson(personId, siteId) {
        assert_1.throwIfNotDefined(personId, 'personId');
        assert_1.throwIfNotDefined(siteId, 'siteId');
        let postBody = null;
        let pathParams = {
            'personId': personId, 'siteId': siteId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/site-membership-requests/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getSite(siteId, opts) {
        assert_1.throwIfNotDefined(siteId, 'siteId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'siteId': siteId
        };
        let queryParams = {
            'relations': alfrescoApiClient_1.buildCollectionParam(opts['relations'], 'csv'),
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, siteEntry_1.SiteEntry);
    }
    getSiteContainer(siteId, containerId, opts) {
        assert_1.throwIfNotDefined(siteId, 'siteId');
        assert_1.throwIfNotDefined(containerId, 'containerId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'siteId': siteId, 'containerId': containerId
        };
        let queryParams = {
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/containers/{containerId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, siteContainerEntry_1.SiteContainerEntry);
    }
    getSiteMembership(siteId, personId, opts) {
        assert_1.throwIfNotDefined(siteId, 'siteId');
        assert_1.throwIfNotDefined(personId, 'personId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'siteId': siteId, 'personId': personId
        };
        let queryParams = {
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/members/{personId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, siteMemberEntry_1.SiteMemberEntry);
    }
    getSiteMembershipForPerson(personId, siteId) {
        assert_1.throwIfNotDefined(personId, 'personId');
        assert_1.throwIfNotDefined(siteId, 'siteId');
        let postBody = null;
        let pathParams = {
            'personId': personId, 'siteId': siteId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/sites/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, siteRoleEntry_1.SiteRoleEntry);
    }
    getSiteMembershipRequestForPerson(personId, siteId, opts) {
        assert_1.throwIfNotDefined(personId, 'personId');
        assert_1.throwIfNotDefined(siteId, 'siteId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'personId': personId, 'siteId': siteId
        };
        let queryParams = {
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/site-membership-requests/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, siteMembershipRequestEntry_1.SiteMembershipRequestEntry);
    }
    getSiteMembershipRequests(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/site-membership-requests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, siteMembershipRequestWithPersonPaging_1.SiteMembershipRequestWithPersonPaging);
    }
    listSiteContainers(siteId, opts) {
        assert_1.throwIfNotDefined(siteId, 'siteId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'siteId': siteId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/containers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, siteContainerPaging_1.SiteContainerPaging);
    }
    listSiteMembershipRequestsForPerson(personId, opts) {
        assert_1.throwIfNotDefined(personId, 'personId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'personId': personId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/site-membership-requests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, siteMembershipRequestPaging_1.SiteMembershipRequestPaging);
    }
    listSiteMemberships(siteId, opts) {
        assert_1.throwIfNotDefined(siteId, 'siteId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'siteId': siteId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/members', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, siteMemberPaging_1.SiteMemberPaging);
    }
    listSiteMembershipsForPerson(personId, opts) {
        assert_1.throwIfNotDefined(personId, 'personId');
        opts = opts || {};
        let postBody = null;
        let pathParams = {
            'personId': personId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': alfrescoApiClient_1.buildCollectionParam(opts['orderBy'], 'csv'),
            'relations': alfrescoApiClient_1.buildCollectionParam(opts['relations'], 'csv'),
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv'),
            'where': opts['where']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, siteRolePaging_1.SiteRolePaging);
    }
    listSites(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': alfrescoApiClient_1.buildCollectionParam(opts['orderBy'], 'csv'),
            'relations': alfrescoApiClient_1.buildCollectionParam(opts['relations'], 'csv'),
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv'),
            'where': opts['where']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, sitePaging_1.SitePaging);
    }
    rejectSiteMembershipRequest(siteId, inviteeId, opts) {
        assert_1.throwIfNotDefined(siteId, 'siteId');
        assert_1.throwIfNotDefined(inviteeId, 'inviteeId');
        opts = opts || {};
        let postBody = opts['siteMembershipRejectionBody'];
        let pathParams = {
            'siteId': siteId, 'inviteeId': inviteeId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/site-membership-requests/{inviteeId}/reject', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    updateSite(siteId, siteBodyUpdate, opts) {
        assert_1.throwIfNotDefined(siteId, 'siteId');
        assert_1.throwIfNotDefined(siteBodyUpdate, 'siteBodyUpdate');
        opts = opts || {};
        let postBody = siteBodyUpdate;
        let pathParams = {
            'siteId': siteId
        };
        let queryParams = {
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, siteEntry_1.SiteEntry);
    }
    updateSiteMembership(siteId, personId, siteMembershipBodyUpdate, opts) {
        assert_1.throwIfNotDefined(siteId, 'siteId');
        assert_1.throwIfNotDefined(personId, 'personId');
        assert_1.throwIfNotDefined(siteMembershipBodyUpdate, 'siteMembershipBodyUpdate');
        opts = opts || {};
        let postBody = siteMembershipBodyUpdate;
        let pathParams = {
            'siteId': siteId, 'personId': personId
        };
        let queryParams = {
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/members/{personId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, siteMemberEntry_1.SiteMemberEntry);
    }
    updateSiteMembershipRequestForPerson(personId, siteId, siteMembershipRequestBodyUpdate, opts) {
        assert_1.throwIfNotDefined(personId, 'personId');
        assert_1.throwIfNotDefined(siteId, 'siteId');
        assert_1.throwIfNotDefined(siteMembershipRequestBodyUpdate, 'siteMembershipRequestBodyUpdate');
        opts = opts || {};
        let postBody = siteMembershipRequestBodyUpdate;
        let pathParams = {
            'personId': personId, 'siteId': siteId
        };
        let queryParams = {
            'fields': alfrescoApiClient_1.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/site-membership-requests/{siteId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, siteMembershipRequestEntry_1.SiteMembershipRequestEntry);
    }
}
exports.SitesApi = SitesApi;
//# sourceMappingURL=sites.api.js.map